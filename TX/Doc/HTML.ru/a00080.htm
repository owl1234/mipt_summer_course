<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Разное</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00080.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Классы</a> &#124;
<a href="#define-members">Макросы</a> &#124;
<a href="#func-members">Функции</a> &#124;
<a href="#var-members">Переменные</a>  </div>
  <div class="headertitle">
<h1>Разное</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Классы</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00016.htm">txAutoLock</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Класс для автоматической блокировки и разблокировки критической секции.  <a href="a00016.htm#_details">Подробнее...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Макросы</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gadaab2541529e020dfd4059094eff16bb">CALLOC</a>(type, size)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выделяет блок динамической памяти через calloc с автоматическим преобразованием типа указателя.  <a href="#gadaab2541529e020dfd4059094eff16bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga105949c59c998e38aad80266afac92bf">FREE</a>(ptr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Освобождает динамическую память и обнуляет указатель на нее.  <a href="#ga105949c59c998e38aad80266afac92bf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga973d717438fe468dd5a5d8d45ede5312"></a><!-- doxytag: member="Misc::__TX_FILELINE__" ref="ga973d717438fe468dd5a5d8d45ede5312" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312">__TX_FILELINE__</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309">__TX_FUNCTION__</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Имя текущей функции  <a href="#gab170f39ac0e379c324c73495f14a1309"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f">MAX</a>(a, b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Возвращает максимальное из двух чисел  <a href="#gafa99ec4acc4ecb2dc3c2d05da15d0e3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(a, b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Возвращает минимальное из двух чисел  <a href="#ga3acffbd305ee72dcd4593c0d8af64a4f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12">ROUND</a>(x)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Округляет число до целого  <a href="#gacd66e8cacf954c3bc3bba81d09425a12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gad2296e7bc6bc51ec0739aad2e8ee0a9c">_TX_DESTROY_3D</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><em>Ну просто <b>очень</b> удобный</em> макрос.  <a href="#gad2296e7bc6bc51ec0739aad2e8ee0a9c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6">ZERO</a>(type)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Обнулитель типов, не имеющих конструкторов  <a href="#gade9b60c36576ef735b3e1d1f628ad9c6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad">TX_ASSERT</a>(cond)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Замена стандартного макроса assert(), с выдачей сообщения через <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, консоль и OutputDebugString().  <a href="#gaf6d32e17de45766eea363ad72824ecad"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7">asserted</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит диагностическое сообщение в случае нулевого или ложного результата.  <a href="#ga889b74443b3e918adee3e31fad4653f7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b">verify</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выполняет команду (вычисляет выражение) и проверяет результат.  <a href="#ga14fecb1c008314444a74c1fe7d9a113b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6">TX_ERROR</a>(msg)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит развернутое диагностическое сообщение.  <a href="#ga2e7d012000ed9e784d32859d10c103f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044">TX_DEBUG_ERROR</a>(...)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит развернутое диагностическое сообщение в отладочном режиме.  <a href="#gabe7d5b7083c7588b457f73c1e0461044"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267">txStackBackTrace</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Распечатывает текущий стек вызовов функций в консоли.  <a href="#gae1f5bb8bcc99e21ed8dc46493027b267"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287">txGDI</a>(command, dc)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.  <a href="#gafdd807831b131ba38d5856b6ee4e8287"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Функции</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gab73db78e05652eca05c7efd4768e98ef">operator new</a> (size_t size, int)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выделяет блок динамической памяти через new с обнулением его содержимого перед вызовом конструктора.  <a href="#gab73db78e05652eca05c7efd4768e98ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gab6432a66009d36b85175c7720a78b1cc">operator new</a> (size_t size, size_t items, int)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выделяет блок динамической памяти через new[] с обнулением содержимого перед вызовом конструкторов.  <a href="#gab6432a66009d36b85175c7720a78b1cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881">random</a> (int range) tx_deprecated</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Генератор случайных чисел  <a href="#gaa81c1c7c499d76619d5d9d3369560881"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga33933dc1baf2a181b7f9fabd61a4163e">random</a> (double left, double right) tx_nodiscard tx_deprecated</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Генератор случайных чисел  <a href="#ga33933dc1baf2a181b7f9fabd61a4163e"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename Tx , typename Ta , typename Tb &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528">In</a> (Tx x, Ta a, Tb b) tx_nodiscard tx_deprecated</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Проверка, находится ли параметр х внутри замкнутого интервала [a; b].  <a href="#gab7d5f6591f73008dd7c4034ed94d7528"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42">tx_fpreset</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Переинициализирует математический сопроцессор  <a href="#ga5de732de72c46b992ac2feeac2de7e42"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026">txSqr</a> (double x)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><em>Очень удобное</em> возведение числа в квадрат.  <a href="#ga74ff1048e0d6bc458c9904fbbe0a6026"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f">txDump</a> (const void *address, const char name[]=&quot;_txDump()&quot;, bool pause=true)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Распечатывает дамп области памяти в консоли.  <a href="#gae0375f060fa35e25a4f5f4cc45573e5f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e">txRegQuery</a> (const char *keyName, const char *valueName, void *value, size_t szValue)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Читает информацию из реестра Windows.  <a href="#gad942f797bce07af74cd11c88d50ddd3e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b">txSetLocale</a> (int codepage=_TX_CODEPAGE, const char locale[]=_TX_LOCALE, const wchar_t wLocale[]=_TX_WLOCALE)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Смена кодовой страницы консоли и локали стандартной библиотеки С++.  <a href="#ga6122d52806d23ff6bd480a0f07b75f2b"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Переменные</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7">txPI</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Число Пи  <a href="#gaf59817ad656dcbb3f9baebeb4d7f82f7"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Вспомогательные функции</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41">txUpdateWindow</a> (int update=true)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Разрешает или запрещает автоматическое обновление изображения в окне.  <a href="#gaff3d9c60900531f438a19216485bdd41"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00081.htm#gabc64e03f4ca966e76bc714bbe8173761">txSelectObject</a> (HGDIOBJ obj, HDC dc=txDC())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Устанавливает текущий активный объект GDI.  <a href="#gabc64e03f4ca966e76bc714bbe8173761"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00081.htm#ga93cecf6b117fc403c0488f388b78a6d1">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Делает нечто иногда удобное. См. название функции.  <a href="#ga93cecf6b117fc403c0488f388b78a6d1"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Другие полезные функции, не связанные с рисованием</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196">txPlaySound</a> (const char filename[]=NULL, DWORD mode=SND_ASYNC)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Воспроизводит звуковой файл.  <a href="#ga177f8bcb7544821ea4b5bd0571fe7196"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">intptr_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821">txPlayVideo</a> (int x, int y, int width, int height, const char fileName[], double zoom=0, double gain=1, HWND wnd=txWindow())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Проигрывает видео.  <a href="#ga3d4731dd56b60635c80bc662c295c821"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">intptr_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaf5a6626fa2606a7f374fcc077fc92363">txPlayVideo</a> (const char fileName[], double zoom=0, double gain=1, HWND wnd=txWindow())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Проигрывает видео.  <a href="#gaf5a6626fa2606a7f374fcc077fc92363"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9">txSpeak</a> (const char *text,...) tx_printfy(1)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Читает <small>&#160;</small><span class="s"> мысли </span><small>&#160;</small> текст вслух.  <a href="#gad6db0ee1b36288c7eb3f2196077971f9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a">txMessageBox</a> (const char text[]=&quot;Муаххаха! :)&quot;, const char header[]=&quot;TXLib сообщает&quot;, unsigned flags=MB_ICONINFORMATION|MB_OKCANCEL)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит сообщение в окне с помощью функции MessageBox.  <a href="#gaf9be7d98f32c0737a2d7f30039a60c0a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586">txGetAsyncKeyState</a> (int key)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Проверяет, нажата ли указанная клавиша.  <a href="#ga782025393f08a0efb645b9d2e30f2586"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63">txNotifyIcon</a> (unsigned flags, const char title[], const char format[],...) tx_printfy(3)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит всплывающее сообщение в системном трее.  <a href="#ga03a5e3473a7e7e22764939ebb13f4e63"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f">txOutputDebugPrintf</a> (const char format[],...) tx_printfy(1)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Выводит сообщение в отладчике.  <a href="#ga372c7e43cc383da3f8e8e00fc60be91f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T , typename... ArgsT&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a">txPrintf</a> (const char *format, ArgsT...args)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Добрый дядюшка Принтф. Теперь шаболонный.  <a href="#ga9b529d93a8ebfa5ec2d02fa80819331a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T , typename... ArgsT&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00080.htm#ga4a3e395b81ff91d95fd23dafb3562e7c">txPrintf</a> (std::ostringstream &amp;stream, const char *format, ArgsT...args)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Печатает в строковый поток вывода, как sprintf().  <a href="#ga4a3e395b81ff91d95fd23dafb3562e7c"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T , typename... ArgsT&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00080.htm#ga18959fb3fc2657b0019c0052bbb3e060">txPrintf</a> (char buffer[], size_t size, const char *format, ArgsT...args)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Печатает в строковый буфер, как sprintf().  <a href="#ga18959fb3fc2657b0019c0052bbb3e060"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename... ArgsT&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00080.htm#ga06beb201bdba586f44f029ffc5083bcf">txFormat</a> (const char *format, ArgsT...args)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Форматирует строку, как sprintf().  <a href="#ga06beb201bdba586f44f029ffc5083bcf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5">sizearr</a>(arr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Вычисление размера массива в элементах  <a href="#ga799c47c1a2a151647cd765e1fa4b27b5"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gadfae620e55d8798711d4a0c72f6af99e">In</a> (const POINT &amp;pt, const RECT &amp;rect) tx_nodiscard tx_deprecated</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Проверка, находится ли точка pt внутри прямоугольника rect.  <a href="#gadfae620e55d8798711d4a0c72f6af99e"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga0b75271f60823b3c49a42cdd3c196ce5">please</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><em>Еще парочка макросов.</em>  <a href="#ga0b75271f60823b3c49a42cdd3c196ce5"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga6a20c009067e724a95695c674c2d3124">tx_auto_func</a>(func)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Автоматический вызов функции при завершении другой функции (аналог <code>__finally</code>)  <a href="#ga6a20c009067e724a95695c674c2d3124"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe">txDemangle</a> (const char *mangledName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Преобразует декорированное имя С++ в название типа.  <a href="#gafbd4278ff893fc1c1e28b086197adebe"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba">_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.  <a href="#gae4dfd7b0d66121016d6466d2ff10e8ba"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaaff3c8e496327bec13a821061787878f"></a><!-- doxytag: member="Misc::TX_COMMA" ref="gaaff3c8e496327bec13a821061787878f" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaaff3c8e496327bec13a821061787878f">TX_COMMA</a>&#160;&#160;&#160;,</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Синоним макроса _ (<a class="el" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba">символ подчеркивания</a>) <br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Очень служебные функции</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">WNDPROC&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga30fb1a6913174dfcea5079391f655be2">txSetWindowsHook</a> (WNDPROC wndProc=NULL)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна TXLib.  <a href="#ga30fb1a6913174dfcea5079391f655be2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2">txLock</a> (bool wait=true)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Блокировка холста (контекста рисования).  <a href="#ga532fa8a55c4f3d4f94ff0fdceae732b2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6">txUnlock</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Разблокировка холста  <a href="#ga8fe4ec4c66cb69ce337747fe65dd0cc6"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Макросы для построения статической карты сообщений (Message Map)</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8">TX_BEGIN_MESSAGE_MAP</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Заголовок карты сообщений (Message Map).  <a href="#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b">TX_HANDLE</a>(id)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Заголовок обработчика сообщения (Message handler) карты сообщений.  <a href="#gadbe2f17002d8d41056e9770066ef558b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4">TX_COMMAND_MAP</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Начало карты команд (Command map) в карте сообщений.  <a href="#ga3637c3398b6ebfa337171beec0770fe4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd">TX_END_MESSAGE_MAP</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Завершитель карты сообщений.  <a href="#ga3f4a70a0e5076cb4f4addcab0ca760cd"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Экспериментальные отладочные макросы</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00080.htm#gaaa5d2cd4ba134312dcaca4e8316bbe9e">__TX_DEBUG_MACROS</a>&#160;&#160;&#160;(&quot;Группа отладочных $-макросов&quot;)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Отладочная печать переменной во время вычисления выражения или участка кода во время его выполнения.  <a href="#gaaa5d2cd4ba134312dcaca4e8316bbe9e"></a><br/></td></tr>
</table>
<hr/><h2>Макросы</h2>
<a class="anchor" id="gadaab2541529e020dfd4059094eff16bb"></a><!-- doxytag: member="TXWave.h::CALLOC" ref="gadaab2541529e020dfd4059094eff16bb" args="(type, size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CALLOC</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">type, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выделяет блок динамической памяти через calloc с автоматическим преобразованием типа указателя. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Тип данных, размещаемый в памяти </td></tr>
    <tr><td class="paramname">size</td><td>Количество элементов типа <code>type</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Выделенная память</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">char</span>* str = <a class="code" href="a00080.htm#gadaab2541529e020dfd4059094eff16bb" title="Выделяет блок динамической памяти через calloc с автоматическим преобразованием типа указателя...">CALLOC</a> (<span class="keywordtype">char</span>, 100);
          ...
          <a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf" title="Освобождает динамическую память и обнуляет указатель на нее.">FREE</a> (str);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00061_source.htm">TXWave.h</a> строка <a class="el" href="a00061_source.htm#l00442">442</a></p>

</div>
</div>
<a class="anchor" id="ga105949c59c998e38aad80266afac92bf"></a><!-- doxytag: member="TXWave.h::FREE" ref="ga105949c59c998e38aad80266afac92bf" args="(ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define FREE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Освобождает динамическую память и обнуляет указатель на нее. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>Указатель на освобождаемую память. После освобождения памяти он обнуляется.</td></tr>
  </table>
  </dd>
</dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">char</span>* str = <a class="code" href="a00080.htm#gadaab2541529e020dfd4059094eff16bb" title="Выделяет блок динамической памяти через calloc с автоматическим преобразованием типа указателя...">CALLOC</a> (<span class="keywordtype">char</span>, 100);
          ...
          <a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf" title="Освобождает динамическую память и обнуляет указатель на нее.">FREE</a> (str);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00061_source.htm">TXWave.h</a> строка <a class="el" href="a00061_source.htm#l00458">458</a></p>

</div>
</div>
<a class="anchor" id="gab170f39ac0e379c324c73495f14a1309"></a><!-- doxytag: member="TXLib.h::__TX_FUNCTION__" ref="gab170f39ac0e379c324c73495f14a1309" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define __TX_FUNCTION__</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Имя текущей функции </p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Если определение имени функции не поддерживается компилятором, то __TX_FUNCTION__ раскрывается в имя исходного файла и номер строки. </dd></dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l00276">276</a></p>

</div>
</div>
<a class="anchor" id="ga799c47c1a2a151647cd765e1fa4b27b5"></a><!-- doxytag: member="TXLib.h::sizearr" ref="ga799c47c1a2a151647cd765e1fa4b27b5" args="(arr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define sizearr</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">arr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Вычисление размера массива в элементах </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>Имя массива.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Размер массива в элементах (не в байтах).</dd></dl>
<p>Макрос <a class="el" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr()</a> вычисляет размер массива в элементах, проверяя, можно ли его правильно вычислить при компиляции.</p>
<p>Макрос SIZEARR() просто делит размер всего массива в байтах на размер его элемента, получается размер массива в элементах. <br/>
 Он <b>не проверяет,</b> можно ли его правильно вычислить, и при неправильном использовании может выдать <b>неверный размер.</b></p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>SIZEARR() выдает неверный размер, если определение массива вместе с его размером, известным при компиляции, недоступно в месте использования SIZEARR(). См. пример ниже.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">void</span> test()
              {
              <span class="comment">// Размер этого массива, хоть и не указан, но может быть автоматически определен</span>
              <span class="comment">// компилятором при компиляции программы. Он равен 4 (четыре структуры POINT).</span>

              POINT coord[] = { {110, 110}, {120, 120}, {130, 110}, {140, 120} };

              <span class="comment">// Здесь размер массива известен при компиляции, т.к. он был определен тут же.</span>

              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (coord) - 1; i++)
                  txLine (coord[i].x, coord[i].y, coord[i+1].x, coord[i+1].y);

              DrawLines1 (coord);                  <span class="comment">// Попытка передать массив без передачи размера.</span>
              DrawLines2 (coord, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (coord)); <span class="comment">// Правильная передача размера массива.</span>

              DrawLines3 (coord);                  <span class="comment">// В принципе, можно и так, но тут ВОДЯТСЯ ШАБЛОНЫ.</span>
              }

          <span class="comment">// Функции DrawLines1 и DrawLines2 определены так:</span>

          <span class="keywordtype">void</span> DrawLines1 (<span class="keyword">const</span> POINT coord[])
              {
              <span class="comment">// Массивы в Си передаются как указатели на начало массива. Поэтому:</span>
              <span class="comment">// 1) sizearr здесь выдаст ошибку компиляции, и ее легко будет найти.</span>
              <span class="comment">// 2) SIZEARR здесь неверно посчитает размер, что намного хуже, чем ошибка компиляции,</span>
              <span class="comment">//      т.к. он будет равен sizeof (POINT*) / sizeof (POINT) == 4/8 == 0, что станет</span>
              <span class="comment">//      трудноуловимой логической ошибкой времени исполнения.</span>

              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (coord) - 1; i++)
                  txLine (coord[i].x, coord[i].y, coord[i+1].x, coord[i+1].y);
              }

          <span class="keywordtype">void</span> DrawLines2 (<span class="keyword">const</span> POINT coord[], <span class="keywordtype">int</span> n)
              {
              <span class="comment">// Здесь размер приходит как параметр n, так что все просто. Вызывающая сторона (функция</span>
              <span class="comment">// test) правильно вычисляет его и передает функции DrawLines2, которая им пользуется.</span>

              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n - 1; i++)
                  txLine (coord[i].x, coord[i].y, coord[i+1].x, coord[i+1].y);
              }

          <span class="comment">// HIC SVNT TEMPLATES</span>

          <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> size&gt;
          <span class="keywordtype">void</span> DrawLines3 (<span class="keyword">const</span> POINT (&amp;coord) [size])
              {
              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size - 1; i++)
                  txLine (coord[i].x, coord[i].y, coord[i+1].x, coord[i+1].y);
              }
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04274">4274</a></p>

</div>
</div>
<a class="anchor" id="gafa99ec4acc4ecb2dc3c2d05da15d0e3f"></a><!-- doxytag: member="TXLib.h::MAX" ref="gafa99ec4acc4ecb2dc3c2d05da15d0e3f" args="(a, b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAX</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">a, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">b&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Возвращает максимальное из двух чисел </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Одно из чисел :) </td></tr>
    <tr><td class="paramname">b</td><td>Другое из чисел :)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Максимальное из двух чисел a и b.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Это <b>макрос</b>, и аргументы <code>a</code> и <code>b</code> могут вычисляться в нем два раза. Поэтому не используйте в нем побочных действий <code>++</code>, <code>--</code>, <code>+=</code> и т.п. Например, <b>не</b> пишите так: <code>int m = MAX (++x, y += 2);</code></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (3, 7) != 7) printf (<span class="stringliteral">&quot;Your CPU is broken, throw it away.&quot;</span>);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04450">4450</a></p>

</div>
</div>
<a class="anchor" id="ga3acffbd305ee72dcd4593c0d8af64a4f"></a><!-- doxytag: member="TXLib.h::MIN" ref="ga3acffbd305ee72dcd4593c0d8af64a4f" args="(a, b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">a, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">b&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Возвращает минимальное из двух чисел </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>Одно из чисел :) </td></tr>
    <tr><td class="paramname">b</td><td>Другое из чисел :)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Минимальное из двух чисел a и b.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Это <b>макрос</b>, и аргументы <code>a</code> и <code>b</code> могут вычисляться в нем два раза. Поэтому не используйте в нем побочных действий <code>++</code>, <code>--</code>, <code>+=</code> и т.п. Например, <b>не</b> пишите так: <code>int m = MIN (x--, y /= 2);</code></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (3, 7) != 3) printf (<span class="stringliteral">&quot;Your CPU is still broken, throw it away twice.&quot;</span>);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04473">4473</a></p>

</div>
</div>
<a class="anchor" id="gacd66e8cacf954c3bc3bba81d09425a12"></a><!-- doxytag: member="TXLib.h::ROUND" ref="gacd66e8cacf954c3bc3bba81d09425a12" args="(x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ROUND</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">x</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Округляет число до целого </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Число. <small>&#160;</small><span class="s"> А вы как думали? </span><small>&#160;</small></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Округленное число, преобразованное в тип <code>long</code>.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">double</span> weight = 5.5;        <span class="comment">// 5.5 kilos is the weight of Maru the Cat in 2012.</span>
          <span class="keywordtype">long</span> Maru = <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (weight); <span class="comment">// Should use ROUND() because Maru is so round. And long.</span>
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04497">4497</a></p>

</div>
</div>
<a class="anchor" id="gad2296e7bc6bc51ec0739aad2e8ee0a9c"></a><!-- doxytag: member="TXLib.h::_TX_DESTROY_3D" ref="gad2296e7bc6bc51ec0739aad2e8ee0a9c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define _TX_DESTROY_3D</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><em>Ну просто <b>очень</b> удобный</em> макрос. </p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Это еще один пример, как <b> не надо </b> писать код. <br/>
<br/>
 Макрос определен так: <br/>
<br/>
 <code> #define z 0 </code> <br/>
<br/>
 Замечательный макрос! Теперь на одну переменную в программе стало меньше. :((</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>(Используйте <code>#undef</code>. С <code>&lt;<a href="http://www.google.ru/search?q=%23undef">http://www.google.ru/search?q=%23undef</a>&gt;#undef</code>  ваша программа станет мягкой и шелковистой.)</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment"><span class="preprocessor">          #define _TX_DESTROY_3D</span>
<span class="preprocessor"></span><span class="preprocessor">          #include &quot;<a class="code" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>&quot;</span>

          <span class="comment">// А теперь попробуйте объявить переменную z для расчета 3-D координат x, y, z:</span>

          <span class="keywordtype">int</span> z = 0;  <span class="comment">// Да! TXLib уничтожает трехмерность! Очень круто. :=/</span>
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04614">4614</a></p>

</div>
</div>
<a class="anchor" id="ga0b75271f60823b3c49a42cdd3c196ce5"></a><!-- doxytag: member="TXLib.h::please" ref="ga0b75271f60823b3c49a42cdd3c196ce5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define please</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><em>Еще парочка макросов.</em> </p>
<p><code>please</code> увеличивает вероятность успешного выполнения кода*.</p>
<p><code>meow</code> -- ...просто мяу :)</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd><small>* Это шутка :)</small></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment"><span class="preprocessor">          #include &quot;<a class="code" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>&quot;</span>

          <span class="keywordtype">int</span> x = rand() meow   <span class="comment">// Как же без котиков?</span>
          <span class="keywordtype">int</span> y = rand() meow
          if (x+y &gt; RAMD_MAX/2) <a class="code" href="a00080.htm#ga0b75271f60823b3c49a42cdd3c196ce5" title="Еще парочка макросов.">please</a> x = y = 0;
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04643">4643</a></p>

</div>
</div>
<a class="anchor" id="gade9b60c36576ef735b3e1d1f628ad9c6"></a><!-- doxytag: member="TXLib.h::ZERO" ref="gade9b60c36576ef735b3e1d1f628ad9c6" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZERO</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">type</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Обнулитель типов, не имеющих конструкторов </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Имя типа.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Значение типа <code>type</code>, покомпонентно инициализированное по умолчанию (для встроенных типов -- нулем).</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">void</span> f (POINT p);
          ...

          POINT z = {}; f (z);  <span class="comment">// Так без ZERO</span>

          f (<a class="code" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (POINT));     <span class="comment">// Так с ZERO</span>
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04673">4673</a></p>

</div>
</div>
<a class="anchor" id="ga6a20c009067e724a95695c674c2d3124"></a><!-- doxytag: member="TXLib.h::tx_auto_func" ref="ga6a20c009067e724a95695c674c2d3124" args="(func)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define tx_auto_func</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">func</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Автоматический вызов функции при завершении другой функции (аналог <code>__finally</code>) </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">func</td><td>Тело автоматически вызываемой функции (фигурные скобки не обязательны).</td></tr>
  </table>
  </dd>
</dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>- <em>Все</em> переменные вызываемой функции связываются с переменными внешней функции по ссылке.<ul>
<li>Их названия и типы <em>не</em> указываются. Указывается только тело вызываемой функции.</li>
<li>Синоним: tx_finally</li>
</ul>
</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">void</span> some_func()
              {
              <span class="keywordtype">int</span> x = 1;
              <a class="code" href="a00080.htm#ga6a20c009067e724a95695c674c2d3124" title="Автоматический вызов функции при завершении другой функции (аналог __finally)">tx_auto_func</a> ($(x));                      <span class="comment">// Will be printed at return</span>

              FILE* f = fopen (__FILE__<span class="stringliteral">&quot;.o.txt&quot;</span>, <span class="stringliteral">&quot;w&quot;</span>);
              <a class="code" href="a00080.htm#ga6a20c009067e724a95695c674c2d3124" title="Автоматический вызов функции при завершении другой функции (аналог __finally)">tx_auto_func</a> (fclose (f));                <span class="comment">// Will be closed at return</span>

              fprintf (f, <span class="stringliteral">&quot;start: x = %d\n&quot;</span>, x);        <span class="comment">// Do some job</span>
              x = 2;                                    <span class="comment">// Do some job</span>
              }
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04709">4709</a></p>

</div>
</div>
<a class="anchor" id="gaf6d32e17de45766eea363ad72824ecad"></a><!-- doxytag: member="TXLib.h::TX_ASSERT" ref="gaf6d32e17de45766eea363ad72824ecad" args="(cond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">cond</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Замена стандартного макроса assert(), с выдачей сообщения через <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, консоль и OutputDebugString(). </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">cond</td><td>Условие для проверки.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Не определено.</dd></dl>
<p>Если условие, проверяемое <a class="el" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT()</a>, истинно, то макрос ничего не делает. <br/>
 Если условие оказывается ложно, то выводится диагностическое сообщение и программа аварийно завершается.</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd><b>При компиляции в режиме Release (или если определен NDEBUG) TX_ASSERT превращается в пустой оператор.</b> <br/>
 Не надо помещать в <a class="el" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT()</a> или в assert() действия, которые важны для работы алгоритма!</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Если условие <code>cond</code> может быть вычислено уже во время компиляции как ложное, компилятор может предупредить об этом (как о делении на 0). </dd>
<dd>
<small>See: <a href="http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf">"JPL Institutional Coding
          Standard for the C Programming Language", Jet Propulsion Laboratory, California Institute of Technology, JPL DOCID D-60411, Ver. 1.0, March 3, 2009</a>, page 15.</small> <br/>
<br/>
</dd>
<dd>
Стандартный макрос assert() переопределяется так, что становится эквивалентен <a class="el" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT()</a>.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Кто не юзает assert(), тот ест баги на десерт!</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>, <a class="el" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a" title="For compatibility with assert macro.">verified</a>, <a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT</a> (0 &lt;= i &amp;&amp; i &lt; ARRAY_SIZE);
          assert    (0 &lt;= i &amp;&amp; i &lt; ARRAY_SIZE);  <span class="comment">// То же самое, что и TX_ASSERT</span>

          FILE* input = fopen (<span class="stringliteral">&quot;a.txt&quot;</span>, <span class="stringliteral">&quot;r&quot;</span>);
          <a class="code" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT</a> (input);
          assert    (input);                     <span class="comment">// То же самое, что и TX_ASSERT</span>

          <span class="comment">// Этот вызов fgets() НЕ будет выполнен в режиме Release:</span>
          assert (fgets (str, <span class="keyword">sizeof</span> (str) - 1, input));

          <span class="comment">// Здесь все будет правильно:</span>
          <span class="keywordtype">bool</span> ok = (fclose (input) == 0);
          <a class="code" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">TX_ASSERT</a> (ok);
          assert    (ok);                        <span class="comment">// То же самое, что и TX_ASSERT</span>
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04786">4786</a></p>

</div>
</div>
<a class="anchor" id="ga889b74443b3e918adee3e31fad4653f7"></a><!-- doxytag: member="TXLib.h::asserted" ref="ga889b74443b3e918adee3e31fad4653f7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define asserted</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит диагностическое сообщение в случае нулевого или ложного результата. </p>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Всегда 0.</dd></dl>
<p>Суффиксная форма макроса assert(), не теряющая в режиме Release исполнения предиката.</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd><b>Предполагается, что операция в случае неуспеха возвращает 0 или false.</b> <br/>
<br/>
 <b>При компиляции в режиме Release (или если определен NDEBUG) asserted превращается в пустое место.</b></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd>assert(), <a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify()</a>, <a class="el" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a" title="For compatibility with assert macro.">verified</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          FILE* input = fopen (<span class="stringliteral">&quot;a.txt&quot;</span>, <span class="stringliteral">&quot;r&quot;</span>); assert (input);

          <span class="comment">// Этот вызов fgets() будет выполнен в любом случае:</span>
          fgets (str, <span class="keyword">sizeof</span> (str) - 1, input) <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;

          <span class="comment">// Этот вызов fgets() НЕ будет выполнен в режиме Release:</span>
          assert (fgets (str, sizeof (str) - 1, input));

          (fclose (input) != 0) asserted;
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04830">4830</a></p>

</div>
</div>
<a class="anchor" id="ga14fecb1c008314444a74c1fe7d9a113b"></a><!-- doxytag: member="TXLib.h::verify" ref="ga14fecb1c008314444a74c1fe7d9a113b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define verify</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выполняет команду (вычисляет выражение) и проверяет результат. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">expr</td><td>Команда (выражение).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>1, если выражение <code>expr</code> истинно, иначе 0.</dd></dl>
<p>Если условие, проверяемое <a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify()</a>, истинно, то макрос ничего не делает. <br/>
 Если условие оказывается ложно, то выводится диагностическое сообщение и программа аварийно завершается.</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Действие макроса аналогично assert(), но при компиляции в режиме Release (или если определен NDEBUG) verify <b>не</b> превращается в пустой оператор.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a" title="For compatibility with assert macro.">verified</a>, assert(), <a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          FILE* input = <a class="code" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify</a> (fopen (<span class="stringliteral">&quot;a.txt&quot;</span>, <span class="stringliteral">&quot;r&quot;</span>));

          <span class="comment">// Этот вызов fgets() БУДЕТ выполнен в режиме Release:</span>
          <a class="code" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify</a> (fgets (str, <span class="keyword">sizeof</span> (str) - 1, input));

          <span class="comment">// Здесь все тоже будет правильно:</span>
          <a class="code" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify</a> (fclose (input) == 0);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04875">4875</a></p>

</div>
</div>
<a class="anchor" id="ga2e7d012000ed9e784d32859d10c103f6"></a><!-- doxytag: member="TXLib.h::TX_ERROR" ref="ga2e7d012000ed9e784d32859d10c103f6" args="(msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_ERROR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">msg</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит развернутое диагностическое сообщение. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>Сообщение с произвольным количеством параметров в стиле функции <code>printf()</code>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Этот макрос может распечатывать стек вызовов функций в консоли. По этому поводу см. замечания к функции <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a> и раздел <a class="el" href="main.htm#TXLibSetup">Установка библиотеки</a>, п.4.</dd></dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Всегда false.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a>, <a class="el" href="a00080.htm#gaaff3c8e496327bec13a821061787878f" title="Синоним макроса _ (символ подчеркивания)">TX_COMMA</a>, assert(), <a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>, <a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify()</a>, <a class="el" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a" title="For compatibility with assert macro.">verified</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Не смог прочитать &#39;Войну и мир&#39;. Отмазка %d: не нашел &#39;%s&#39;&quot;</span>, reasonNum, fileName);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04907">4907</a></p>

</div>
</div>
<a class="anchor" id="gabe7d5b7083c7588b457f73c1e0461044"></a><!-- doxytag: member="TXLib.h::TX_DEBUG_ERROR" ref="gabe7d5b7083c7588b457f73c1e0461044" args="(...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_DEBUG_ERROR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит развернутое диагностическое сообщение в отладочном режиме. </p>
<p>Описание см. в TX_ERROR.</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd>В режиме Release этот макрос не выводит ничего.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a>, <a class="el" href="a00080.htm#gaaff3c8e496327bec13a821061787878f" title="Синоним макроса _ (символ подчеркивания)">TX_COMMA</a>, assert(), <a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>, <a class="el" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify()</a>, <a class="el" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a" title="For compatibility with assert macro.">verified</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Так и не смог прочитать &#39;Войну и мир&#39;. Отмазка %d: потерял &#39;%s&#39;&quot;</span>, reasonNum, fileName);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04933">4933</a></p>

</div>
</div>
<a class="anchor" id="gae1f5bb8bcc99e21ed8dc46493027b267"></a><!-- doxytag: member="TXLib.h::txStackBackTrace" ref="gae1f5bb8bcc99e21ed8dc46493027b267" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define txStackBackTrace</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Распечатывает текущий стек вызовов функций в консоли. </p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Для корректной работы этой функкции требуются модули, которые нужно установить (скопировать) в папку Windows. См. раздел <a class="el" href="main.htm#TXLibSetup">Установка библиотеки</a>, п.4.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Для наиболее корректной работы этой функции полностью отключайте оптимизацию при компиляции. Например, для компилятора GCC <code>g++</code> -- с помощью ключа командной строки <code>-O0</code>. Разные среды программирования позволяют задать эти ключи по-разному, например, в CodeBlocks через Главное меню -- Settings -- Compiler -- (Global Compiler Settings) -- (Compiler Settings) -- Other Options.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f" title="Распечатывает дамп области памяти в консоли.">txDump()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">void</span> Recursion()  <span class="comment">// http://google.ru/search?q=%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F</span>
              {
              <a class="code" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace</a>();

              printf (<span class="stringliteral">&quot;Press any key...\n&quot;</span>);
              _getch();

              Recursion();
              }
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l05006">5006</a></p>

</div>
</div>
<a class="anchor" id="gae4dfd7b0d66121016d6466d2ff10e8ba"></a><!-- doxytag: member="TXLib.h::_" ref="gae4dfd7b0d66121016d6466d2ff10e8ba" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define _</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос. </p>
<dl class="note"><dt><b>Заметки:</b></dt><dd><b>Символ подчеркивания и символ TX_COMMA просто переопределяются в запятую.</b></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Слишком умный абзац: роман &#39;Война и мир&#39;, файл &#39;%s&#39;, строка %d&quot;</span> <a class="code" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> fileName <a class="code" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> lineNum);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l05086">5086</a></p>

</div>
</div>
<a class="anchor" id="gafdd807831b131ba38d5856b6ee4e8287"></a><!-- doxytag: member="TXLib.h::txGDI" ref="gafdd807831b131ba38d5856b6ee4e8287" args="(command, dc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define txGDI</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">command, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">dc&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">command</td><td>Функция GDI (возможно, возвращающая значение). </td></tr>
    <tr><td class="paramname">dc</td><td>Дескриптор контекста рисования (холста), использующийся в вызове функции GDI (см. параметр <code>command</code>).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Значение, возвращаемое вызываемой функцией GDI.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Если параметр dc соответствует основному холсту TXLib (совпадает с возвращаемым значением <a class="el" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC()</a>), то на время выполнения функции GDI поток, обновляющий окно TXLib, блокируется. <br/>
</dd>
<dd>
Если в вызове функции GDI используются запятые, то используйте двойные скобки, чтобы получился один параметр, так как <a class="el" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI()</a> это все же макрос.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC()</a>, <a class="el" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory()</a>, <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a>, <a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (( Rectangle (<a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>(), x1, y1, x2, y2) ));  <span class="comment">// Не забудьте про две ((ДВЕ)) скобки</span>
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l05259">5259</a></p>

</div>
</div>
<a class="anchor" id="gaf6ea524e3c76ba5c8a0d1fa6b81d55b8"></a><!-- doxytag: member="TXLib.h::TX_BEGIN_MESSAGE_MAP" ref="gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_BEGIN_MESSAGE_MAP</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Заголовок карты сообщений (Message Map). </p>
<dl class="user"><dt><b>Раскрывается в</b></dt><dd><div class="fragment"><pre class="fragment">          <span class="keyword">virtual</span> <span class="keywordtype">int</span> dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam)<span class="keyword"> override</span>
<span class="keyword">              </span>{
              <span class="keywordtype">int</span> _result = <a class="code" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc</a> (_wnd, _msg, _wParam, _lParam);

              <span class="keywordflow">switch</span> (_msg)
                  {
</pre></div></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP()</a>, <a class="el" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>, <a class="el" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE()</a>, <a class="el" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>, <a class="el" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc()</a>, <a class="el" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          Cм. реализацию функции <a class="code" href="a00083.htm#gaab464722960a885cce94b655c87590fc" title="Ввод строки в отдельном окне.">txInputBox</a>().
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l06379">6379</a></p>

</div>
</div>
<a class="anchor" id="gadbe2f17002d8d41056e9770066ef558b"></a><!-- doxytag: member="TXLib.h::TX_HANDLE" ref="gadbe2f17002d8d41056e9770066ef558b" args="(id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_HANDLE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">id</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Заголовок обработчика сообщения (Message handler) карты сообщений. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>Идентификатор сообщения.</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Раскрывается в</b></dt><dd><div class="fragment"><pre class="fragment">                  <span class="keywordflow">break</span>;
                  <span class="keywordflow">case</span> (<span class="keywordtype">id</span>):
</pre></div></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP()</a>, <a class="el" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>, <a class="el" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE()</a>, <a class="el" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>, <a class="el" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc()</a>, <a class="el" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          Cм. реализацию функции <a class="code" href="a00083.htm#gaab464722960a885cce94b655c87590fc" title="Ввод строки в отдельном окне.">txInputBox</a>().
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l06409">6409</a></p>

</div>
</div>
<a class="anchor" id="ga3637c3398b6ebfa337171beec0770fe4"></a><!-- doxytag: member="TXLib.h::TX_COMMAND_MAP" ref="ga3637c3398b6ebfa337171beec0770fe4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_COMMAND_MAP</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Начало карты команд (Command map) в карте сообщений. </p>
<dl class="user"><dt><b>Раскрывается в</b></dt><dd><div class="fragment"><pre class="fragment">                  }  <span class="comment">// Конец switch (_msg)</span>

              <span class="keywordflow">if</span> (_msg == WM_COMMAND)
                  <span class="keywordflow">switch</span> (LOWORD (_wParam))
                      {
</pre></div></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP()</a>, <a class="el" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>, <a class="el" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE()</a>, <a class="el" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>, <a class="el" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc()</a>, <a class="el" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          Cм. реализацию функции <a class="code" href="a00083.htm#gaab464722960a885cce94b655c87590fc" title="Ввод строки в отдельном окне.">txInputBox</a>().
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l06435">6435</a></p>

</div>
</div>
<a class="anchor" id="ga3f4a70a0e5076cb4f4addcab0ca760cd"></a><!-- doxytag: member="TXLib.h::TX_END_MESSAGE_MAP" ref="ga3f4a70a0e5076cb4f4addcab0ca760cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TX_END_MESSAGE_MAP</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Завершитель карты сообщений. </p>
<dl class="user"><dt><b>Раскрывается в</b></dt><dd><div class="fragment"><pre class="fragment">                  }  <span class="comment">// Конец switch (_msg) или switch (LOWORD (_wParam))</span>

              <span class="keywordflow">return</span> FALSE;
              }
</pre></div></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP()</a>, <a class="el" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>, <a class="el" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE()</a>, <a class="el" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>, <a class="el" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc()</a>, <a class="el" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          Cм. реализацию функции <a class="code" href="a00083.htm#gaab464722960a885cce94b655c87590fc" title="Ввод строки в отдельном окне.">txInputBox</a>().
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l06464">6464</a></p>

</div>
</div>
<a class="anchor" id="gaaa5d2cd4ba134312dcaca4e8316bbe9e"></a><!-- doxytag: member="TXLib.h::__TX_DEBUG_MACROS" ref="gaaa5d2cd4ba134312dcaca4e8316bbe9e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define __TX_DEBUG_MACROS&#160;&#160;&#160;(&quot;Группа отладочных $-макросов&quot;)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Отладочная печать переменной во время вычисления выражения или участка кода во время его выполнения. </p>
<p>Сделай приятными твои <em>круглые сутки</em> отладки!</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эти макросы могут измениться в будущих версиях. <small>&#160;</small><span class="s"> Чтобы вам повеселее жилось. </span><small>&#160;</small></dd></dl>
<dl>
<dt>Назначение: </dt>
<dd><table  border="0">
<tr valign="top">
<td><code> $ (var, [name]) </code> &#160;&#160;</td><td>Печать имени и значения переменной или выражения <code>var</code>. <em>[name] &ndash; необязательное примечание.</em> </td></tr>
<tr valign="top">
<td><code> $_(var,  [name]) </code> &#160;&#160;</td><td>То же, что и <code>,</code> но без новой строки. <em>[name] &ndash; необязательное примечание.</em> <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $x (var, [name]) </code> &#160;&#160;</td><td>Печать имени и значения переменной или выражения <code>var</code> в 16-ричной системе счисления. <em>[name] &ndash; необязательное примечание.</em> </td></tr>
<tr valign="top">
<td><code> $x_(var, [name]) </code> &#160;&#160;</td><td>То же, что и <code>$x(var),</code> но без новой строки. <em>[name] &ndash; необязательное примечание.</em> <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $v (var, cond, [name]) </code> &#160;&#160;</td><td>То же, что и <code>,</code> но различным цветом в зависимости от условия <code>cond</code>. <em>[name] &ndash; необязательное примечание.</em> </td></tr>
<tr valign="top">
<td><code> $v_(var, cond, [name]) </code> &#160;&#160;</td><td>То же, что и <code>$v(var),</code> но без новой строки. <em>[name] &ndash; необязательное примечание.</em> <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $do(code) </code> &#160;&#160;</td><td>Печать строки кода, затем выполнение этого кода. </td></tr>
<tr valign="top">
<td><code> $DO(code) </code> &#160;&#160;</td><td>То же, что и <code>$do(code),</code> но с паузой (нажмите любую клавишу). </td></tr>
<tr valign="top">
<td><code> $Do(code) </code> &#160;&#160;</td><td>То же, что и <code>$do(code),</code> но с паузой (txMessageBox). <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $$$ (expr) </code> &#160;&#160;</td><td>Печать выражения, его вычисление, печать и возврат значения. <br/>
 Если выражение содержит оператор "запятая", не взятый в скобки, необходимо окружать expr еще одной парой скобок. </td></tr>
<tr valign="top">
<td><code> $$$_(expr) </code> &#160;&#160;</td><td>То же, что и <code>$$,</code> но вторая печать идет без новой строки. <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $$$$ (code) </code> &#160;&#160;</td><td>То же, что и <code>$$,</code> но для операторов или блоков кода (без возврата значения). </td></tr>
<tr valign="top">
<td><code> $$$$_(code) </code> &#160;&#160;</td><td>То же, что и <code>$$$,</code> но вторая печать идет без новой строки. <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $$ </code> &#160;&#160;</td><td>Печать местоположения в коде. </td></tr>
<tr valign="top">
<td><code> $$_ </code> &#160;&#160;</td><td>Печать местоположения в коде (только имя функции и номер строки). </td></tr>
<tr valign="top">
<td><code> $meow (msg) </code> &#160;&#160;</td><td>То же, что и $$, но еще и печатает сообщение <code>msg</code>. <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $test (cond) </code> &#160;&#160;</td><td>Печать результата теста различным цветом в зависимости от условия <code>cond</code>. </td></tr>
<tr valign="top">
<td><code> $unittest (code, expected) </code> &#160;&#160;</td><td>Печать результата <b>юнит-теста</b> <code>code</code> с ожидаемым результатом <code>expected</code>. <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code> $n </code> &#160;&#160;</td><td>Перевод строки (печать <code>'\n'</code>). </td></tr>
<tr valign="top">
<td><code> $nn </code> &#160;&#160;</td><td>Пустая строка (печать <code>'\n\n'</code>). </td></tr>
<tr valign="top">
<td><code> $t </code> &#160;&#160;</td><td>Табуляция (печать <code>'\t'</code>). </td></tr>
</table>
</dd>
</dl>
<dl>
<dt>Установка атрибутов символов консоли: </dt>
<dd><table  border="0">
<tr valign="top">
<td><code>$d</code> &#160;&#160;</td><td>Светло-серый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$D</code> &#160;&#160;</td><td>Темно-серый цвет </td></tr>
<tr valign="top">
<td><code>$b</code> &#160;&#160;</td><td>Светло-синий цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$B</code> &#160;&#160;</td><td>Темно-синий цвет </td></tr>
<tr valign="top">
<td><code>$g</code> &#160;&#160;</td><td>Светло-зеленый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$G</code> &#160;&#160;</td><td>Темно-зеленый цвет </td></tr>
<tr valign="top">
<td><code>$c</code> &#160;&#160;</td><td>Светло-бирюзовый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$C</code> &#160;&#160;</td><td>Темно-бирюзовый цвет </td></tr>
<tr valign="top">
<td><code>$r</code> &#160;&#160;</td><td>Светло-красный цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$R</code> &#160;&#160;</td><td>Темно-красный цвет </td></tr>
<tr valign="top">
<td><code>$m</code> &#160;&#160;</td><td>Светло-малиновый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$M</code> &#160;&#160;</td><td>Темно-малиновый цвет </td></tr>
<tr valign="top">
<td><code>$y</code> &#160;&#160;</td><td>Желтый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$Y</code> &#160;&#160;</td><td>Темно-желтый цвет </td></tr>
<tr valign="top">
<td><code>$h</code> &#160;&#160;</td><td>Белый цвет &#160;&#160;</td><td>&#160;&#160;</td><td><code>$H</code> &#160;&#160;</td><td>Прозрачный цвет </td></tr>
</table>
</dd>
</dl>
<dl>
<dt></dt>
<dd><table  border="0">
<tr valign="top">
<td><code>$o</code> &#160;&#160;</td><td>OK &#160;&#160;</td><td>Светло-зеленый на зеленом &#160;&#160;</td><td>&#160;&#160;</td><td><code>$O</code> &#160;&#160;</td><td>OK bold &#160;&#160;</td><td>Желтый на зеленом &#160;&#160;</td><td></td></tr>
<tr valign="top">
<td><code>$i</code> &#160;&#160;</td><td>Information &#160;&#160;</td><td>Светло-синий на синем &#160;&#160;</td><td>&#160;&#160;</td><td><code>$I</code> &#160;&#160;</td><td>Information bold &#160;&#160;</td><td>Желтый на синем &#160;&#160;</td><td></td></tr>
<tr valign="top">
<td><code>$w</code> &#160;&#160;</td><td>Warning &#160;&#160;</td><td>Светло-малиновый на малиновом &#160;&#160;</td><td>&#160;&#160;</td><td><code>$W</code> &#160;&#160;</td><td>Warning bold &#160;&#160;</td><td>Желтый на малиновом &#160;&#160;</td><td></td></tr>
<tr valign="top">
<td><code>$e</code> &#160;&#160;</td><td>Error &#160;&#160;</td><td>Светло-красный на красном &#160;&#160;</td><td>&#160;&#160;</td><td><code>$E</code> &#160;&#160;</td><td>Error bold &#160;&#160;</td><td>Желтый на красном &#160;&#160;</td><td></td></tr>
<tr valign="top">
<td><code>$f</code> &#160;&#160;</td><td>Fatal &#160;&#160;</td><td>Черный на светло-красном &#160;&#160;</td><td>&#160;&#160;</td><td><code>$F</code> &#160;&#160;</td><td>Fatal bold &#160;&#160;</td><td>Малиновый на светло-красном &#160;&#160;</td><td></td></tr>
<tr valign="top">
<td><code>$l</code> &#160;&#160;</td><td>Location &#160;&#160;</td><td>Черный на темно-сером &#160;&#160;</td><td>&#160;&#160;</td><td><code>$L</code> &#160;&#160;</td><td>Location bold &#160;&#160;</td><td>Светло-серый на темно-сером &#160;&#160;</td><td></td></tr>
</table>
</dd>
</dl>
<dl>
<dt></dt>
<dd><table  border="0">
<tr valign="top">
<td><code>$T</code> (cond) &#160;&#160;</td><td>Светло-зеленый <b>или</b> светло-красный, в зависимости от условия <code>cond</code>. </td></tr>
</table>
</dd>
</dl>
<dl>
<dt></dt>
<dd><table  border="0">
<tr valign="top">
<td><code>$s</code> &#160;&#160;</td><td>Запомнить атрибуты. При выходе из <code>{</code> блока кода <code>}</code> атрибуты восстанавливаются. </td></tr>
<tr valign="top">
<td><code>$s*</code> &#160;&#160;</td><td>Запомнить атрибуты и установить цвет (замените звездочку кодом цвета, см. выше). Пример: <code>$sg</code> - запомнить атрибуты и установить светло-зеленый цвет. </td></tr>
</table>
</dd>
</dl>
<p><b>Что такое юнит-тест?</b> А вот что: <a href="http://google.com/search?q=Юнит-тестирование+C%2B%2B">www.google.com/search?q=Юнит-тестирование+C++.</a> <b>Это когда ошибки ищутся сами.</b></p>
<dl class="see"><dt><b>См. также:</b></dt><dd>assert(), <a class="el" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>, <a class="el" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312" title="Макрос, раскрывающийся в имя файла и номер строки файла, где он встретился.">__TX_FILELINE__</a>, <a class="el" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a></dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Есть еще другие (недокументированные) подобные макросы. Загляните в исходный текст <a class="el" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>, ищите __TX_DEBUG_MACROS и см. ниже.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          $g  <span class="comment">// green</span>
          <span class="keywordtype">int</span> x = 5;
          <span class="keywordtype">int</span> y = $(x) + 1;
          $(  x = $(y) + 2 );

          <span class="keywordtype">int</span> xx[] = { 10, 20, 30 };
          $(xx);

          $r  <span class="comment">// red</span>
          <span class="keywordtype">double</span> xy = $( pow (x, y) );

          $meow (<span class="stringliteral">&quot;Computing hypothenuse...&quot;</span>)
          double h  = $$$(( $(x) = x*x, y = y*y, sqrt ($(x+y)) ));

          $$ $$P;
          $$$( <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 600) );

          $d  <span class="comment">// default color</span>
          $$$$( if ($(xy) &lt; $(h)) { $sE <span class="keywordflow">return</span> $(h); } );  <span class="comment">// Save color, print h in error color, restore color</span>

          $T (h &lt;  10); $(h);  <span class="comment">// Print h again, but in success color (h &lt; 10)...</span>
          $T (h &lt;= 10); $(h);  <span class="comment">// ...or error color (otherwize)</span>
          $n                   <span class="comment">// New line</span>

          $Do (<span class="keywordtype">bool</span> isPositive = (h &gt; 0));
          $test (isPositive); $n                          <span class="comment">// Print a test result</span>

<span class="preprocessor">          #ifndef _MSC_VER</span>
<span class="preprocessor"></span>          <span class="keywordtype">bool</span> ok = ( $unittest (strlen (<span class="stringliteral">&quot;abc&quot;</span>), 3) );    <span class="comment">// Checks in unit-test style, thanks GCC</span>
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>
          $unittest (strlen (<span class="stringliteral">&quot;abc&quot;</span>), 3);                  <span class="comment">// Checks in unit-test style, Microsoft compatible way.</span>
                                                          <span class="comment">// No return result from $unittest here, sorry (:</span>
          $$ $$p;
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l15085">15085</a></p>

</div>
</div>
<hr/><h2>Функции</h2>
<a class="anchor" id="gab73db78e05652eca05c7efd4768e98ef"></a><!-- doxytag: member="TXWave.h::operator new" ref="gab73db78e05652eca05c7efd4768e98ef" args="(size_t size, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выделяет блок динамической памяти через new с обнулением его содержимого перед вызовом конструктора. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Размер элемента/элементов</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Выделенная память</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">int</span>* i = <span class="keyword">new</span>(0) <span class="keywordtype">int</span>;
          ...
          <span class="keyword">delete</span> i;
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00061_source.htm">TXWave.h</a> строка <a class="el" href="a00061_source.htm#l00484">484</a></p>

</div>
</div>
<a class="anchor" id="gab6432a66009d36b85175c7720a78b1cc"></a><!-- doxytag: member="TXWave.h::operator new" ref="gab6432a66009d36b85175c7720a78b1cc" args="(size_t size, size_t items, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>items</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выделяет блок динамической памяти через new[] с обнулением содержимого перед вызовом конструкторов. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Размер элементов </td></tr>
    <tr><td class="paramname">items</td><td>Количество элементов массива</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Выделенная память</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">char</span>* str = <span class="keyword">new</span>(0) <span class="keywordtype">char</span> [100];
          ...
          <span class="keyword">delete</span>[] str;
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00061_source.htm">TXWave.h</a> строка <a class="el" href="a00061_source.htm#l00503">503</a></p>

</div>
</div>
<a class="anchor" id="gaff3d9c60900531f438a19216485bdd41"></a><!-- doxytag: member="TXLib.h::txUpdateWindow" ref="gaff3d9c60900531f438a19216485bdd41" args="(int update=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txUpdateWindow </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>update</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Разрешает или запрещает автоматическое обновление изображения в окне. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">update</td><td><em>Режим обновления (true -- разрешить, false -- запретить). Необязателен. Если не указан, то "разрешить".</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Предыдущее состояние режима обновления.</dd></dl>
<p>В отличие от <a class="el" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin()</a> и <a class="el" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd()</a>, которые поддерживают вложенные вызовы и работают как "скобки для
          замерзания картинки", <a class="el" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow()</a> позволяет явно установить или снять блокировку автоматического обновления экрана.</p>
<p>Более полную информацию об автоматическом обновлении см. в функции <a class="el" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin()</a>. См. также <a class="el" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd()</a>, <a class="el" href="a00081.htm#gadc7fd9cdc8c007693db7b6d7de794709" title="Обновляет изображение в окне TXLib вручную.">txRedrawWindow()</a>, <a class="el" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep()</a>.</p>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin()</a>, <a class="el" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd()</a>, <a class="el" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep()</a>, <a class="el" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow()</a>, <a class="el" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC()</a>, <a class="el" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory()</a>, <a class="el" href="a00081.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor()</a>, <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a>, <a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock()</a>, <a class="el" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">false</span>);
          ...
          <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a>();
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabc64e03f4ca966e76bc714bbe8173761"></a><!-- doxytag: member="TXLib.h::txSelectObject" ref="gabc64e03f4ca966e76bc714bbe8173761" args="(HGDIOBJ obj, HDC dc=txDC())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txSelectObject </td>
          <td>(</td>
          <td class="paramtype">HGDIOBJ&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HDC&#160;</td>
          <td class="paramname"><em>dc</em> = <code>txDC()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Устанавливает текущий активный объект GDI. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">obj</td><td>Дескриптор объекта GDI. </td></tr>
    <tr><td class="paramname">dc</td><td><em>Холст (контекст рисования), в котором устанавливается текущий активный объект GDI. Необязателен.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Если операция была успешна -- true, иначе -- false.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Предыдущий выбранный объект того же типа (PEN/BRUSH/BITMAP и т.п.), как и <code>obj</code>, <b>уничтожается</b>.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor()</a>, <a class="el" href="a00081.htm#gab6462db4dbcca4915d460036c6c8896d" title="Возвращает текущий цвет линий и текста.">txGetColor()</a>, <a class="el" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor()</a>, <a class="el" href="a00081.htm#ga4d83b7e2d67f422cf703e15f2d7c4dfa" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor()</a>, <a class="el" href="a00081.htm#ga3e94cfad3d9080241f84129d6e5c09b5" title="Названия предопределенных цветов.">txColors</a>, <a class="el" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB()</a>, <a class="el" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          HPEN pen = CreatePen (PS_DASH, 1, <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128, 0));
          <a class="code" href="a00081.htm#gabc64e03f4ca966e76bc714bbe8173761" title="Устанавливает текущий активный объект GDI.">txSelectObject</a> (pen);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga93cecf6b117fc403c0488f388b78a6d1"></a><!-- doxytag: member="TXLib.h::txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture" ref="ga93cecf6b117fc403c0488f388b78a6d1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Делает нечто иногда удобное. См. название функции. </p>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Если операция была успешна -- true, иначе -- false.</dd></dl>
<p>У этой функции есть синоним с простым понятным названием, поищите его в файле библиотеки, около <em>определения</em> этой функции. Или можно <small>&#160;</small><span class="s"> скопировать </span><small>&#160;</small> набрать это километровое имя и посмотреть, что получится.</p>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow()</a>, <a class="el" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">int</span> main()
              {
              <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 600);

              <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (TA_CENTER);
              <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (<a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a>()/2, <a class="code" href="a00081.htm#gaa9bb7fd84e0b9f59c96be89d70c74321" title="Возвращает высоту окна или холста.">txGetExtentY</a>()/2, <span class="stringliteral">&quot;Press any key to exit!&quot;</span>);
</pre></div> <div class="fragment"><pre class="fragment"> <a class="code" href="a00081.htm#ga93cecf6b117fc403c0488f388b78a6d1" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a>();
              <span class="keywordflow">return</span> 0;
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga177f8bcb7544821ea4b5bd0571fe7196"></a><!-- doxytag: member="TXLib.h::txPlaySound" ref="ga177f8bcb7544821ea4b5bd0571fe7196" args="(const char filename[]=NULL, DWORD mode=SND_ASYNC)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txPlaySound </td>
          <td>(</td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>filename</em>[] = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD&#160;</td>
          <td class="paramname"><em>mode</em> = <code>SND_ASYNC</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Воспроизводит звуковой файл. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Имя звукового файла, включая расширение. <em>Если не указано или NULL, то останавливает звук.</em> </td></tr>
    <tr><td class="paramname">mode</td><td><em>Режим воспроизведения. Необязательно. Если не указан, то SND_ASYNC (см. ниже).</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Если операция была успешна -- true, иначе -- false.</dd></dl>
<dl>
<dt>Режимы воспроизведения: </dt>
<dd><table  border="0">
<tr valign="top">
<td><code>SND_ASYNC</code> &#160;&#160;</td><td>Звук проигрывается одновременно с работой программы. <br/>
 Чтобы отменить звучание, вызовите txPlaySound (NULL). </td></tr>
<tr valign="top">
<td><code>SND_SYNC</code> &#160;&#160;</td><td>Выполнение программы приостанавливается до окончания воспроизведения звука. </td></tr>
<tr valign="top">
<td><code>SND_LOOP</code> &#160;&#160;</td><td>Зацикливать звук при воспроизведении. <br/>
 Чтобы отменить звучание, вызовите txPlaySound (NULL). <br/>
 </td></tr>
<tr valign="top">
<td></td></tr>
<tr valign="top">
<td><code>SND_NODEFAULT</code> &#160;&#160;</td><td>Не использовать звук по умолчанию, если нельзя проиграть указанный звуковой файл. </td></tr>
<tr valign="top">
<td><code>SND_NOSTOP</code> &#160;&#160;</td><td>Если какой-либо звук уже проигрывается, <b>не</b> останавливать его для запуска указанного звука. </td></tr>
<tr valign="top">
<td><code>SND_APPLICATION</code> &#160;&#160;</td><td>Проигрывать звук, используя программу, зарегистрированную для данного типа звуковых файлов. </td></tr>
</table>
</dd>
</dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Поддерживаются только файлы в формате WAV. Остальные форматы (MP3 и др.) надо перекодировать в WAV. Переименование со сменой расширения не поможет, как и в случае с форматом картинок в <a class="el" href="a00081.htm#gaec4970aac125bcf0d8a0b10a118222f7" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage()</a>.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a>, <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="stringliteral">&quot;tada.wav&quot;</span>);  <span class="comment">// So happy that this always exists</span>
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3d4731dd56b60635c80bc662c295c821"></a><!-- doxytag: member="TXLib.h::txPlayVideo" ref="ga3d4731dd56b60635c80bc662c295c821" args="(int x, int y, int width, int height, const char fileName[], double zoom=0, double gain=1, HWND wnd=txWindow())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">intptr_t txPlayVideo </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>fileName</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>zoom</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HWND&#160;</td>
          <td class="paramname"><em>wnd</em> = <code>txWindow()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Проигрывает видео. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X-координата верхнего левого угла видео. <em>См. предупреждение ниже.</em> </td></tr>
    <tr><td class="paramname">y</td><td>Y-координата верхнего левого угла видео. <em>См. предупреждение ниже.</em> </td></tr>
    <tr><td class="paramname">width</td><td>Ширина видео. Если 0, то равно ширине окна. <em>Также см. предупреждение ниже.</em> </td></tr>
    <tr><td class="paramname">height</td><td>Высота видео. Если 0, то равно высоте окна. <em>Также см. предупреждение ниже.</em> </td></tr>
    <tr><td class="paramname">fileName</td><td>Имя видеофайла (включая расширение) или любого другого источника, с которым работает VideoLAN (rtsp://, <a href="http://">http://</a> и т.д.). Если имя -- пустая строка <code></code>(""), то проводится только проверка на наличие видеопроигрывателя. </td></tr>
    <tr><td class="paramname">zoom</td><td><em>Масштаб изображения. Необязателен. Если не указан, то равен 0 (Автомасштабирование).</em> </td></tr>
    <tr><td class="paramname">gain</td><td><em>Громкость звука, от 0 до 8 (800%). Необязательна. Если не указана, то равна 1 (100%).</em> </td></tr>
    <tr><td class="paramname">wnd</td><td><em>Окно, в котором воспроизводится видео. Необязательно. Если не указано, то используется окно TXLib.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Время воспроизведения в миллисекундах (если не указана опция <code>\a</code>). Если меньше или равно 0, то видео не запустилось. :( См. коды ошибок ниже. <br/>
<br/>
 Если указана опция <code>\a</code>, то возвращаемое значение -- дескриптор (HWND) окна видеопотока (см. "Асинхронное воспроизведение").</dd></dl>
<dl>
<dt>Возвращаемые значения в случае ошибки: </dt>
<dd><table  border="0">
<tr valign="top">
<td><code>INT_MIN</code> &#160;&#160;</td><td>Не найден видеопроигрыватель. </td></tr>
<tr valign="top">
<td><code>INT_MIN+1</code> &#160;&#160;</td><td>Не найден видеофайл. </td></tr>
<tr valign="top">
<td><code>INT_MIN+2</code> &#160;&#160;</td><td>Внутренняя ошибка регистрации класса окна видеопотока. </td></tr>
<tr valign="top">
<td><code>INT_MIN+3</code> &#160;&#160;</td><td>Внутренняя ошибка создания окна видеопотока. </td></tr>
<tr valign="top">
<td><code>INT_MIN+4</code> &#160;&#160;</td><td>Внутренняя ошибка запуска VideoLAN. </td></tr>
<tr valign="top">
<td>Другие отрицательные значения &#160;&#160;</td><td>Код завершения процесса VideoLAN с обратным знаком. </td></tr>
</table>
</dd>
</dl>
<dl class="user"><dt><b>Асинхронное воспроизведение видео</b></dt><dd><br/>
 Если в параметре <code>fileName</code> самым первым символом поставить символ <code>\a</code>, то файл будет воспроизводиться асинхронно: <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a> возвратится сразу после вызова, а воспроизведение видео пойдет параллельно с работой программы. Само имя файла на диске менять <b>не надо.</b> Воспроизведение завершится, когда закончится видеофайл, или когда будет закрыто окно TXLib. См. пример использования. <br/>
<br/>
 Без этой опции <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a> делает паузу в программе, ожидая конца воспроизведения, и только потом возвращается. <br/>
<br/>
 В случае асинхронного воспрооизведения возвращаемым значением функции <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a> будет не время ее работы, а дескриптор окна видеопотока (HWND). С его помощью можно контролировать это окно, его положение на экране, размеры, видимость и другие свойства. См. функции <a href="https://www.google.com/search?q=MoveWindow+function+Win32+apps">MoveWindow</a>(), <a href="https://www.google.com/search?q=ShowWindow+function+Win32+apps">ShowWindow</a>() и многие другие в MSDN. Гуглите. Также см. пример использования. <br/>
<br/>
 Досрочно прервать асинхронное воспроизведение можно, уничтожив окно видеопотока с помощью функции <a class="el" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow()</a>. <br/>
<br/>
 Принудительно завершить асинхронное воспроизведение <b>всех</b> видео можно, сделав вызов <code>txPlayVideo (NULL).</code></dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Если в последнем параметре <code></code>(wnd) указано <b>не</b> окно TXLib, а какое-либо другое, то координаты видео <code>x</code>, <code>y</code> и его размеры <code>width</code>, <code>height</code> игнорируются. В этом слчае видеопоток будет занимать всю клиентскую область окна, указанного параметром <code>wnd</code>. См. пример использования.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd><b>Воспроизведение видео требует установки внешней программы <code>VideoLAN</code> <code></code>(vlc.exe) версии 3.0 или новее.</b> Ее можно скачать с официального сайта <a href="http://videolan.org"><b>VideoLAN.org</b></a>. Без установки <code>VideoLAN</code> видео воспроизводиться не будет и выведется сообщение об ошибке. <br/>
<br/>
 <b>Если после установки VideoLAN программа <code></code>(vlc.exe) все равно не найдена</b> и выводится сообщение об этой ошибке, то установите <b>не 64-битную</b> версию VideoLAN, <b>а 32-битную <code></code>(x86).</b></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a href="https://www.youtube.com/watch?v=z_AbfPXTKms"><b>Кот Мару!</b></a>, <a class="el" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound()</a>, <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="comment">// Кот Мару, 24 000 000+ просмотров. А ты чего добился в жизни? :)</span>

<span class="preprocessor">          #define MARU_ON_YOUTUBE &quot;http://ded32.net.ru/www.youtube.com-watch-z_AbfPXTKms&quot;</span>
<span class="preprocessor"></span>                                        <span class="comment">// Cached from www.youtube.com/watch/z_AbfPXTKms</span>
          <span class="keywordtype">int</span> main()                    <span class="comment">// Because Google prevents direct playing from Youtube</span>
              {
              <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 500);
              <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>);
              <a class="code" href="a00081.htm#ga78e83baeb6a02d5fa33dd8b062e513d9" title="Стирает холст текущим цветом заполнения.">txClear</a>();

              <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (0, 0, <a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a>(), <a class="code" href="a00081.htm#gaa9bb7fd84e0b9f59c96be89d70c74321" title="Возвращает высоту окна или холста.">txGetExtentY</a>(), <span class="stringliteral">&quot;Press ESC to stop!&quot;</span>);
              <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a>();

              <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="stringliteral">&quot;&quot;</span>) &lt;= 0) <span class="keywordflow">return</span> <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;А чего вы хотели? VideoLAN не найден...&quot;</span>), 1;

              <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="stringliteral">&quot;\a&quot;</span> MARU_ON_YOUTUBE);

              <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (580, 330, 200, 150, MARU_ON_YOUTUBE, 0, 0);

              <span class="comment">// Для тех, кто [добился] дождался...</span>

              system (<span class="stringliteral">&quot;cmd.exe /c start /min notepad.exe&quot;</span>);
              <span class="keywordtype">double</span> dt = 0.04 / (<a class="code" href="a00081.htm#ga49983bddca35d531c521cf04c6c2449f" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>() + 1);

              HWND notepad = FindWindow (<span class="stringliteral">&quot;Notepad&quot;</span>, NULL);
              <span class="keywordflow">if</span> (!notepad) <span class="keywordflow">return</span> 1;

              <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="stringliteral">&quot;\a&quot;</span> MARU_ON_YOUTUBE, 0, 1, notepad);

              HWND wnd = (HWND) <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (0, 330, 200, 150, <span class="stringliteral">&quot;\a&quot;</span> MARU_ON_YOUTUBE, 0, 0);

              <span class="keywordflow">for</span> (<span class="keywordtype">double</span> t = 0; !GetAsyncKeyState (VK_ESCAPE); t += dt)
                  {
                  <span class="keyword">static</span> <span class="keyword">const</span> POINT cent = { GetSystemMetrics (SM_CXSCREEN) / 2, GetSystemMetrics (SM_CYSCREEN) / 2 };
                  <span class="keyword">static</span> <span class="keyword">const</span> POINT size = { 500, 400 };

                  MoveWindow (notepad, cent.x + <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (cent.y/2 * cos (t)) - size.x/2,
                                       cent.y - <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (cent.y/2 * sin (t)) - size.y/2, size.x, size.y, <span class="keyword">false</span>);

                  ShowWindow (notepad, SW_RESTORE);

                  MoveWindow (wnd, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (t*100) % 1000 - 200, 330, 200, 150, <span class="keyword">false</span>);

                  Sleep (20);
                  }
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf5a6626fa2606a7f374fcc077fc92363"></a><!-- doxytag: member="TXLib.h::txPlayVideo" ref="gaf5a6626fa2606a7f374fcc077fc92363" args="(const char fileName[], double zoom=0, double gain=1, HWND wnd=txWindow())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">intptr_t txPlayVideo </td>
          <td>(</td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>fileName</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>zoom</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HWND&#160;</td>
          <td class="paramname"><em>wnd</em> = <code>txWindow()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Проигрывает видео. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">fileName</td><td>Имя видеофайла (включая расширение) или любого другого источника, с которым работает VideoLAN (rtsp://, <a href="http://">http://</a> и т.д.). Если имя -- пустая строка <code></code>(""), то проводится проверка на наличие видеопроигрывателя. </td></tr>
    <tr><td class="paramname">zoom</td><td><em>Масштаб изображения. Необязателен. Если не указан, то равен 0 (Автомасштабирование).</em> </td></tr>
    <tr><td class="paramname">gain</td><td><em>Громкость звука, от 0 до 8 (800%). Необязательна. Если не указана, то равна 1 (100%).</em> </td></tr>
    <tr><td class="paramname">wnd</td><td><em>Окно, в котором воспроизводится видео. Необязательно. Если не указано, то используется окно TXLib.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>См. в функции <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a> выше.</dd></dl>
<p>См. описание в функции <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a> выше. </p>

</div>
</div>
<a class="anchor" id="gad6db0ee1b36288c7eb3f2196077971f9"></a><!-- doxytag: member="TXLib.h::txSpeak" ref="gad6db0ee1b36288c7eb3f2196077971f9" args="(const char *text,...) tx_printfy(1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txSpeak </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Читает <small>&#160;</small><span class="s"> мысли </span><small>&#160;</small> текст вслух. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">text</td><td>Текст для <small>&#160;</small><span class="s"> внеклассного </span><small>&#160;</small> чтения.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Время чтения текста в миллисекундах (если не указана опция <code>\a</code>). Если -1, то текст не прочитался. :(</dd></dl>
<p>Для использования этой функции укажите перед включением файла <code><a class="el" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a></code> определите имя <code>TX_USE_SPEAK</code> командой <code>#define TX_USE_SPEAK</code> <b>до</b> строки с #include "TXLib.h" для того, чтобы TXLib задействовал библиотеку Microsoft Speech API (SAPI.h). См. пример использования ниже.</p>
<p>Текст читается голосом, установленным по умолчанию в Панели управления Windows. Если голос поддерживает русский язык (начиная с Windows 8.1), то можно использовать русские фразы. До Windows 8.1 они не проговариваются. Если голос читает плохо, то смените его в Панели Управления Windows.</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Если текст начинается с символа <code>\v</code>, то он еще и печатается на экране (сам символ <code>\v</code> не печатается). <br/>
<br/>
</dd>
<dd>
Если текст начинается с символа <code>\a</code>, то он проговаривается асинхронно: <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a> возвращается сразу после вызова, и чтение идет параллельно с работой программы. Без этой опции <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a> делает паузу в программе, ожидая конца чтения, и только потом возвращается. <br/>
<br/>
</dd>
<dd>
Если строка с текстом пустая (не считая <code>\v</code> и <code>\a</code>), то <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a> лучше скажет что-то более важное, чем просто молчание. :)</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Для работы этой функции TXLib требует наличия файла <code>SAPI.h</code> из стандартной библиотеки Windows. Не на всех платформах он есть. Если этот файл не найден, то будет ошибка компиляции. <br/>
<br/>
 Этот файл точно есть в Visual Studio или в этой сборке платформы MinGW: <a href="https://nuwen.net/mingw.html.">https://nuwen.net/mingw.html.</a></dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound()</a>, <a class="el" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment"><span class="preprocessor">          #define  TX_USE_SPEAK</span>
<span class="preprocessor"></span><span class="preprocessor">          #include &quot;<a class="code" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>&quot;</span>

          <span class="keywordtype">int</span> main()
              {
              <a class="code" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &amp;nbsp; мысли &amp;nbsp; текст вслух.">txSpeak</a> (<span class="stringliteral">&quot;TX Library is cool!&quot;</span>);
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf9be7d98f32c0737a2d7f30039a60c0a"></a><!-- doxytag: member="TXLib.h::txMessageBox" ref="gaf9be7d98f32c0737a2d7f30039a60c0a" args="(const char text[]=&quot;Муаххаха! :)&quot;, const char header[]=&quot;TXLib сообщает&quot;, unsigned flags=MB_ICONINFORMATION|MB_OKCANCEL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txMessageBox </td>
          <td>(</td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>text</em>[] = <code>&quot;Муаххаха!&#160;:)&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>header</em>[] = <code>&quot;TXLib&#160;сообщает&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>flags</em> = <code>MB_ICONINFORMATION|MB_OKCANCEL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит сообщение в окне с помощью функции MessageBox. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">text</td><td>Текст сообщения. <em>В принципе, необязательно, но зачем вы тогда меня вызывали?</em> </td></tr>
    <tr><td class="paramname">header</td><td><em>Заголовок сообщения. Необязательно.</em> </td></tr>
    <tr><td class="paramname">flags</td><td><em>Флаги отображения сообщения. Необязательно.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Значение, возвращаемое функцией MessageBox.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Текст не должен превышать _TX_BIGBUFSIZE символов, а заголовок -- _TX_BIGBUFSIZE символов, иначе они обрезаются.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Вместо <code><b>txMessageBox (text, header, flags)</b></code> можно использовать стандартную функцию Win32 <code><b>MessageBox (<a class="el" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow()</a>, text, header, flags)</b></code>. Отличия txMessageBox в том, что она автоматически подставляет окно-родитель, и в том, что при выводе в окно строчки переводятся в формат UNICODE. Это важно лишь в том случае, когда <em>в региональных настройках контрольной панели Windows неверно установлена кодовая страница для программ, не поддерживающих UNICODE.</em> В остальных случаях нужды в <code>txMessageBox</code> нет.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Получилось?&quot;</span>, <span class="stringliteral">&quot;Прочти меня&quot;</span>, MB_YESNO) == IDYES)
              {
              MessageBox (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), <span class="stringliteral">&quot;Хватит и обычного MessageBox()&quot;</span>, <span class="stringliteral">&quot;Win32 сообщает&quot;</span>, 0);
              }
          <span class="keywordflow">else</span>
              <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Спасаем от кракозябл вместо русских букв, без регистрации и СМС.&quot;</span>);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga782025393f08a0efb645b9d2e30f2586"></a><!-- doxytag: member="TXLib.h::txGetAsyncKeyState" ref="ga782025393f08a0efb645b9d2e30f2586" args="(int key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txGetAsyncKeyState </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Проверяет, нажата ли указанная клавиша. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Код (номер) клавиши, как правило, заданный константой (VK_SPACE, VK_LEFT, 'W' и т.п.)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>true, если указанная клавиша нажата, false -- если не нажата.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>В отличие от оригинальной функции GetAsyncKeyState(), возвращает false, если окно TXLib не активно.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">void</span> PlayBall();

          <span class="keywordtype">int</span> main()
              {
              <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 600);

              PlayBall();
              }

          <span class="keywordtype">void</span> PlayBall()
              {
              <span class="keywordtype">int</span> x  = 100, y  = 100;
              <span class="keywordtype">int</span> vx = 5,   vy = 7;
              <span class="keywordtype">int</span> ax = 0,   ay = 1;
              <span class="keywordtype">int</span> dt = 1;

              <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b" title="Светло-зеленый цвет.">TX_LIGHTGREEN</a>);
              <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>);

              <span class="keywordflow">while</span> (!<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_ESCAPE))  <span class="comment">// Погуглите любой код VK_...,</span>
                  {                                    <span class="comment">// и найдете их все</span>
                  <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x, y, 20);

                  vx += ax * dt;                       <span class="comment">// First velocity, then position: this gives more precision</span>
                  vy += ay * dt;                       <span class="comment">// See: http://en.wikipedia.org/wiki/Backward_Euler_method</span>

                   x += vx * dt;
                   y += vy * dt;

                  <span class="keywordflow">if</span> (x &gt; 800) { vx = -vx; x = 800; }  <span class="comment">// = 800 is not the precise solution. Can you make it better?</span>
                  <span class="keywordflow">if</span> (x &lt;   0) { vx = -vx; x =   0; }
                  <span class="keywordflow">if</span> (y &gt; 600) { vy = -vy; y = 600; }
                  <span class="keywordflow">if</span> (y &lt;   0) { vy = -vy; y =   0; }

                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_LEFT))  vx--;
                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_RIGHT)) vx++;
                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_UP))    vy--;
                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_DOWN))  vy++;
                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (VK_SPACE)) vx = vy = 0;
                  <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (<span class="charliteral">&#39;M&#39;</span>))      printf (<span class="stringliteral">&quot;Meow &quot;</span>);

                  <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (20);
                  }
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga03a5e3473a7e7e22764939ebb13f4e63"></a><!-- doxytag: member="TXLib.h::txNotifyIcon" ref="ga03a5e3473a7e7e22764939ebb13f4e63" args="(unsigned flags, const char title[], const char format[],...) tx_printfy(3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txNotifyIcon </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>title</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>format</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит всплывающее сообщение в системном трее. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">flags</td><td>Флаги сообщения. </td></tr>
    <tr><td class="paramname">title</td><td>Заголовок сообщения. </td></tr>
    <tr><td class="paramname">format</td><td>Строка для печати, как в printf().</td></tr>
  </table>
  </dd>
</dl>
<dl>
<dt>Флаги сообщения: </dt>
<dd><table  border="0">
<tr valign="top">
<td><code>NIIF_INFO</code> &#160;&#160;</td><td>Информация </td></tr>
<tr valign="top">
<td><code>NIIF_WARNING</code> &#160;&#160;</td><td>Предупреждение </td></tr>
<tr valign="top">
<td><code>NIIF_ERROR</code> &#160;&#160;</td><td>Сообщение об ошибке </td></tr>
</table>
</dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Удалось ли отобразить сообщение.</dd></dl>
<p>Функция формирует сообщение по правилам printf() и выводит во всплывающем окне.</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd><ul>
<li>Эта функция требует, чтобы при компиляции константа версии Internet Explorer <code></code>(_WIN32_IE) была задана не ниже 0x0500. Для этого надо либо <b>включить <a class="el" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a> вместо <code>windows.h</code> или перед ним.</b> Либо надо самостоятельно определить <code></code>(#define) эту константу. <br/>
 <small>С версией Internet Explorer это связано потому, что при его установке в Windows обновляются многие компоненты (например, <code>shell32.dll</code> и <code>comctl32.dll</code>), которые влияют на функциональность системы независимо от использования браузера). Сам Internet Explorer в отображении сообщения не участвует.</small></li>
<li>Сообщение не должно превышать _TX_BUFSIZE символов, иначе оно обрезается.</li>
</ul>
</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &nbsp; мысли &nbsp; текст вслух.">txSpeak()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">int</span> hours = 3, minutes = 10;
          <span class="keyword">const</span> <span class="keywordtype">char</span> station[] = <span class="stringliteral">&quot;Юму&quot;</span>;
          ...
          <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_INFO, <span class="stringliteral">&quot;Уважаемые пассажиры&quot;</span>,
                        <span class="stringliteral">&quot;Поезд на %s отправляется в %d:%d.&quot;</span>, station, hours, minutes);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga372c7e43cc383da3f8e8e00fc60be91f"></a><!-- doxytag: member="TXLib.h::txOutputDebugPrintf" ref="ga372c7e43cc383da3f8e8e00fc60be91f" args="(const char format[],...) tx_printfy(1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txOutputDebugPrintf </td>
          <td>(</td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>format</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Выводит сообщение в отладчике. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>Строка для печати, как в printf().</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Количество напечатанных символов.</dd></dl>
<p>Функция формирует сообщение по правилам printf() и передает его в OutputDebugString(). Ее вывод можно перехватить отладчиком или утилитами-логгерами, например, <a href="http://technet.microsoft.com/ru-ru/sysinternals/bb896647%28en-us%29.aspx">DbgView</a>. Если этого не сделать, и не задать первый символ <code>'\a'</code> (см. ниже), то о сообщении никто не узнает. :( </p>
<dl class="note"><dt><b>Заметки:</b></dt><dd><ul>
<li>Если первый символ в строке <code>'\a'</code>, то сообщение также дублируется <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>.</li>
<li>Если первый или второй символ в строке <code>'\f'</code>, то сообщение также дублируется printf().</li>
</ul>
</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Сообщение не должно превышать _TX_BIGBUFSIZE символов, иначе оно обрезается.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">int</span> x = 42;
          ...
          <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;Никто не узнает, что %d.\n&quot;</span>, x);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9b529d93a8ebfa5ec2d02fa80819331a"></a><!-- doxytag: member="TXLib.h::txPrintf" ref="ga9b529d93a8ebfa5ec2d02fa80819331a" args="(const char *format, ArgsT...args)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txPrintf </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArgsT...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Добрый дядюшка Принтф. Теперь шаболонный. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>Строка для печати, все как в вашем любимом printf(). </td></tr>
    <tr><td class="paramname">args</td><td>Значения для печати.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Количество напечатанных символов.</dd></dl>
<p>Функция работает аналогично <code>printf()</code>. Однако, в силу применения <small>&#160;</small><span class="s"> сноубордических </span><small>&#160;</small> вариадических шаблонов, она типобезопасна &ndash; сама определяет тип печатаемых аргументов и подставляет нужные символы преобразования типов. Допускается применение универсального символа типа <code>%$</code> (или <code>%</code>?) вместо других символов типов, таких как <code>d, i, c, s, p, g</code> и других.</p>
<p><a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a> позволяет распечатывать типы, не встроенные в язык С++: строки С++ <code></code>(std::string), некоторые типы Win32 (например, <code>POINT</code>) и ваши собственные типы. Для того, чтобы ваши типы могли печататься, надо определить пользовательский оператор вывода в поток STL. Вот, например, как определен оператор вывода для структуры POINT: </p>
<div class="fragment"><pre class="fragment">          std::ostream&amp; operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> POINT&amp; point)
              {
              stream &lt;&lt; <span class="stringliteral">&quot;{ x: &quot;</span> &lt;&lt; point.x &lt;&lt; <span class="stringliteral">&quot;, y: &quot;</span> &lt;&lt; point.y &lt;&lt; <span class="stringliteral">&quot; }&quot;</span>;
              <span class="keywordflow">return</span> stream;
              }
</pre></div><p> Вы можете определить свой оператор вывода аналогично.</p>
<p>На самом деле функция <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a> &ndash; это обертка над операторами потокового вывода STL: <code>operator</code> <code>&lt;&lt;</code>. Чудес не бывает, и в любом случае вывод пользовательских типов и автоматический подбор преобразований так или иначе был бы основан на семействе перегруженных функций. Вместо того, чтобы создавать такое семейство с нуля, TXLib использует уже существующий оператор <code>&lt;&lt;</code>, уже перегруженный для всех стандартных типов, и про который все хорошо знают.</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Если нужно передать спецификаторы ширины или точности в виде переменных (для форматов <code>*</code>, <code>%</code>.* или <code>*</code>.*), их нужно оборачивать в конструкции <code>width()</code> и <code>precision()</code> с помощью соответствующих функций. См. пример ниже. <br/>
<br/>
<ul>
<li><code>width_t width (int)</code> &ndash; Функция, оборачивающая спецификатор ширины в тип enum <code>width_t</code>.</li>
<li><code>precision_t precision (int)</code> &ndash; Функция, оборачивающая спецификатор точности в тип enum <code>precision_t</code>.</li>
</ul>
</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Функция довольно медленная и жадная на ресурсы: во-первых, в силу применения весьма неоптимальных потоков вывода STL <code></code>(std::ostream), во-вторых, вывод сначала идет в строку (через поток <code>std::ostringstream</code>), и только потом печатается. <br/>
<br/>
 Если хочется быстрее и экономнее &ndash; юзайте обычный принтф, он относительно быстрый. Или, как это принято в <code>TXLib</code> &ndash; делайте сами.</dd></dl>
<p>Идея реализации взята у <small>&#160;</small><span class="s"> признанного демона современного С++ </span><small>&#160;</small> (Alexandrescu A., "Variadic
          Templates are Funadic", Going Native 2012, Redmond, WA, USA, <a href="https://www.youtube.com/watch?v=dD57tJjkumE,">https://www.youtube.com/watch?v=dD57tJjkumE,</a> краткий обзор докладов см. <a href="https://habr.com/ru/post/139064">https://habr.com/ru/post/139064</a>).</p>
<p>Есть также макрос <code>TX_PRINTF (format, ...)</code>, который проверяет аргументы согласно спецификации стандартной функции <code>printf()</code> и потом вызывает <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>. Но он отвергает c %$ (%?), требует точного соответствия символов преобразований типов и не позволяет передавать типы, не встроенные изначально в язык С++ (структурные и классовые типы). Используйте его, если в дальнейшем вы планируете перейти на обычный <code>printf()</code>.</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция доступна только если ваш компилятор поддерживает стандарт C++11 (g++ с опцией <code>-std=c++11</code> или выше, Microsoft Visual Studio 2013 или выше). Используйте макрос _TX_CPP11, который определен, если компилятор поддерживает стандарт C++11.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga06beb201bdba586f44f029ffc5083bcf" title="Форматирует строку, как sprintf().">txFormat()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="comment">//         +--+--+---+---+----+-----+---+--+</span>
          <span class="comment">//         |2 |3 | 4 | 5 | 6  |  7  | 8 |  |</span>
          <span class="comment">//         +--+--+---+---+----+-----+---+--+</span>
          <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (<span class="stringliteral">&quot;|%$|%s|%5s|%*d|%.*f|%*.*$|%*$|%%|\n&quot;</span>,            <span class="comment">// Arg#1</span>
          <span class="comment">//         |  |  |   |   |    |     |   |  |</span>
          <span class="comment">//         +--+--+---+---+----+-----+---+--+</span>
                                               12,                    <span class="comment">// Arg#2</span>
                                              <span class="stringliteral">&quot;Cats power!&quot;</span>,          <span class="comment">// Arg#3</span>
                                               std::string (<span class="stringliteral">&quot;meow&quot;</span>),  <span class="comment">// Arg#4</span>
                    width (10),                56,                    <span class="comment">// Arg#5</span>
                    precision (3),             3.141592653,           <span class="comment">// Arg#6</span>
                    width (15), precision (6), 2.718281828,           <span class="comment">// Arg#7</span>
                    width (20),                POINT { 10, 20 });     <span class="comment">// Arg#8</span>
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4a3e395b81ff91d95fd23dafb3562e7c"></a><!-- doxytag: member="TXLib.h::txPrintf" ref="ga4a3e395b81ff91d95fd23dafb3562e7c" args="(std::ostringstream &amp;stream, const char *format, ArgsT...args)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txPrintf </td>
          <td>(</td>
          <td class="paramtype">std::ostringstream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArgsT...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Печатает в строковый поток вывода, как sprintf(). </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>Строка, как в sprintf(). </td></tr>
    <tr><td class="paramname">stream</td><td>Строковый поток вывода. </td></tr>
    <tr><td class="paramname">args</td><td>Значения для печати.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Количество напечатанных символов.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция доступна только если ваш компилятор поддерживает стандарт C++11 (g++ с опцией <code>-std=c++11</code> или выше, MSVC 2013 или выше). Используйте макрос _TX_CPP11, который определен, если компилятор поддерживает стандарт C++11.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd>См. пример в функции <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a> выше. </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga18959fb3fc2657b0019c0052bbb3e060"></a><!-- doxytag: member="TXLib.h::txPrintf" ref="ga18959fb3fc2657b0019c0052bbb3e060" args="(char buffer[], size_t size, const char *format, ArgsT...args)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txPrintf </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>buffer</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArgsT...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Печатает в строковый буфер, как sprintf(). </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>Строка, как в sprintf(). </td></tr>
    <tr><td class="paramname">buffer</td><td>Буфер для вывода. </td></tr>
    <tr><td class="paramname">size</td><td>Длина буфера вывода. </td></tr>
    <tr><td class="paramname">args</td><td>Значения для печати.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Количество напечатанных символов.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция доступна только если ваш компилятор поддерживает стандарт C++11 (g++ с опцией <code>-std=c++11</code> или выше, MSVC 2013 или выше). Используйте макрос _TX_CPP11, который определен, если компилятор поддерживает стандарт C++11.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd>См. пример в функции <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a> выше. </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga06beb201bdba586f44f029ffc5083bcf"></a><!-- doxytag: member="TXLib.h::txFormat" ref="ga06beb201bdba586f44f029ffc5083bcf" args="(const char *format, ArgsT...args)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string txFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ArgsT...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Форматирует строку, как sprintf(). </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>Строка, как в sprintf(). </td></tr>
    <tr><td class="paramname">args</td><td>Значения для печати.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Отформатированная строка в виде <code>std::string</code>.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция доступна только если ваш компилятор поддерживает стандарт C++11 (g++ с опцией <code>-std=c++11</code> или выше, MSVC 2013 или выше). Используйте макрос _TX_CPP11, который определен, если компилятор поддерживает стандарт C++11.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a>, <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a>, <a class="el" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon()</a>, <a class="el" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd>См. пример в функции <a class="el" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf()</a> выше. </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa81c1c7c499d76619d5d9d3369560881"></a><!-- doxytag: member="TXLib.h::random" ref="gaa81c1c7c499d76619d5d9d3369560881" args="(int range) tx_deprecated" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int random </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>range</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Генератор случайных чисел </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">range</td><td>Правая граница диапазона (<b>не</b> включая саму границу).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Случайное целое число в диапазоне [0; range).</dd></dl>
<p>Вы еще помните, что означают разные скобочки в обозначении интервалов? :)</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция может мяукать. <small>&#160;</small><span class="s"> Just because it can. </span><small>&#160;</small> Потому что она не часть стандарта С++ или Windows, а зависит от TXLib'а. Если это вам не нравится, вы можете написать ее сами, с помощью стандартной функции rand() и операции остатка от деления %. Подсказка: rand() % range.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">char</span> message[100] = <span class="stringliteral">&quot;Maybe...&quot;</span>;
          sprintf (message, <span class="stringliteral">&quot;You SUDDENLY got %d bucks now. But note that tax rate is $%d.&quot;</span>, <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (100), 100);
          <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (message, <span class="stringliteral">&quot;Lottery&quot;</span>);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga33933dc1baf2a181b7f9fabd61a4163e"></a><!-- doxytag: member="TXLib.h::random" ref="ga33933dc1baf2a181b7f9fabd61a4163e" args="(double left, double right) tx_nodiscard tx_deprecated" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double random </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Генератор случайных чисел </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Левая граница диапазона (<b>включая</b> саму границу). </td></tr>
    <tr><td class="paramname">right</td><td>Правая граница диапазона (<b>включая</b> саму границу).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Случайное целое число в диапазоне [left; right].</dd></dl>
<p>Вы все еще помните, что означают разные скобочки в обозначении интервалов? :)</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция может мяукать. <small>&#160;</small><span class="s"> Just in case. </span><small>&#160;</small> Потому что она не часть стандарта С++ или Windows, а зависит от TXLib'а. Если это вам не нравится, вы можете написать ее сами, с помощью стандартной функции rand() и небольшой <small>&#160;</small><span class="s"> уличной </span><small>&#160;</small> магии с делением на RAND_MAX и <small>&#160;</small><span class="s"> таинственной </span><small>&#160;</small> операцией вычитания.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">int</span> money = <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (-100, +100);
          <span class="keywordflow">if</span> (money &lt; 0)
              {
              <span class="keywordtype">char</span> message[100] = <span class="stringliteral">&quot;Maybe...&quot;</span>;
              sprintf (<span class="stringliteral">&quot;Проиграли в лотерею? Отдайте долг в %d рублей&quot;</span>, -money);
              <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (message, <span class="stringliteral">&quot;Быстро!&quot;</span>);
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gab7d5f6591f73008dd7c4034ed94d7528"></a><!-- doxytag: member="TXLib.h::In" ref="gab7d5f6591f73008dd7c4034ed94d7528" args="(Tx x, Ta a, Tb b) tx_nodiscard tx_deprecated" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool In </td>
          <td>(</td>
          <td class="paramtype">Tx&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ta&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Tb&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Проверка, находится ли параметр х внутри замкнутого интервала [a; b]. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Проверяемый параметр. </td></tr>
    <tr><td class="paramname">a</td><td>Левая граница (включительно). </td></tr>
    <tr><td class="paramname">b</td><td>Правая граница (включительно).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Если a &lt;= x &amp;&amp; x &lt;= b, то истина, если нет -- ложь.</dd></dl>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция может мяукать. <small>&#160;</small><span class="s"> Because cats are power! </span><small>&#160;</small> Потому что она не часть стандарта С++ или Windows, а зависит от TXLib'а. Если это вам не нравится, вы можете написать ее сами, используя неравенства.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordflow">while</span> (<a class="code" href="a00082.htm#ga3317e38b22d8e6f116c29503144c2cc2" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>() != 1)
              {
              <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<a class="code" href="a00082.htm#gae56f541d32ff7324dd6dd340411c1130" title="Возвращает X-Координату Мыши!">txMouseX</a>(), 110, 120)) <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (100, 100, <span class="stringliteral">&quot;Meet the wall!&quot;</span>);
              <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (0);
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gadfae620e55d8798711d4a0c72f6af99e"></a><!-- doxytag: member="TXLib.h::In" ref="gadfae620e55d8798711d4a0c72f6af99e" args="(const POINT &amp;pt, const RECT &amp;rect) tx_nodiscard tx_deprecated" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool In </td>
          <td>(</td>
          <td class="paramtype">const POINT &amp;&#160;</td>
          <td class="paramname"><em>pt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const RECT &amp;&#160;</td>
          <td class="paramname"><em>rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Проверка, находится ли точка pt внутри прямоугольника rect. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pt</td><td>Проверяемая точка в виде <code> POINT {x, y} </code>. </td></tr>
    <tr><td class="paramname">rect</td><td>Прямоугольник в виде <code> RECT {left, top, right, bottom} </code>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Результат проверки.</dd></dl>
<p>Удобно для реализации экранных кнопок, нажимаемых курсором мыши.</p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Эта функция может мяукать. <small>&#160;</small><span class="s"> Because cats are always right. </span><small>&#160;</small> Потому что она не часть стандарта С++ или Windows, а зависит от TXLib'а. Если это вам не нравится, вы можете написать ее сами.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          RECT button = { 100, 100, 150, 120 };

          <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>);
          <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (button.left, button.top, button.right, button.bottom);

          <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a>();
          <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>);
          <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (125, 115, <span class="stringliteral">&quot;Cookie&quot;</span>);

          <span class="keywordflow">for</span> (;;)
              {
              <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<a class="code" href="a00082.htm#ga44606f3b7f5f345d15bb20d46fcf78b6" title="Возвращает позицию Мыши!">txMousePos</a>(), button))
                  {
                  <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>);
                  <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (button.left, button.top, button.right, button.bottom);

                  <span class="keywordflow">if</span> (<a class="code" href="a00082.htm#ga3317e38b22d8e6f116c29503144c2cc2" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>())
                      {
                      <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>);
                      <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (button.left, button.top, button.right, button.bottom);

                      <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>);
                      <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (125, 115, <span class="stringliteral">&quot;You got cookie&quot;</span>);

                      <span class="keywordflow">break</span>;
                      }
                  }

              <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (0);
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga5de732de72c46b992ac2feeac2de7e42"></a><!-- doxytag: member="TXLib.h::tx_fpreset" ref="ga5de732de72c46b992ac2feeac2de7e42" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void tx_fpreset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Переинициализирует математический сопроцессор </p>
<p>Сбрасывает состояние математического сопроцессора, вызывая _fpreset() и разрешая генерацию исключений сопроцессора для неверного результата (_EM_INVALID), денормализации (_EM_DENORMAL), деления на ноль (_EM_ZERODIVIDE), переполнения (_EM_OVERFLOW) и антипереполнения (_EM_UNDERFLOW). Обычный вызов _fpreset() эти исключения маскирует, в результате чего вычислительные ошибки могут оказаться незамеченными.</p>
<p>Если вы хотите замаскировать эти исключения, вызывайте обычный _fpreset(), и затем проверяйте результат вычислений на достоверность хотя бы с помощью std::isfinite (x).</p>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Поведение TXLib по умолчанию -- <b>генерация</b> этих исключений и их <b>перехват</b> TXLib'ом в виде <b>ошибки</b>. <br/>
<br/>
 См. [1] <a href="http://books.google.ru/books?id=uwgNv8VlNPgC&amp;pg=PA343">пример работы с этими исключениями,</a> [2] <a href="http://www.gamasutra.com/view/news/169203/Exceptional_floating_point.php">статью о них.</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>();
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga74ff1048e0d6bc458c9904fbbe0a6026"></a><!-- doxytag: member="TXLib.h::txSqr" ref="ga74ff1048e0d6bc458c9904fbbe0a6026" args="(double x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double txSqr </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><em>Очень удобное</em> возведение числа в квадрат. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Число для возведения в него. (Кого? (Who?))</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Квадрат, полученный путем возведения в него числа, заданного для возведения в квадрат.</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Это пример, как <b> не надо </b> писать код: <a class="el" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026" title="Очень удобное возведение числа в квадрат.">txSqr()</a> -- функция с "медвежьей услугой". Иногда встречаются те, кто любит печатать в функции результат ее вычислений <small> (не данные для отладки, а именно результат), </small> вместо того, чтобы просто возвращать его туда, где эту функцию вызывали. Пусть эти люди воспользуются приведенной <a class="el" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026" title="Очень удобное возведение числа в квадрат.">txSqr()</a> для какого-нибудь нужного дела, особенно в цикле. Пример, конечно, несколько преувеличен. См. в исходном тексте код этой навязчивой радости.</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Радиус\t\t&quot;</span> <span class="stringliteral">&quot;Площадь круга\n\n&quot;</span>);

          <span class="keywordflow">for</span> (<span class="keywordtype">double</span> r = 100; r &gt; 0; r--)
              {
              printf (<span class="stringliteral">&quot;%6.2lf...&quot;</span>, r);

              <span class="keywordtype">double</span> square = M_PI * <a class="code" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026" title="Очень удобное возведение числа в квадрат.">txSqr</a> (r);  <span class="comment">// Надолго запомним эту площадь!</span>
              printf (<span class="stringliteral">&quot;\b\b\b   \t&quot;</span>);

              printf (<span class="stringliteral">&quot;%-.2lf\n&quot;</span>, square);
              }
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04566">4566</a></p>

</div>
</div>
<a class="anchor" id="gae0375f060fa35e25a4f5f4cc45573e5f"></a><!-- doxytag: member="TXLib.h::txDump" ref="gae0375f060fa35e25a4f5f4cc45573e5f" args="(const void *address, const char name[]=&quot;_txDump()&quot;, bool pause=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void txDump </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>name</em>[] = <code>&quot;_txDump()&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>pause</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Распечатывает дамп области памяти в консоли. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">address</td><td>Адрес начала распечатки. </td></tr>
    <tr><td class="paramname">pause</td><td><em>Делать ли паузу в конце распечатки. Необязательно.</em> </td></tr>
    <tr><td class="paramname">name</td><td><em>Название распечатки (усекается до 8 символов). Необязательно.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Распечатывается область памяти размером 256 байт.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keyword">const</span> <span class="keywordtype">char</span> text[] = <span class="stringliteral">&quot;Каждому лектору -- в портфель по вектору&quot;</span>;
          <a class="code" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f" title="Распечатывает дамп области памяти в консоли.">txDump</a> (text);

          SetConsoleOutputCP (437);    <span class="comment">// Будет отображаться псевдографика, но НЕ русские буквы</span>
          <a class="code" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f" title="Распечатывает дамп области памяти в консоли.">txDump</a> (text);
          SetConsoleOutputCP (1251);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gafbd4278ff893fc1c1e28b086197adebe"></a><!-- doxytag: member="TXLib.h::txDemangle" ref="gafbd4278ff893fc1c1e28b086197adebe" args="(const char *mangledName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string txDemangle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>mangledName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Преобразует декорированное имя С++ в название типа. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mangledName</td><td>Декорированное (mangled) имя.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Строка с полным названием типа.</dd></dl>
<p><a href="http://en.wikipedia.org/wiki/Name_mangling#Simple_example">Что такое декорирование имен (name mangling) см. здесь.</a></p>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Если используется форма функции, возвращающая <code>char*</code>, вы должны <b>сами</b> освободить память, занимаемую строкой, с помощью вызова <code>free()</code>, иначе будет утечка памяти.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f" title="Распечатывает дамп области памяти в консоли.">txDump()</a>, <a class="el" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267" title="Распечатывает текущий стек вызовов функций в консоли.">txStackBackTrace()</a>, <a class="el" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR()</a>, <a class="el" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keyword">auto</span> type = <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (<span class="keyword">typeid</span> (std::string) .name());
          std::cout &lt;&lt; <span class="stringliteral">&quot;The real type of std::string is: &quot;</span> &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot;, muahhaha! :)\n&quot;</span>;

          std::cout &lt;&lt; <span class="stringliteral">&quot;Call is shorter, but result is the same: &quot;</span> &lt;&lt; txTypename (std::string) &lt;&lt; <span class="stringliteral">&quot;, muahhaha, too.\n&quot;</span>;
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad942f797bce07af74cd11c88d50ddd3e"></a><!-- doxytag: member="TXLib.h::txRegQuery" ref="gad942f797bce07af74cd11c88d50ddd3e" args="(const char *keyName, const char *valueName, void *value, size_t szValue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txRegQuery </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>keyName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>valueName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>szValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Читает информацию из реестра Windows. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">keyName</td><td>Имя ключа реестра (см. ниже) </td></tr>
    <tr><td class="paramname">valueName</td><td>Имя параметра ключа </td></tr>
    <tr><td class="paramname">value</td><td>Буфер, в который записывается значение </td></tr>
    <tr><td class="paramname">szValue</td><td>Размер буфера</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Количество байт, записанных в буфер <small>&#160;</small><span class="s"> сос мыслом </span><small>&#160;</small> со значением value</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Имя ключа реестра <code>keyName</code> <b>обязательно</b> должно начинаться c имени или обозначения одного из разделов:</dd></dl>
<table  border="0">
<tr valign="top">
<td><b>Обозначение</b> &#160;&#160;</td><td><b>Ключ реестра</b> </td></tr>
<tr valign="top">
<td><code>HKLM</code> &#160;&#160;</td><td><code>HKEY_LOCAL_MACHINE</code> </td></tr>
<tr valign="top">
<td><code>HKCU</code> &#160;&#160;</td><td><code>HKEY_CURRENT_USER</code> </td></tr>
<tr valign="top">
<td><code>HKCR</code> &#160;&#160;</td><td><code>HKEY_CLASSES_ROOT</code> </td></tr>
<tr valign="top">
<td><code>HKU</code> &#160;&#160;</td><td><code>HKEY_USERS</code> </td></tr>
<tr valign="top">
<td><code>HKCC</code> &#160;&#160;</td><td><code>HKEY_CURRENT_CONFIG</code> </td></tr>
</table>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordtype">char</span> path[MAX_PATH] = <span class="stringliteral">&quot;(not installed)&quot;</span>;
          <a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="stringliteral">&quot;HKCU\\Software\\TX Library&quot;</span>, <span class="stringliteral">&quot;ProductDir&quot;</span>, path, <span class="keyword">sizeof</span> (path));

          printf (<span class="stringliteral">&quot;TX Library is installed in: \&quot;%s\&quot;\n&quot;</span>, path);
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga30fb1a6913174dfcea5079391f655be2"></a><!-- doxytag: member="TXLib.h::txSetWindowsHook" ref="ga30fb1a6913174dfcea5079391f655be2" args="(WNDPROC wndProc=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">WNDPROC txSetWindowsHook </td>
          <td>(</td>
          <td class="paramtype">WNDPROC&#160;</td>
          <td class="paramname"><em>wndProc</em> = <code>NULL</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна TXLib. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">wndProc</td><td><em>Новая оконная функция окна TXLib. <br/>
 Если не указана или NULL, то текущая альтернативная оконная функция удаляется и устанавливается стандартная.</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Адрес предыдущей оконной функции для окна TXLib.</dd></dl>
<p>Заданная оконная функция будет вызываться <b>до</b> обработки события средствами TXLib. Она должна быть функцией со следующим прототипом: </p>
<div class="fragment"><pre class="fragment">          LRESULT CALLBACK NewWndProc (HWND window, UINT message, WPARAM wParam, LPARAM lParam);
</pre></div><dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Оконная функция будет вызываться из вспомогательного (второго) потока, создаваемого <a class="el" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab">txCreateWindow()</a>. Это <b>не</b> тот же самый поток, в котором выполняется main(). В связи с этим будьте внимательны при работе с глобальными переменными или их аналогами, т.к. может возникнуть "гонка
          потоков" (race condition).</dd>
<dd>
Если оконная функция вернет значение, не равное 0, то стандартная обработка сообщений средствами TXLib <b>не</b> будет произведена. Из-за этого, возможно, окно даже не сможет нормально закрыться. Придется завершать программу с помощью Alt-Ctrl-Del из диспетчера задач, или из более продвинутого диспетчера <a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx">Process Explorer</a>. Если Вы берете на себя обработку оконных сообщений, делайте ее по правилам Win32 (см. MSDN), включая вызов DefWindowProc().</dd></dl>
<dl class="note"><dt><b>Заметки:</b></dt><dd>Полностью поменять оконную функцию можно с помощью функций SetWindowLong или SetWindowLongPtr: <div class="fragment"><pre class="fragment">          WNDPROC OldWndProc = (WNDPROC) SetWindowLongPtr (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), GWL_WNDPROC, (LONG_PTR) NewWndProc);
</pre></div> При этом надо обязательно всегда вызывать старую оконную функцию с помощью CallWindowProc, (см. MSDN), иначе последствия будут такими же плачевными, как описаны выше.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow()</a>, <a class="el" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a>, <a class="el" href="a00083.htm#gaab464722960a885cce94b655c87590fc" title="Ввод строки в отдельном окне.">txInputBox()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          LRESULT CALLBACK MyWndProc (HWND window, UINT message, WPARAM wParam, LPARAM lParam);

          <span class="keywordtype">int</span> main()
              {
              <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (GetSystemMetrics (SM_CXSCREEN) / 4, GetSystemMetrics (SM_CYSCREEN) / 4);

              <a class="code" href="a00080.htm#ga30fb1a6913174dfcea5079391f655be2" title="Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна T...">txSetWindowsHook</a> (MyWndProc);

              POINT sz = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a>();

              <a class="code" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont</a> (<span class="stringliteral">&quot;Lucida Console&quot;</span>, 30, 15);
              <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (0, 0,      sz.x, sz.y, <span class="stringliteral">&quot;MOV txWindow, eax [please]&quot;</span>);

              <a class="code" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont</a> (<span class="stringliteral">&quot;Lucida Console&quot;</span>, 15, 7.5);
              <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (0, sz.y/2, sz.x, sz.y, <span class="stringliteral">&quot;(Info for the cats: NO MOUSE HERE)&quot;</span>);

              <span class="keywordflow">return</span> 0;
              }

          LRESULT CALLBACK MyWndProc (HWND window, UINT message, WPARAM wParam, LPARAM lParam)
              {
              <span class="keywordflow">if</span> (message == WM_MOVE)
                  <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;  I like to MOVe it, MOVe it&quot;</span>, <span class="stringliteral">&quot;TXLib 2 Real&quot;</span>, MB_ICONINFORMATION);

              <span class="keywordflow">if</span> (message == WM_SETCURSOR &amp;&amp; LOWORD (lParam) == HTCLIENT)
                  {
                  SetCursor (NULL);
                  <span class="keywordflow">return</span> <span class="keyword">true</span>;
                  }

              <span class="keyword">static</span> <span class="keywordtype">int</span> i = 0;
              <span class="keywordflow">if</span> (i++ % 15 == 0)
                  {
                  <span class="keywordtype">char</span> str[2] = {<span class="stringliteral">&quot;-\\|/&quot;</span> [i/15 % 4]};  <span class="comment">// Прропппеллллерррр</span>
                  SetWindowText (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), str);
                  }

              <span class="keywordflow">return</span> 0;  <span class="comment">// Продолжить обработку сообщения средствами TXLib</span>
              }
</pre></div> </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga532fa8a55c4f3d4f94ff0fdceae732b2"></a><!-- doxytag: member="TXLib.h::txLock" ref="ga532fa8a55c4f3d4f94ff0fdceae732b2" args="(bool wait=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txLock </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>wait</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Блокировка холста (контекста рисования). </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">wait</td><td><em>Ожидать конца перерисовки окна вспомогательным потоком. Если не указано, то "ожидать".</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Состояние блокировки.</dd></dl>
<p>Перед вызовом любых функций Win32 GDI необходимо заблокировать холст функцией <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a> и затем разблокировать с помощью <a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock()</a>. Это связано с тем, что обновление содержимого окна (для тех, кто знает Win32: обработка сообщения WM_PAINT) в библиотеке TXLib происходит в отдельном вспомогательном потоке. Надолго блокировать его нельзя -- при заблокированном потоке окно не обновляется.</p>
<p><a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a> использует EnterCriticalSection(), и физически приостанавливает поток, обновляющий окно, так что надолго блокировать нельзя. Иначе тормозится обработка оконных сообщений, окно перестает реагировать на действия пользователя и перерисовываться. Нельзя также вызывать <a class="el" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep()</a> или Sleep() при заблокированном потоке.</p>
<p><a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a> / <a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock()</a> -- это низкоуровневый механизм. Он отличается от более простого высокоуровневого механизма <a class="el" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin()</a> / <a class="el" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd()</a> / <a class="el" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow()</a>, который не приостанавливает поток, а просто отключает принудительное постоянное обновление окна.</p>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC()</a>, <a class="el" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory()</a>, <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a>, <a class="el" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock()</a>, <a class="el" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd>См. исходный текст функций _txCanvas_OnPAINT() и _txConsole_Draw() в <a class="el" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>. </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8fe4ec4c66cb69ce337747fe65dd0cc6"></a><!-- doxytag: member="TXLib.h::txUnlock" ref="ga8fe4ec4c66cb69ce337747fe65dd0cc6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool txUnlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Разблокировка холста </p>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Состояние блокировки (всегда false).</dd></dl>
<p>Более подробно см. в описании <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a>.</p>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC()</a>, <a class="el" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory()</a>, <a class="el" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock()</a>, <a class="el" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI()</a></dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd>См. исходный текст функций _txCanvas_OnPAINT() и _txConsole_Draw() в <a class="el" href="a00058.htm" title="Библиотека Тупого Художника (The Dumb Artist Library, TX Library, TXLib).">TXLib.h</a>. </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6122d52806d23ff6bd480a0f07b75f2b"></a><!-- doxytag: member="TXLib.h::txSetLocale" ref="ga6122d52806d23ff6bd480a0f07b75f2b" args="(int codepage=_TX_CODEPAGE, const char locale[]=_TX_LOCALE, const wchar_t wLocale[]=_TX_WLOCALE)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int txSetLocale </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>codepage</em> = <code>_TX_CODEPAGE</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>locale</em>[] = <code>_TX_LOCALE</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wchar_t&#160;</td>
          <td class="paramname"><em>wLocale</em>[] = <code>_TX_WLOCALE</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Смена кодовой страницы консоли и локали стандартной библиотеки С++. </p>
<dl><dt><b>Аргументы:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">codepage</td><td><em>Номер новой кодовой страницы консоли. Если не указано, то 1251.</em> </td></tr>
    <tr><td class="paramname">locale</td><td><em>Новая локаль (информация о языке) стандартной библиотеки С++. Если не указано, то "Russian" или "ru_RU.CP1251".</em> </td></tr>
    <tr><td class="paramname">wLocale</td><td><em>Новая локаль стандартной библиотеки С++ для wide character funstions. Если не указано, то L"Russian_Russia.ACP".</em></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Возвращает:</b></dt><dd>Номер старой кодовой страницы консоли.</dd></dl>
<ul>
<li><a href="http://www.google.com/search?q=windows+console+code+page+identifiers">Список кодовых страниц консоли</a></li>
<li><a href="http://www.google.com/search?q=C%2B%2B+locale+name+list">Список имен локалей C++</a></li>
</ul>
<dl class="warning"><dt><b>Предупреждения:</b></dt><dd>Если устанавливается кодовая страница не 1251, возможны нарушения в работе строковых функций C++ и вывода текста в консоль.</dd></dl>
<dl class="see"><dt><b>См. также:</b></dt><dd><a class="el" href="a00081.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole()</a>, <a class="el" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr()</a> и другие консольные функции, txReopenStdio()</dd></dl>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a> (866, <span class="stringliteral">&quot;Russian_Russia.866&quot;</span>, L<span class="stringliteral">&quot;Russian_Russia.866&quot;</span>);
</pre></div> </dd>
</dl>

</div>
</div>
<hr/><h2>Переменные</h2>
<a class="anchor" id="gaf59817ad656dcbb3f9baebeb4d7f82f7"></a><!-- doxytag: member="TXLib.h::txPI" ref="gaf59817ad656dcbb3f9baebeb4d7f82f7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double <a class="el" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7">txPI</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Число Пи </p>
<dl class="usage">
<dt><b>Примеры использования:</b></dt>
<dd><div class="fragment"><pre class="fragment">          <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a> == 1) <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Вы попали в другую Вселенную.&quot;</span>, <span class="stringliteral">&quot;Поздравляем&quot;</span>, MB_ICONSTOP);
</pre></div> </dd>
</dl>

<p>См. определение в файле <a class="el" href="a00058_source.htm">TXLib.h</a> строка <a class="el" href="a00058_source.htm#l04535">4535</a></p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Thu Aug 13 2020 00:46:50. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
