<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: [TXWave] Пример для библиотеки TXWave</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00013.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>[TXWave] Пример для библиотеки TXWave </h1>  </div>
</div>
<div class="contents">
<div class="textblock"><p>[TXWave] Библиотека TXWave - воспроизведение и запись звуков</p>
<dl class="rcs"><dt><b>Version:</b></dt><dd>00173a, Revision: 168 </dd></dl>
<dl class="rcs"><dt><b>Date:</b></dt><dd>2020-08-13 00:46:05 +0400 </dd></dl>
<dl class="rcs"><dt><b>Copyright:</b></dt><dd>(C) Ded (Ilya Dedinsky, <a href="http://txlib.ru">http://txlib.ru</a>) &lt;<a href="mailto:mail@txlib.ru">mail@txlib.ru</a>&gt; </dd></dl>
<hr/>
 <h2><a class="anchor" id="Contents"></a>
Разделы системы помощи</h2>
<dl class="user"><dt><b></b></dt><dd><ul>
<li><a class="el" href="a00079.htm">Компоненты TXWave</a></li>
<li><a class="el" href="a00080.htm">Разное</a></li>
<li><a class="el" href="a00013.htm">Пример работы</a></li>
</ul>
</dd></dl>
<div class="fragment"><pre class="fragment"><span class="comment">//{================================================================================================================</span>
<span class="comment"></span><span class="comment">//              $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt; $</span>
<span class="comment">//}================================================================================================================</span>

<span class="preprocessor">#include &quot;<a class="code" href="a00061.htm">..\TXWave.h</a>&quot;</span>

<span class="keywordtype">void</span> BeepDemo();
<span class="keywordtype">void</span> SinusDemo();
<span class="keywordtype">void</span> StereoDemo();
<span class="keywordtype">void</span> Sort1Demo();
<span class="keywordtype">void</span> Sort2Demo();
<span class="keywordtype">void</span> Sort3Demo();
<span class="keywordtype">void</span> BeepDemo2();
<span class="keywordtype">void</span> WaveformDemo();
<span class="keywordtype">void</span> CatPurrDemo();
<span class="keywordtype">void</span> RecordingDemo();
<span class="keywordtype">bool</span> <a class="code" href="a00079.htm#ga034e9fc739e3a23cc7ff49fbe7ab8205" title="Функция-монитор, регулярно вызывающаяся при записи звука.">MonitorProc</a> (HWAVEIN, <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">void</span>*);
<span class="keywordtype">void</span> Banner (<span class="keyword">const</span> <span class="keywordtype">char</span>* text);
<span class="keywordtype">void</span> Pause();

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">int</span> main()
    {
    txDisableAutoPause();

    printf (<span class="stringliteral">&quot;\n&quot;</span>);

    Banner (<span class="stringliteral">&quot;1/10: Beep demo&quot;</span>);
    BeepDemo();
    Pause();

    <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 600);

    Banner (<span class="stringliteral">&quot;2/10: Sinus demo&quot;</span>);
    SinusDemo();
    Pause();

    printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;For idea of the sorting demos see: https://www.youtube.com/watch?v=kPRA0W1kECg\n\n&quot;</span>);

    Banner (<span class="stringliteral">&quot;3/10: Shaker Sort demo&quot;</span>);
    Sort1Demo();
    Pause();

    Banner (<span class="stringliteral">&quot;4/10: std::sort (QuickSort) demo&quot;</span>);
    Sort2Demo();
    Pause();

    Banner (<span class="stringliteral">&quot;5/10: std::stable_sort (MergeSort) demo&quot;</span>);
    Sort3Demo();
    Pause();

    ShowWindow (Win32::GetConsoleWindow(), SW_SHOW);
    ShowWindow (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), SW_HIDE);

    Banner (<span class="stringliteral">&quot;6/10: Stereo demo&quot;</span>);
    StereoDemo();
    Pause();

    Banner (<span class="stringliteral">&quot;7/10: Beep demo 2&quot;</span>);
    BeepDemo2();
    Pause();

    Banner (<span class="stringliteral">&quot;8/10: Waveform demo&quot;</span>);
    WaveformDemo();
    Pause();

    Banner (<span class="stringliteral">&quot;9/10: Cat purr demo&quot;</span>);
    CatPurrDemo();
    Pause();

    Banner (<span class="stringliteral">&quot;10/10: Recording demo&quot;</span>);
    RecordingDemo();
    Pause();

    Banner (<span class="stringliteral">&quot;All demos done&quot;</span>);
    <span class="keywordflow">return</span> 0;
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> BeepDemo()
    {
    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (250, 880);
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> SinusDemo()
    {
    POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a>();

    <span class="keywordtype">double</span> x0 = -2*M_PI, x1 = +2*M_PI;
    <span class="keywordtype">double</span> zoom = 50;

    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = -10; i &lt;= 10; i++)
        {
        <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (i? <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a> : <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>);

        <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (0, size.y/2 + i*zoom, size.x, size.y/2 + i*zoom);
        <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (size.x/2 + i*zoom, 0, size.x/2 + i*zoom, size.y);
        }

    Banner (<span class="stringliteral">&quot;\f&quot;</span> <span class="stringliteral">&quot;SinusDemo. Press any key to stop...&quot;</span>);

    <span class="keywordflow">for</span> (<span class="keywordtype">double</span> x = x0; x &lt;= x1 &amp;&amp; !_kbhit(); x += (x1 - x0) / 101)
        {
        <span class="keywordtype">double</span> y = 5 * sin (x);

        <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (50, 880 + 88 * y);

        <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x*zoom + size.x/2, -y*zoom + size.y/2, 5);
        }
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> StereoDemo()
    {
    <span class="keywordflow">for</span> (<span class="keywordtype">double</span> t = -0.1; !_kbhit(); t += 0.1)
        {
        <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (50, 880 + 88 * cos (t), 100,
                       880 + 88 * sin (t), 100);

        <span class="keyword">const</span> <span class="keywordtype">char</span> line[] = <span class="stringliteral">&quot;----------------------------------------&quot;</span>;
        <span class="keyword">const</span> <span class="keywordtype">int</span>  lineSz = <span class="keyword">sizeof</span> (line) - 1;

        <span class="keywordtype">int</span> sz = (int) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((1 + cos (t))/2 * lineSz);
        printf (<span class="stringliteral">&quot;Press any key to stop...     [%.*s|%.*s]  \r&quot;</span>, lineSz-sz, line, sz, line);
        }

    printf (<span class="stringliteral">&quot;\n\n&quot;</span>);
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> BeepDemo2()
    {
    <span class="keywordtype">int</span> time = 2000;
    <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> wav (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (time * <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>));

    printf (<span class="stringliteral">&quot;Generating the waveform ~880 Hz...\n&quot;</span>);

    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; wav.size(); i++)
        wav[i][0] = wav[i][1] = (<span class="keywordtype">short</span>) (sin (i*0.125) * <a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32" title="Максимальная громкость в txWaveSample_t, согласно формату txWaveFormat.">txWaveVolMax</a>);  <span class="comment">// * 2*M_PI/44100 * 880</span>

    printf (<span class="stringliteral">&quot;Playing %d sec...\n\n&quot;</span>, time/1000);

    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (wav);
    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a>();
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> WaveformDemo()
    {
    <span class="keywordtype">int</span> time = 90000;
    <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> buf (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (time * <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>));
    <span class="keywordtype">unsigned</span> size = (unsigned) buf.size();

    printf (<span class="stringliteral">&quot;Generating the wave: (t &gt;&gt; 7 | t | t &gt;&gt; 6) * 10 + 4 * (t &amp; t &gt;&gt; 13 | t &gt;&gt; 6)...\n&quot;</span>
            <span class="stringliteral">&quot;See: http://countercomplex.blogspot.ru/2011/10/algorithmic-symphonies-from-one-line-of.html\n\n&quot;</span>);

    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; size; i++)
        {
        <span class="keywordtype">int</span> t   = i/5;
        <span class="keywordtype">int</span> val = (((t &gt;&gt; 7) | t | (t &gt;&gt; 6)) * 10 + 4 * ((t &amp; (t &gt;&gt; 13)) | (t &gt;&gt; 6))) &amp; 0xFF;

        buf[i][0] = buf[i][1] = (short) ((val/127.0 - 1) / (1 + pow (15, 17.0*i/size - 15)) * <a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32" title="Максимальная громкость в txWaveSample_t, согласно формату txWaveFormat.">txWaveVolMax</a>);
        }

    printf (<span class="stringliteral">&quot;Now playing, press a key to stop...\n\n&quot;</span>);

    HWAVEOUT waveOut = <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (buf); assert (waveOut);

    <span class="keywordflow">while</span> (!_kbhit())
        {
        <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos = <a class="code" href="a00079.htm#gab571deca09d5854eff03adb4a906e378" title="Возвращает текущую позицию воспроизведения или записи.">txWaveGetPosition</a> (waveOut);
        <span class="keywordtype">unsigned</span> done = (unsigned) (100 * pos/size);

        <span class="keyword">const</span> <span class="keywordtype">char</span> line[] = <span class="stringliteral">&quot;----------------------------------------&quot;</span>;
        <span class="keyword">const</span> <span class="keywordtype">int</span>  lineSz = <span class="keyword">sizeof</span> (line) - 1;

        printf (<span class="stringliteral">&quot;Done %7lu/%7u samples [%.*s|%.*s] %3u%%  \r&quot;</span>,
                 pos, size, (<span class="keywordtype">int</span>) (lineSz*done/100), line, (<span class="keywordtype">int</span>) (lineSz - lineSz*done/100), line, done);

        <span class="keywordflow">if</span> (done &gt;= 100) <span class="keywordflow">break</span>;
        Sleep (100);
        }

    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (0);
    printf (<span class="stringliteral">&quot;\n\n&quot;</span>);
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> CatPurrDemo()
    {
    <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> purr = <a class="code" href="a00079.htm#ga74e32845b5d8f9a538b2c9c1d5c27e35" title="Загружает звуковые данные из WAV-файла.">txWaveLoadWav</a> (<span class="stringliteral">&quot;Purr.wav&quot;</span>);

    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (purr);

    printf (<span class="stringliteral">&quot;Uninterruptable... do relax and wait %ld sec\n\n&quot;</span>, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((<span class="keywordtype">int</span>) purr.size() / <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a> / 1000));

    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a>();
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> RecordingDemo()
    {
    Banner (<span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;Turn on the microphone and get prepared for a recording.&quot;</span>); Pause();

    <span class="keywordtype">int</span> time = 20000;

    printf (<span class="stringliteral">&quot;Recording %2d sec...\n&quot;</span>,   time/1000);

    <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> wav = <a class="code" href="a00079.htm#ga650c6862cf9d0d2e8ab6c8c43e59be18" title="Записывает звук со звуковой карты.">txWaveIn</a> (time, <a class="code" href="a00079.htm#ga034e9fc739e3a23cc7ff49fbe7ab8205" title="Функция-монитор, регулярно вызывающаяся при записи звука.">MonitorProc</a>);
    time = <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((<span class="keywordtype">int</span>) wav.size() / <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>);

    printf (<span class="stringliteral">&quot;\nRecorded: %2d sec\n&quot;</span>,  time/1000);
    printf (<span class="stringliteral">&quot;\nPlaying %2d sec...\n&quot;</span>, time/1000);

    HWAVEOUT waveOut = <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (wav);
    <span class="keywordflow">while</span> (!_kbhit() &amp;&amp; <a class="code" href="a00079.htm#gab571deca09d5854eff03adb4a906e378" title="Возвращает текущую позицию воспроизведения или записи.">txWaveGetPosition</a> (waveOut) &lt; wav.size()) Sleep (100);
    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (0);

    printf (<span class="stringliteral">&quot;\nSaving to WAV file...\n\n&quot;</span>);
    <a class="code" href="a00079.htm#gaf4acf7c838bf10514034eaebffe914bc" title="Сохраняет звуковые данные в WAV-файле.">txWaveSaveWav</a> (wav, <span class="stringliteral">&quot;Recording.wav&quot;</span>);
    }

<span class="keywordtype">bool</span> <a class="code" href="a00079.htm#ga034e9fc739e3a23cc7ff49fbe7ab8205" title="Функция-монитор, регулярно вызывающаяся при записи звука.">MonitorProc</a> (HWAVEIN, <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">void</span>*)
    {
    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> line1[] = <span class="stringliteral">&quot;---------------&quot;</span>;
    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> line2[] = <span class="stringliteral">&quot;|||||||||||||||&quot;</span>;
    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span>  lineSz  = <span class="keyword">sizeof</span> (line1) - 1;

    <span class="keywordtype">unsigned</span> pos  = (unsigned) data.size();
    <span class="keywordtype">unsigned</span> size = (unsigned) data.capacity();
    <span class="keywordtype">unsigned</span> done = (unsigned) (100 * pos/size);

    <span class="keywordtype">double</span> avr = 10;
    <span class="keywordflow">if</span> (pos &gt;= 100) <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = pos - 100; i &lt; pos; i++) avr += (abs (data[i][0]) + abs (data[i][1])) / <a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32" title="Максимальная громкость в txWaveSample_t, согласно формату txWaveFormat.">txWaveVolMax</a>;
    <span class="keywordtype">int</span> vol = (avr &lt;= 100)? (<span class="keywordtype">int</span>) avr : 100;

    printf (<span class="stringliteral">&quot;Done %6u/%6u samples   [%.*s|%.*s] %3u%%  [%.*s%.*s%s %3d%%  \r&quot;</span>,
             pos, size,
             (<span class="keywordtype">int</span>) (lineSz*done/100), line1, (<span class="keywordtype">int</span>) (lineSz - lineSz*done/100), line1,                         done,
             (<span class="keywordtype">int</span>) (lineSz*vol /100), line2, (<span class="keywordtype">int</span>) (lineSz - lineSz*vol /100), line1, (vol &lt; 100? <span class="stringliteral">&quot;]&quot;</span> : <span class="stringliteral">&quot;X&quot;</span>), vol);

    <span class="keywordflow">return</span> (_kbhit()? ((<span class="keywordtype">void</span>) _getch(), <span class="keyword">false</span>) : <span class="keyword">true</span>);
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="comment">// For idea of this demo see: https://www.youtube.com/watch?v=kPRA0W1kECg</span>

<span class="keyword">struct </span>Number_t
    {
    <span class="keywordtype">int</span> val_;

    Number_t();

    Number_t&amp; operator = (<span class="keyword">const</span> Number_t&amp; that);
    <span class="keywordtype">bool</span>      operator &lt; (<span class="keyword">const</span> Number_t&amp; that) <span class="keyword">const</span>;

    <span class="keywordtype">bool</span> draw (COLORREF color, COLORREF fillColor) <span class="keyword">const</span>;

    <span class="keyword">static</span> <span class="keywordtype">void</span> setinfo (<span class="keyword">const</span> Number_t* data, <span class="keywordtype">size_t</span> size);

    <span class="keyword">static</span> <span class="keyword">const</span> Number_t* data__;
    <span class="keyword">static</span>       <span class="keywordtype">size_t</span>    size__;
    };

<span class="keyword">const</span> Number_t* Number_t::data__   = NULL;
      <span class="keywordtype">size_t</span>    Number_t::size__   = 0;

Number_t::Number_t() :
    val_ (88 + rand() % 2552)
    {}

<span class="keywordtype">void</span> Number_t::setinfo (<span class="keyword">const</span> Number_t* data, <span class="keywordtype">size_t</span> size)
    {
    data__ = data;
    size__ = size;

    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; size__; i++) data__[i].draw (<a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (64, 64, 64), <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (32, 32, 32));
    }

<span class="keywordtype">bool</span> Number_t::draw (COLORREF color, COLORREF fillColor)<span class="keyword"> const</span>
<span class="keyword">    </span>{
    <span class="keywordflow">if</span> (_kbhit()) <span class="keywordflow">throw</span> EOF;

    <span class="keyword">const</span> <span class="keywordtype">int</span> width = 9;

    <span class="keywordtype">int</span> n = (int) (<span class="keyword">this</span> - data__);
    <span class="keywordflow">if</span> (!data__ || !(0 &lt;= n &amp;&amp; n &lt; (<span class="keywordtype">int</span>) size__)) <span class="keywordflow">return</span> <span class="keyword">false</span>;

    <span class="keywordtype">int</span> x0 = <a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a>()/2 - width * (int)size__/2;

    <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>); <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>);
    <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (x0 + n*width, 500, x0 + (n+1)*width, 500 - 400);

    <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (color); <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (fillColor);
    <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (x0 + n*width, 500, x0 + (n+1)*width, 500 - val_/10);

    <span class="keywordflow">return</span> <span class="keyword">true</span>;
    }

Number_t&amp; Number_t::operator = (<span class="keyword">const</span> Number_t&amp; that)
    {
    <span class="keywordflow">if</span> (_kbhit()) <span class="keywordflow">throw</span> EOF;

    val_ = that.val_;
    draw (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>);

    <span class="keywordflow">return</span> *<span class="keyword">this</span>;
    }

<span class="keywordtype">bool</span> Number_t::operator &lt; (<span class="keyword">const</span> Number_t&amp; that)<span class="keyword"> const</span>
<span class="keyword">    </span>{
    <span class="keywordflow">if</span> (_kbhit()) <span class="keywordflow">throw</span> EOF;

    this-&gt;draw (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504" title="Светло-красный цвет. Не самого лучшего оттенка.">TX_LIGHTRED</a>, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>);
    that. draw (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504" title="Светло-красный цвет. Не самого лучшего оттенка.">TX_LIGHTRED</a>, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>);

    <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (50, val_, 10, that.val_, 10);

    this-&gt;draw (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>);
    that. draw (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>);

    <span class="keywordflow">return</span> val_ &lt; that.val_;
    }

<span class="keywordtype">void</span> Sort1Demo()
    {
    <span class="keywordflow">try</span>
        {
        Number_t data[16];
        Number_t::setinfo (data, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data));

        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> left = 0, right = (<span class="keywordtype">int</span>) <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data) - 1; left &lt; right; )
            {
            <span class="keywordtype">bool</span> change = <span class="keyword">false</span>;

            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = left; i &lt; right; i++)
                <span class="keywordflow">if</span> (data[i+1] &lt; data[i]) { std::swap (data[i+1], data[i]); change = <span class="keyword">true</span>; }

            right--;
            <span class="keywordflow">if</span> (!change) <span class="keywordflow">break</span>;

            change = <span class="keyword">false</span>;

            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = right-1; i &gt;= left; i--)
                <span class="keywordflow">if</span> (data[i+1] &lt; data[i]) { std::swap (data[i+1], data[i]); change = <span class="keyword">true</span>; }

            left++;
            <span class="keywordflow">if</span> (!change) <span class="keywordflow">break</span>;
            }
        }

    <span class="keywordflow">catch</span> (...) {}
    }

<span class="keywordtype">void</span> Sort2Demo()
    {
    <span class="keywordflow">try</span>
        {
        Number_t data[32];
        Number_t::setinfo (data, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data));

        std::sort (data, data + <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data));
        }

    <span class="keywordflow">catch</span> (...) {}
    }

<span class="keywordtype">void</span> Sort3Demo()
    {
    <span class="keywordflow">try</span>
        {
        Number_t data[32];
        Number_t::setinfo (data, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data));

        std::stable_sort (data, data + <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (data));
        }

    <span class="keywordflow">catch</span> (...) {}
    }

<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>

<span class="keywordtype">void</span> Banner (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)
    {
    <span class="keywordflow">if</span> (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>() &amp;&amp; IsWindowVisible (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()))
        {
        <span class="keyword">static</span> POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a>();

        <span class="keywordflow">if</span> (*text != <span class="charliteral">&#39;\f&#39;</span>)
            {
            <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>);
            <a class="code" href="a00081.htm#ga78e83baeb6a02d5fa33dd8b062e513d9" title="Стирает холст текущим цветом заполнения.">txClear</a>();
            }
        <span class="keywordflow">else</span>
            text++;

        <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\r&#39;</span>) text++;
        <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\t&#39;</span>) text++;

        <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>);
        <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (TA_CENTER);

        <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>); <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (0, size.y * 0.95, size.x, size.y);
        <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>); <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a>  (0, size.y * 0.95, size.x, size.y, text);
        <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (0);

        <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>);
        }
    <span class="keywordflow">else</span>
        {
        $y;
        <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\f&#39;</span>) {     text++; }
        <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\r&#39;</span>) { $r; text++; }
        <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\t&#39;</span>) { $d; text++; }

        printf (<span class="stringliteral">&quot;%s\n\n&quot;</span>, text);

        $d;
        }
    }

<span class="keywordtype">void</span> Pause()
    {
    Banner (<span class="stringliteral">&quot;\f\t&quot;</span> <span class="stringliteral">&quot;Press a key to continue...&quot;</span>);

    <span class="keywordflow">while</span> (_kbhit()) (void) _getch();
    (void) _getch();
    }
</pre></div> </div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Thu Aug 13 2020 00:46:50. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
