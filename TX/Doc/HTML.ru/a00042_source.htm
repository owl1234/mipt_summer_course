<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл PhongDemo.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00042.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>PhongDemo.cpp</h1>  </div>
</div>
<div class="contents">
<a href="a00042.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//{===========================================================================</span>
<a name="l00010"></a>00010 <span class="comment"></span><span class="comment">//          (C) Стас Артюхин, 9 класс, 2006</span>
<a name="l00011"></a>00011 <span class="comment">//}===========================================================================</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;TXLib.h&quot;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#if !defined (_TX_VER) || (_TX_VER &lt; 0x172a0000)</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#error Must use TXLib.h version &gt;= 1.72 to compile this.</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 <span class="comment">//============================================================================</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keywordtype">double</span>&gt;
<a name="l00022"></a>00022 <span class="keyword">struct </span>Vector
<a name="l00023"></a>00023     {
<a name="l00024"></a>00024     T x, y, z;
<a name="l00025"></a>00025 
<a name="l00026"></a>00026     Vector();
<a name="l00027"></a>00027     <span class="keyword">explicit</span> Vector (T xyz);
<a name="l00028"></a>00028     Vector (T x0, T y0, T z0);
<a name="l00029"></a>00029     };
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">typedef</span> Vector&lt;&gt; vec;
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00036"></a>00036 <span class="keyword">inline</span> Vector&lt;T&gt;::Vector() :
<a name="l00037"></a>00037     x (0),
<a name="l00038"></a>00038     y (0),
<a name="l00039"></a>00039     z (0)
<a name="l00040"></a>00040     {}
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00045"></a>00045 <span class="keyword">inline</span> Vector&lt;T&gt;::Vector (T x0, T y0, T z0) :
<a name="l00046"></a>00046     x (x0),
<a name="l00047"></a>00047     y (y0),
<a name="l00048"></a>00048     z (z0)
<a name="l00049"></a>00049     {}
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00054"></a>00054 <span class="keyword">inline</span> Vector&lt;T&gt;::Vector (T xyz) :
<a name="l00055"></a>00055     x (xyz),
<a name="l00056"></a>00056     y (xyz),
<a name="l00057"></a>00057     z (xyz)
<a name="l00058"></a>00058     {}
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00061"></a>00061 <span class="comment">// Normalization</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00064"></a>00064 <span class="keyword">inline</span> <span class="keywordtype">double</span> len (<span class="keyword">const</span> Vector&lt;T&gt;&amp; v)
<a name="l00065"></a>00065     {
<a name="l00066"></a>00066     <span class="keywordflow">return</span> sqrt (v.x*v.x + v.y*v.y + v.z*v.z);
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00070"></a>00070 <span class="keyword">inline</span> Vector&lt;T&gt; operator ! (<span class="keyword">const</span> Vector&lt;T&gt;&amp; v)
<a name="l00071"></a>00071     {
<a name="l00072"></a>00072     <span class="keywordflow">return</span> v / len (v);
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00078"></a>00078 <span class="keyword">inline</span> Vector&lt;T&gt;&amp; operator += (Vector&lt;T&gt;&amp; a, <span class="keyword">const</span> Vector&lt;T&gt;&amp; b)
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080     a.x += b.x; a.y += b.y; a.z += b.z;
<a name="l00081"></a>00081     <span class="keywordflow">return</span> a;
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00087"></a>00087 <span class="keyword">inline</span> Vector&lt;T&gt; operator + (<span class="keyword">const</span> Vector&lt;T&gt;&amp; a, <span class="keyword">const</span> Vector&lt;T&gt;&amp; b)
<a name="l00088"></a>00088     {
<a name="l00089"></a>00089     <span class="keywordflow">return</span> Vector&lt;T&gt; (a.x+b.x, a.y+b.y, a.z+b.z);
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00095"></a>00095 <span class="keyword">inline</span> Vector&lt;T&gt; operator - (<span class="keyword">const</span> Vector&lt;T&gt;&amp; a, <span class="keyword">const</span> Vector&lt;T&gt;&amp; b)
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097     <span class="keywordflow">return</span> Vector&lt;T&gt; (a.x-b.x, a.y-b.y, a.z-b.z);
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00101"></a>00101 <span class="comment">// Non-vector product</span>
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00104"></a>00104 <span class="keyword">inline</span> Vector&lt;T&gt; operator * (<span class="keyword">const</span> Vector&lt;T&gt;&amp; a, <span class="keyword">const</span> Vector&lt;T&gt;&amp; b)
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106     <span class="keywordflow">return</span> Vector&lt;T&gt; (a.x*b.x, a.y*b.y, a.z*b.z);
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00110"></a>00110 <span class="comment">// Scalar (dot) product</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00113"></a>00113 <span class="keyword">inline</span> T operator ^ (<span class="keyword">const</span> Vector&lt;T&gt;&amp; a, <span class="keyword">const</span> Vector&lt;T&gt;&amp; b)
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115     <span class="keywordflow">return</span> a.x*b.x + a.y*b.y + a.z*b.z;
<a name="l00116"></a>00116     }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;
<a name="l00121"></a>00121 <span class="keyword">inline</span> Vector&lt;T&gt; operator * (<span class="keyword">const</span> Vector&lt;T&gt;&amp; v, T2 val)
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123     <span class="keywordflow">return</span> Vector&lt;T&gt; (v.x*val, v.y*val, v.z*val);
<a name="l00124"></a>00124     }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;
<a name="l00127"></a>00127 <span class="keyword">inline</span> Vector&lt;T&gt; operator * (T2 val, <span class="keyword">const</span> Vector&lt;T&gt;&amp; v)
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129     <span class="keywordflow">return</span> v * val;
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00135"></a>00135 <span class="keyword">inline</span> Vector&lt;T&gt; operator / (<span class="keyword">const</span> Vector&lt;T&gt;&amp; v, T val)
<a name="l00136"></a>00136     {
<a name="l00137"></a>00137     <span class="keywordflow">return</span> Vector&lt;T&gt; (v.x/val, v.y/val, v.z/val);
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00143"></a>00143 <span class="keyword">inline</span> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; o, const Vector&lt;T&gt;&amp; v)
<a name="l00144"></a>00144     {
<a name="l00145"></a>00145     o &lt;&lt; <span class="stringliteral">&quot;Vector (&quot;</span> &lt;&lt; v.x &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; v.z &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;
<a name="l00146"></a>00146     <span class="keywordflow">return</span> o;
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="keyword">inline</span> <span class="keywordtype">double</span> Clamp (<span class="keywordtype">double</span> value, <span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)
<a name="l00152"></a>00152     {
<a name="l00153"></a>00153     <span class="keywordflow">return</span> (value &lt; min)? min : (value &gt; max)? max : value;
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keyword">inline</span> <span class="keywordtype">double</span> Random (<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160     <span class="keywordflow">return</span> min + (max - min) * rand() / RAND_MAX;
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="comment">//============================================================================</span>
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="keywordtype">void</span> DrawScene (<span class="keyword">const</span> vec&amp; lightPos, <span class="keywordtype">double</span> r);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 vec PhongLightning (<span class="keyword">const</span> vec&amp; p, <span class="keyword">const</span> vec&amp; N, <span class="keyword">const</span> vec&amp; V,
<a name="l00168"></a>00168                     <span class="keyword">const</span> vec&amp; lightPos, <span class="keyword">const</span> vec&amp; lightColor,
<a name="l00169"></a>00169                     <span class="keyword">const</span> vec&amp; materialColor,
<a name="l00170"></a>00170                     <span class="keyword">const</span> vec&amp; ambientColor = vec (0, 0, 0));
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="keyword">const</span> vec Bump (<span class="keyword">const</span> vec&amp; p = vec(), <span class="keywordtype">double</span> r = 0);
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="keywordtype">void</span> DrawPixel (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, Vector&lt;double&gt; color);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="keywordtype">bool</span> UseTxPixel = <span class="keyword">false</span>;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="keywordtype">int</span> main()
<a name="l00183"></a>00183     {
<a name="l00184"></a>00184     <span class="keywordtype">double</span> r = 200;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (800, 600);
<a name="l00187"></a>00187     <a class="code" href="a00081.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keyword">false</span>);
<a name="l00188"></a>00188     <a class="code" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>();
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="keyword">static</span> <span class="keywordtype">double</span> perf = <a class="code" href="a00081.htm#ga49983bddca35d531c521cf04c6c2449f" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>();
<a name="l00191"></a>00191     
<a name="l00192"></a>00192     <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (TA_CENTER);
<a name="l00193"></a>00193     <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>);
<a name="l00194"></a>00194     <a class="code" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont</a> (<span class="stringliteral">&quot;Lucida Console&quot;</span>, 15, 0);
<a name="l00195"></a>00195     <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (<a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a>()/2, <a class="code" href="a00081.htm#gaa9bb7fd84e0b9f59c96be89d70c74321" title="Возвращает высоту окна или холста.">txGetExtentY</a>()*19/20, <span class="stringliteral">&quot;Press Z, R, X, H to bump, T to use txSetPixel(), &quot;</span>
<a name="l00196"></a>00196                                                        <span class="stringliteral">&quot;ESC to exit&quot;</span>);
<a name="l00197"></a>00197     <span class="keywordflow">for</span> (<span class="keywordtype">double</span> t = <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/2; ; t += 0.1)
<a name="l00198"></a>00198         {
<a name="l00199"></a>00199         DrawScene (vec (-2*r * (1 + cos (t)),
<a name="l00200"></a>00200                         -2*r *      cos (t),
<a name="l00201"></a>00201                         +2*r *      sin (t)), r);
<a name="l00202"></a>00202         <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> ();
<a name="l00203"></a>00203 
<a name="l00204"></a>00204         <span class="keywordflow">if</span> (GetAsyncKeyState (VK_ESCAPE) &amp;&amp; GetForegroundWindow() == <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()) <span class="keywordflow">break</span>;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         <span class="comment">/* For FPS testing only: */</span>
<a name="l00207"></a>00207         
<a name="l00208"></a>00208         <span class="keywordflow">if</span> (GetAsyncKeyState (VK_SPACE)) <span class="keywordflow">continue</span>;
<a name="l00209"></a>00209         UseTxPixel = GetAsyncKeyState (<span class="charliteral">&#39;T&#39;</span>);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="keyword">static</span> <span class="keywordtype">char</span> s [128] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00212"></a>00212         sprintf (s, <span class="stringliteral">&quot;tx[Q]ueryPerformance(): %.2f. FPS %.2f. Using %s&quot;</span>,
<a name="l00213"></a>00213                     perf, <a class="code" href="a00081.htm#ga1aca71127c9986f995b2372903d65964" title="Выдает количество кадров (вызовов этой функции) в секунду.">txGetFPS</a>(), (UseTxPixel? <span class="stringliteral">&quot;txSetPixel&quot;</span> : <span class="stringliteral">&quot;direct memory access&quot;</span>));
<a name="l00214"></a>00214         SetWindowText (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), s);
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     <a class="code" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>();
<a name="l00218"></a>00218     <span class="keywordflow">return</span> 0;
<a name="l00219"></a>00219     }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 <span class="keywordtype">void</span> DrawScene (<span class="keyword">const</span> vec&amp; lightPos, <span class="keywordtype">double</span> r)
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225     <span class="keyword">const</span> vec viewPos       (   0,    0, +5*r);
<a name="l00226"></a>00226 <span class="comment">//  const vec lightPos      (-2*r, +2*r, +2*r);</span>
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="keyword">const</span> vec materialColor (0.0, 1.0, 0.0);
<a name="l00229"></a>00229     <span class="keyword">const</span> vec lightColor    (1.0, 0.7, 0.0);
<a name="l00230"></a>00230     <span class="keyword">const</span> vec ambientColor  (0.2, 0.2, 0.2);
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     <span class="keywordflow">for</span> (<span class="keywordtype">double</span> y = +r; y &gt;= -r; y--)
<a name="l00233"></a>00233     <span class="keywordflow">for</span> (<span class="keywordtype">double</span> x = -r; x &lt;= +r; x++)
<a name="l00234"></a>00234         {
<a name="l00235"></a>00235         <span class="keywordflow">if</span> (x*x + y*y &gt; r*r) <span class="keywordflow">continue</span>;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         vec p = vec (x, y, 0);
<a name="l00238"></a>00238         p = p + Bump (p, r) * 100;
<a name="l00239"></a>00239         <span class="keywordflow">if</span> (p.x*p.x + p.y*p.y &gt; r*r) { DrawPixel (x, y, vec (0)); <span class="keywordflow">continue</span>; }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241         p.z = sqrt (r*r - p.x*p.x - p.y*p.y);
<a name="l00242"></a>00242         vec N = !p + Bump (p, r);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244         vec V = !(viewPos  - p);
<a name="l00245"></a>00245         vec L = !(lightPos - p);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247         <span class="keywordtype">double</span> diffuse = N ^ L;
<a name="l00248"></a>00248         <span class="keywordflow">if</span> (diffuse &lt; 0) diffuse = 0;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250         vec Lr = 2*(N^L)*N - L;
<a name="l00251"></a>00251         <span class="keywordtype">double</span> spec = Lr ^ V;
<a name="l00252"></a>00252         <span class="keywordflow">if</span> (spec &lt; 0) spec = 0;
<a name="l00253"></a>00253         <span class="keywordtype">double</span> specular = pow (spec, 25);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         vec color = ambientColor * materialColor              +
<a name="l00256"></a>00256 
<a name="l00257"></a>00257                     diffuse      * materialColor * lightColor +
<a name="l00258"></a>00258                     specular     *                 lightColor +
<a name="l00259"></a>00259 
<a name="l00260"></a>00260                     PhongLightning (p, N, V,
<a name="l00261"></a>00261                                     vec (+2*r, -1*r,   0),
<a name="l00262"></a>00262                                     vec ( 0.5,  0.5, 0.5),
<a name="l00263"></a>00263                                     materialColor);
<a name="l00264"></a>00264                                     
<a name="l00265"></a>00265         DrawPixel (x, y, color);
<a name="l00266"></a>00266         }
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawPixel (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, Vector&lt;double&gt; color)
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273     <span class="keyword">static</span> POINT scr = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a>();
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     POINT   p   = { (int) (x + scr.x/2 + 0.5),
<a name="l00276"></a>00276                     (int) (y + scr.y/2 + 0.5) };
<a name="l00277"></a>00277 
<a name="l00278"></a>00278     RGBQUAD rgb = { (BYTE) (Clamp (color.x, 0, 1) * 255 + 0.5),
<a name="l00279"></a>00279                     (BYTE) (Clamp (color.y, 0, 1) * 255 + 0.5),
<a name="l00280"></a>00280                     (BYTE) (Clamp (color.z, 0, 1) * 255 + 0.5) };
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="keywordflow">if</span> (UseTxPixel)
<a name="l00283"></a>00283          <a class="code" href="a00081.htm#gafafd861ab7dc599b2e68b258b6727c85" title="Рисует пиксель (точку на экране).">txSetPixel</a> (p.x, p.y, <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (rgb.rgbRed, rgb.rgbGreen, rgb.rgbBlue));
<a name="l00284"></a>00284     <span class="keywordflow">else</span>
<a name="l00285"></a>00285          *(<a class="code" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory</a>() + p.x + (-p.y + scr.y) * scr.x) = rgb;
<a name="l00286"></a>00286     }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 vec PhongLightning (<span class="keyword">const</span> vec&amp; p, <span class="keyword">const</span> vec&amp; N, <span class="keyword">const</span> vec&amp; V,
<a name="l00291"></a>00291                     <span class="keyword">const</span> vec&amp; lightPos, <span class="keyword">const</span> vec&amp; lightColor,
<a name="l00292"></a>00292                     <span class="keyword">const</span> vec&amp; materialColor,
<a name="l00293"></a>00293                     <span class="keyword">const</span> vec&amp; ambientColor)
<a name="l00294"></a>00294     {
<a name="l00295"></a>00295     vec L = !(lightPos - p);
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     <span class="keywordtype">double</span> diffuse = N ^ L;
<a name="l00298"></a>00298     <span class="keywordflow">if</span> (diffuse &lt; 0) <span class="keywordflow">return</span> ambientColor;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     vec Lr = 2*diffuse*N - L;
<a name="l00301"></a>00301     <span class="keywordtype">double</span> specular = pow (Lr ^ V, 25);
<a name="l00302"></a>00302 
<a name="l00303"></a>00303     <span class="keywordflow">return</span> diffuse  * lightColor * materialColor +
<a name="l00304"></a>00304            specular * lightColor +
<a name="l00305"></a>00305            ambientColor;
<a name="l00306"></a>00306     }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="keyword">const</span> vec Bump (<span class="keyword">const</span> vec&amp; p, <span class="keywordtype">double</span> r)
<a name="l00311"></a>00311     {
<a name="l00312"></a>00312     <span class="keywordtype">bool</span> bXY  = (GetAsyncKeyState (<span class="charliteral">&#39;X&#39;</span>) != 0),
<a name="l00313"></a>00313          bXY2 = (GetAsyncKeyState (<span class="charliteral">&#39;H&#39;</span>) != 0),
<a name="l00314"></a>00314          bZ   = (GetAsyncKeyState (<span class="charliteral">&#39;Z&#39;</span>) != 0),
<a name="l00315"></a>00315          bRnd = (GetAsyncKeyState (<span class="charliteral">&#39;R&#39;</span>) != 0);
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <span class="keywordflow">if</span> (!bXY &amp;&amp; !bXY2 &amp;&amp; !bZ &amp;&amp; !bRnd) <span class="keywordflow">return</span> vec (0);
<a name="l00318"></a>00318 
<a name="l00319"></a>00319     <span class="keyword">const</span> <span class="keywordtype">int</span> sz = 100;
<a name="l00320"></a>00320     <span class="keyword">static</span> vec env[sz][sz] = {};
<a name="l00321"></a>00321 
<a name="l00322"></a>00322     <span class="keyword">static</span> <span class="keywordtype">bool</span> init = <span class="keyword">false</span>;
<a name="l00323"></a>00323     <span class="keywordflow">if</span> (!init)
<a name="l00324"></a>00324         {
<a name="l00325"></a>00325         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; sz; y++) <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0; x &lt; sz; x++)
<a name="l00326"></a>00326             env[y][x] = vec (Random (-1, +1), Random (-1, +1), Random (-1, +1));
<a name="l00327"></a>00327             
<a name="l00328"></a>00328         init = <span class="keyword">true</span>;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331     vec bump (0);
<a name="l00332"></a>00332 
<a name="l00333"></a>00333     <span class="keywordflow">if</span> (bXY)  bump += p * ((sin (p.x/4) + cos (p.y/4)) / 4 + 1.5) / 5000.0;
<a name="l00334"></a>00334     <span class="keywordflow">if</span> (bXY2) bump += p * ((cos (p.x/4) + sin (p.y/4)) / 2 + 1.0) / 3000.0;
<a name="l00335"></a>00335     <span class="keywordflow">if</span> (bZ)   bump += p * ( sin (p.z*p.z / 500)        / 2 + 1.5) / 5000.0;
<a name="l00336"></a>00336     <span class="keywordflow">if</span> (bRnd) bump += env [(unsigned) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (p.y + r) % sz] [(unsigned) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (p.x + r) % sz] / 100.0;
<a name="l00337"></a>00337 
<a name="l00338"></a>00338     <span class="keywordflow">return</span> bump;
<a name="l00339"></a>00339     }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00042.htm">PhongDemo.cpp</a>      </li>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Thu Aug 13 2020 00:46:49. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
