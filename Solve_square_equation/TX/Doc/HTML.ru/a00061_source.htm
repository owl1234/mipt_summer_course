<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл TXWave.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00061.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>TXWave.h</h1>  </div>
</div>
<div class="contents">
<a href="a00061.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//{================================================================================================================</span>
<a name="l00004"></a>00004 <span class="comment"></span><span class="comment">//  @mainpage</span>
<a name="l00020"></a>00020 <span class="comment"></span><span class="comment">//              $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt; $</span>
<a name="l00021"></a>00021 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00024"></a>00024 <span class="comment"></span><span class="comment">//}================================================================================================================</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef __TXWAVE_INCLUDED</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define __TXWAVE_INCLUDED</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">//=================================================================================================================</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;TXLib.h&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;limits.h&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#if !(defined (_TX_VER) &amp;&amp; (_TX_VER &gt;= 0x173a0105))</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">    #error Must use TXLib.h version &gt;= 1.73a, revision &gt;= 105 to compile TXWave.</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span>
<a name="l00038"></a>00038 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (push)</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4068)             // unknown pragma</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4200)             // nonstandard extension used : zero-sized array in struct/union</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 28159)            // Consider using &#39;GetTickCount64&#39; instead of &#39;GetTickCount&#39;</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="comment">//=================================================================================================================</span>
<a name="l00046"></a>00046 
<a name="l00049"></a>00049 <span class="keyword">namespace </span>{ <span class="keyword">namespace </span>TX {
<a name="l00050"></a>00050 
<a name="l00053"></a>00053 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00058"></a>00058 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00059"></a>00059 
<a name="l00060"></a><a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0">00060</a> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a> = 44.100;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00071"></a>00071 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00072"></a>00072 
<a name="l00073"></a><a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea">00073</a> <span class="keyword">const</span> WAVEFORMATEX <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a> = { WAVE_FORMAT_PCM, 2, (DWORD) (<a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>*1000),
<a name="l00074"></a>00074                                                         (DWORD) (<a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>*1000) * 2*16/8, 2*16/8, 16 };
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00082"></a>00082 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32">00084</a> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32" title="Максимальная громкость в txWaveSample_t, согласно формату txWaveFormat.">txWaveVolMax</a> = ((1 &lt;&lt; <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wBitsPerSample) - 1) / 2.0;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00106"></a>00106 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="a00018.htm">00108</a> <span class="keyword">union </span><a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>
<a name="l00109"></a>00109     {
<a name="l00111"></a>00111 
<a name="l00112"></a><a class="code" href="a00018.htm#a8f705a1410c086640336f5d4342a51e3">00112</a>     <span class="keywordtype">short</span> ch[2];
<a name="l00113"></a>00113 
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="a00018.htm#ac83cc8587d5978f4c8224febf3b903b1">00116</a>     <span class="keyword">inline</span> operator short*() { <span class="keywordflow">return</span> ch; }
<a name="l00117"></a>00117     };
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00145"></a>00145 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00146"></a>00146 
<a name="l00147"></a><a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe">00147</a> <span class="keyword">typedef</span> std::vector &lt;txWaveSample_t&gt; <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>;
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00213"></a>00213 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 HWAVEOUT <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (<span class="keywordtype">int</span> timeMs = -INT_MAX,
<a name="l00216"></a>00216                     <span class="keywordtype">double</span> freqL =  0, <span class="keywordtype">double</span> volL = 50,
<a name="l00217"></a>00217                     <span class="keywordtype">double</span> freqR = -1, <span class="keywordtype">double</span> volR = -1,
<a name="l00218"></a>00218                     <span class="keywordtype">int</span> loops = 1,
<a name="l00219"></a>00219                     <span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data = <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>());
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00263"></a>00263 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 HWAVEOUT <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (<span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">int</span> loops = 1);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00280"></a>00280 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00281"></a>00281 
<a name="l00282"></a><a class="code" href="a00079.htm#ga0f44cb31e6fab55ba409a510c7346793">00282</a> <span class="keyword">typedef</span> <span class="keywordtype">bool</span> <a class="code" href="a00079.htm#ga0f44cb31e6fab55ba409a510c7346793" title="Тип функции-монитора для функции txWaveIn().">MonitorProc_t</a> (HWAVEIN waveIn, <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">void</span>* userData);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00319"></a>00319 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00322"></a>00322 <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="a00079.htm#ga034e9fc739e3a23cc7ff49fbe7ab8205" title="Функция-монитор, регулярно вызывающаяся при записи звука.">MonitorProc</a> (HWAVEIN waveIn, <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">void</span>* userData);
<a name="l00323"></a>00323 <span class="preprocessor">#endif</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>
<a name="l00325"></a>00325 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00351"></a>00351 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> <a class="code" href="a00079.htm#ga650c6862cf9d0d2e8ab6c8c43e59be18" title="Записывает звук со звуковой карты.">txWaveIn</a> (<span class="keywordtype">int</span> timeMs,
<a name="l00354"></a>00354                        <a class="code" href="a00079.htm#ga0f44cb31e6fab55ba409a510c7346793" title="Тип функции-монитора для функции txWaveIn().">MonitorProc_t</a>* monitorProc = NULL, <span class="keywordtype">void</span>* monitorData = NULL,
<a name="l00355"></a>00355                        <span class="keywordtype">unsigned</span> frameTime = 0);
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00378"></a>00378 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="a00079.htm#gab571deca09d5854eff03adb4a906e378" title="Возвращает текущую позицию воспроизведения или записи.">txWaveGetPosition</a> (<span class="keywordtype">void</span>* wave);
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00402"></a>00402 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> <a class="code" href="a00079.htm#ga74e32845b5d8f9a538b2c9c1d5c27e35" title="Загружает звуковые данные из WAV-файла.">txWaveLoadWav</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[]);
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00421"></a>00421 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 <span class="keywordtype">bool</span> <a class="code" href="a00079.htm#gaf4acf7c838bf10514034eaebffe914bc" title="Сохраняет звуковые данные в WAV-файле.">txWaveSaveWav</a> (<span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keyword">const</span> <span class="keywordtype">char</span> filename[]);
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00440"></a>00440 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00441"></a>00441 
<a name="l00442"></a><a class="code" href="a00080.htm#gadaab2541529e020dfd4059094eff16bb">00442</a> <span class="preprocessor">#define CALLOC( type, size )  ( (type*) calloc ((size), sizeof (type)) )</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span>
<a name="l00444"></a>00444 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00456"></a>00456 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00457"></a>00457 
<a name="l00458"></a><a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf">00458</a> <span class="preprocessor">#define FREE( ptr )  ( free (ptr), (ptr) = NULL )</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span>
<a name="l00460"></a>00460 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00461"></a>00461 
<a name="l00464"></a>00464 }};  <span class="comment">// namespace TX; namespace</span>
<a name="l00465"></a>00465 
<a name="l00468"></a>00468 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00482"></a>00482 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00483"></a>00483 
<a name="l00484"></a><a class="code" href="a00080.htm#gab73db78e05652eca05c7efd4768e98ef">00484</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>* <a class="code" href="a00080.htm#gab73db78e05652eca05c7efd4768e98ef" title="Выделяет блок динамической памяти через new с обнулением его содержимого перед вызовом конструктора...">operator new </a>(<span class="keywordtype">size_t</span> size, <span class="keywordtype">int</span> <span class="comment">/* = 0 */</span>) { return ::memset (::<span class="keyword">new</span> <span class="keywordtype">char</span> [size], 0, size); }
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00501"></a>00501 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00502"></a>00502 
<a name="l00503"></a><a class="code" href="a00080.htm#gab6432a66009d36b85175c7720a78b1cc">00503</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>* <a class="code" href="a00080.htm#gab73db78e05652eca05c7efd4768e98ef" title="Выделяет блок динамической памяти через new с обнулением его содержимого перед вызовом конструктора...">operator new </a>(<span class="keywordtype">size_t</span> size, <span class="keywordtype">size_t</span> items, <span class="keywordtype">int</span> <span class="comment">/* = 0 */</span>) { return ::new (0) <span class="keywordtype">char</span> [size * items];         }
<a name="l00504"></a>00504 
<a name="l00507"></a>00507 <span class="keyword">namespace </span>{ <span class="keyword">namespace </span>TX {
<a name="l00508"></a>00508 
<a name="l00511"></a>00511 <span class="comment">//{================================================================================================================</span>
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 <span class="keyword">namespace </span>Win32
<a name="l00514"></a>00514 {
<a name="l00515"></a>00515 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutOpen,            (HWAVEOUT* wave, UINT device, <span class="keyword">const</span> WAVEFORMATEX* format,
<a name="l00516"></a>00516                                                            DWORD callback, DWORD callbackData, DWORD flags));
<a name="l00517"></a>00517 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutPrepareHeader,   (HWAVEOUT wave, WAVEHDR* header, UINT size));
<a name="l00518"></a>00518 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutUnprepareHeader, (HWAVEOUT wave, WAVEHDR* header, UINT size));
<a name="l00519"></a>00519 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutWrite,           (HWAVEOUT wave, WAVEHDR* header, UINT size));
<a name="l00520"></a>00520 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutReset,           (HWAVEOUT wave));
<a name="l00521"></a>00521 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutClose,           (HWAVEOUT wave));
<a name="l00522"></a>00522 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutBreakLoop,       (HWAVEOUT wave));
<a name="l00523"></a>00523 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveOutGetPosition,     (HWAVEOUT wave, MMTIME* time, UINT size));
<a name="l00524"></a>00524 
<a name="l00525"></a>00525 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInOpen,             (HWAVEIN* wave, UINT device, <span class="keyword">const</span> WAVEFORMATEX* format,
<a name="l00526"></a>00526                                                            DWORD callback, DWORD callbackData, DWORD flags));
<a name="l00527"></a>00527 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInPrepareHeader,    (HWAVEIN wave, WAVEHDR* header, UINT size));
<a name="l00528"></a>00528 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInUnprepareHeader,  (HWAVEIN wave, WAVEHDR* header, UINT size));
<a name="l00529"></a>00529 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInAddBuffer,        (HWAVEIN wave, WAVEHDR* header, UINT size));
<a name="l00530"></a>00530 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInStart,            (HWAVEIN wave));
<a name="l00531"></a>00531 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInStop,             (HWAVEIN wave));
<a name="l00532"></a>00532 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInReset,            (HWAVEIN wave));
<a name="l00533"></a>00533 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInClose,            (HWAVEIN wave));
<a name="l00534"></a>00534 _TX_DLLIMPORT (<span class="stringliteral">&quot;WinMM&quot;</span>, MMRESULT, waveInGetPosition,      (HWAVEIN wave, MMTIME* time, UINT size));
<a name="l00535"></a>00535 }
<a name="l00536"></a>00536 
<a name="l00537"></a>00537 <span class="comment">//}================================================================================================================</span>
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 <span class="preprocessor">#if defined (_GCC_VER) &amp;&amp; (_GCC_VER &lt; 530)</span>
<a name="l00540"></a>00540 <span class="preprocessor"></span><span class="preprocessor">#pragma GCC system_header</span>
<a name="l00541"></a>00541 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00542"></a>00542 <span class="preprocessor"></span>
<a name="l00543"></a>00543 <span class="keywordtype">int</span> _txWaveInit();
<a name="l00544"></a>00544 
<a name="l00545"></a>00545 <span class="keywordtype">int</span> _txWaveInitialized = _txWaveInit();
<a name="l00546"></a>00546 
<a name="l00547"></a>00547 <span class="keywordtype">int</span> _txWaveInit()
<a name="l00548"></a>00548     {
<a name="l00549"></a>00549     assert (<span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>)      == <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nBlockAlign);
<a name="l00550"></a>00550     assert (<a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nBlockAlign     == <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wBitsPerSample/8 * <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nChannels);
<a name="l00551"></a>00551     assert (<a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nAvgBytesPerSec == <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nSamplesPerSec   * <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nBlockAlign);
<a name="l00552"></a>00552 
<a name="l00553"></a>00553     (void) _txWaveInitialized;
<a name="l00554"></a>00554     <span class="keywordflow">return</span> 1;
<a name="l00555"></a>00555     }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00558"></a>00558 
<a name="l00559"></a><a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299">00559</a> HWAVEOUT <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (<span class="keywordtype">int</span> timeMs <span class="comment">/* = -INT_MAX */</span>,
<a name="l00560"></a>00560                     <span class="keywordtype">double</span> freqL <span class="comment">/* =  0 */</span>, <span class="keywordtype">double</span> volL <span class="comment">/* = 50 */</span>,
<a name="l00561"></a>00561                     <span class="keywordtype">double</span> freqR <span class="comment">/* = -1 */</span>, <span class="keywordtype">double</span> volR <span class="comment">/* = -1 */</span>,
<a name="l00562"></a>00562                     <span class="keywordtype">int</span> loops <span class="comment">/* = 1 */</span>,
<a name="l00563"></a>00563                     <span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data <span class="comment">/* = txWaveData_t() */</span>)
<a name="l00564"></a>00564     {
<a name="l00565"></a>00565     <span class="keyword">static</span> HWAVEOUT waveOut = NULL;
<a name="l00566"></a>00566     <span class="keyword">static</span> WAVEHDR  waveHdr[8] = {};
<a name="l00567"></a>00567 
<a name="l00568"></a>00568     <span class="keyword">static</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> phase[2] = {};
<a name="l00569"></a>00569 
<a name="l00570"></a>00570     <span class="keywordtype">int</span> time0 = GetTickCount();
<a name="l00571"></a>00571 
<a name="l00572"></a>00572     <span class="comment">// Check the params</span>
<a name="l00573"></a>00573 
<a name="l00574"></a>00574     <span class="keywordflow">if</span> (freqR &lt; 0) freqR = freqL;
<a name="l00575"></a>00575     <span class="keywordflow">if</span> (volR  &lt; 0) volR  = volL;
<a name="l00576"></a>00576 
<a name="l00577"></a>00577     <span class="keywordflow">if</span> (loops == 1) loops = 0;
<a name="l00578"></a>00578 
<a name="l00579"></a>00579     <span class="comment">// Initialize the wave device</span>
<a name="l00580"></a>00580 
<a name="l00581"></a>00581     <span class="keywordflow">if</span> (!waveOut)
<a name="l00582"></a>00582         {
<a name="l00583"></a>00583         Win32::waveOutOpen (&amp;waveOut, WAVE_MAPPER, &amp;<a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>, 0, 0, 0) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00584"></a>00584         <span class="keywordflow">if</span> (!waveOut) <span class="keywordflow">return</span> NULL;
<a name="l00585"></a>00585         }
<a name="l00586"></a>00586 
<a name="l00587"></a>00587     <span class="comment">// Prepare and start the sound</span>
<a name="l00588"></a>00588 
<a name="l00589"></a>00589     <span class="keywordflow">if</span> (timeMs &amp;&amp; (freqL &gt; 0 || freqR &gt; 0 || data.size()))
<a name="l00590"></a>00590         {
<a name="l00591"></a>00591         <span class="comment">// Prepare the WAVEHDR</span>
<a name="l00592"></a>00592 
<a name="l00593"></a>00593         WAVEHDR wav = {};
<a name="l00594"></a>00594 
<a name="l00595"></a>00595         <span class="keywordtype">unsigned</span> size = (unsigned) data.size();
<a name="l00596"></a>00596         <span class="keywordflow">if</span> ((freqL &gt; 0 &amp;&amp; volL &gt; 0) || (freqR &gt; 0 &amp;&amp; volR &gt; 0)) size = <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (abs (timeMs) * <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>);
<a name="l00597"></a>00597 
<a name="l00598"></a>00598         wav.dwBufferLength = (unsigned) (size * <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>));
<a name="l00599"></a>00599         wav.lpData = (<span class="keywordtype">char</span>*) malloc (wav.dwBufferLength); assert (wav.lpData);
<a name="l00600"></a>00600 
<a name="l00601"></a>00601         wav.dwFlags = loops? (WHDR_BEGINLOOP | WHDR_ENDLOOP) : 0;
<a name="l00602"></a>00602         wav.dwLoops = loops;
<a name="l00603"></a>00603 
<a name="l00604"></a>00604         <span class="comment">// Copy raw data</span>
<a name="l00605"></a>00605 
<a name="l00606"></a>00606         <span class="keywordtype">size_t</span> szPrefill = <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (size, data.size()) * <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608         <span class="keywordflow">if</span> (szPrefill) memcpy (wav.lpData, &amp;data[0], szPrefill);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610         <span class="comment">// Add harmonic data. All values premultiplied by 360 and converted to integers.</span>
<a name="l00611"></a>00611 
<a name="l00612"></a>00612         <span class="keywordflow">if</span> (freqL &gt; 0 || freqR &gt; 0)
<a name="l00613"></a>00613             {
<a name="l00614"></a>00614             <span class="keywordtype">long</span> <span class="keywordtype">long</span> time    =   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (360 * abs (timeMs) / 1000.0),
<a name="l00615"></a>00615                       freq[2] = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (360 * freqL),
<a name="l00616"></a>00616                                   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (360 * freqR) },
<a name="l00617"></a>00617                       vol [2] = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (360 * volL / 101.0  * (<span class="keywordtype">int</span>) <a class="code" href="a00079.htm#ga5673b664b39beb2afdac5a68ea9dcf32" title="Максимальная громкость в txWaveSample_t, согласно формату txWaveFormat.">txWaveVolMax</a>),
<a name="l00618"></a>00618                                   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (360 * volR / 101.0  * (<span class="keywordtype">int</span>) txWaveVolMax) };
<a name="l00619"></a>00619 
<a name="l00620"></a>00620             <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> sinTab[91] = {  0,   6,  13,  19,  25,  31,  38,  44,  50,  56,
<a name="l00621"></a>00621                                             63,  69,  75,  81,  87,  93,  99, 105, 111, 117,
<a name="l00622"></a>00622                                            123, 129, 135, 141, 146, 152, 158, 163, 169, 175,
<a name="l00623"></a>00623                                            180, 185, 191, 196, 201, 206, 212, 217, 222, 227,
<a name="l00624"></a>00624                                            231, 236, 241, 246, 250, 255, 259, 263, 268, 272,
<a name="l00625"></a>00625                                            276, 280, 284, 288, 291, 295, 298, 302, 305, 309,
<a name="l00626"></a>00626                                            312, 315, 318, 321, 324, 326, 329, 331, 334, 336,
<a name="l00627"></a>00627                                            338, 340, 342, 344, 346, 348, 349, 351, 352, 353,
<a name="l00628"></a>00628                                            355, 356, 356, 357, 358, 359, 359, 360, 360, 360, 360 };
<a name="l00629"></a>00629 
<a name="l00630"></a>00630             <a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>* buf = (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>*) wav.lpData;
<a name="l00631"></a>00631 
<a name="l00632"></a>00632             #pragma GCC diagnostic ignored <span class="stringliteral">&quot;-Wconversion&quot;</span>
<a name="l00633"></a>00633 
<a name="l00634"></a>00634             #define MAKEDATA_(chan)                                                            \
<a name="l00635"></a>00635                 {                                                                              \
<a name="l00636"></a>00636                 <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; size; i++)                                            \
<a name="l00637"></a>00637                     {                                                                          \
<a name="l00638"></a>00638                     <span class="keywordtype">int</span> ch = (i &lt; szPrefill)? buf[i].ch[chan] * 129600 : 0;                    \
<a name="l00639"></a>00639                                                                                                \
<a name="l00640"></a>00640                     <span class="keywordtype">int</span> t  = (phase[chan] + freq[chan] * time * i/size) / 360 % 360;           \
<a name="l00641"></a>00641                                                                                                \
<a name="l00642"></a>00642                     <span class="keywordtype">int</span> sign = +1;                                                             \
<a name="l00643"></a>00643                     <span class="keywordflow">if</span> (t &gt;= 180) { t = t - 180; sign = -1; }                                  \
<a name="l00644"></a>00644                     <span class="keywordflow">if</span> (t &gt;=  90) { t = 180 - t; }                                             \
<a name="l00645"></a>00645                                                                                                \
<a name="l00646"></a>00646                     assert (0 &lt;= t &amp;&amp; t &lt; (<span class="keywordtype">int</span>) <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (sinTab));                             \
<a name="l00647"></a>00647                                                                                                \
<a name="l00648"></a>00648                     buf[i].<a class="code" href="a00018.htm#a8f705a1410c086640336f5d4342a51e3" title="Данные каналов: [0] - левый, [1] - правый">ch</a>[chan] = (short) ((ch + vol[chan] * sign * sinTab [t]) / 129600); \
<a name="l00649"></a>00649                     }                                                                          \
<a name="l00650"></a>00650                                                                                                \
<a name="l00651"></a>00651                 phase[chan] += freq[chan] * time;                                              \
<a name="l00652"></a>00652                 }
<a name="l00653"></a>00653 
<a name="l00654"></a>00654             <span class="keywordflow">if</span> (volL &gt; 0 &amp;&amp; freqL &gt; 0) MAKEDATA_ (0);
<a name="l00655"></a>00655             <span class="keywordflow">if</span> (volR &gt; 0 &amp;&amp; freqR &gt; 0) MAKEDATA_ (1);
<a name="l00656"></a>00656 
<a name="l00657"></a>00657 <span class="preprocessor">            #undef MAKEDATA_</span>
<a name="l00658"></a>00658 <span class="preprocessor"></span><span class="preprocessor">            #pragma GCC diagnostic warning &quot;-Wconversion&quot;</span>
<a name="l00659"></a>00659 <span class="preprocessor"></span>            }
<a name="l00660"></a>00660 
<a name="l00661"></a>00661         <span class="comment">// Find free WAVEHDR</span>
<a name="l00662"></a>00662 
<a name="l00663"></a>00663         WAVEHDR* next = NULL;
<a name="l00664"></a>00664 
<a name="l00665"></a>00665         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; ; i = (i+1) % <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr), Sleep (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>))
<a name="l00666"></a>00666             {
<a name="l00667"></a>00667             <span class="keywordflow">if</span> (Win32::waveOutUnprepareHeader (waveOut, &amp;waveHdr[i], <span class="keyword">sizeof</span> (WAVEHDR)) == MMSYSERR_NOERROR)
<a name="l00668"></a>00668                 {
<a name="l00669"></a>00669                 next = &amp;waveHdr[i];  <span class="comment">// Free WAVEHDR found</span>
<a name="l00670"></a>00670                 <a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf" title="Освобождает динамическую память и обнуляет указатель на нее.">FREE</a> (next-&gt;lpData);
<a name="l00671"></a>00671                 <span class="keywordflow">break</span>;
<a name="l00672"></a>00672                 }
<a name="l00673"></a>00673 
<a name="l00674"></a>00674             <span class="keywordflow">if</span> (timeMs &lt; 0 &amp;&amp; GetTickCount() - time0 &lt; (<span class="keywordtype">unsigned</span>) abs (timeMs))
<a name="l00675"></a>00675                 <span class="keywordflow">break</span>;
<a name="l00676"></a>00676             }
<a name="l00677"></a>00677 
<a name="l00678"></a>00678         <span class="comment">// Start the sound</span>
<a name="l00679"></a>00679 
<a name="l00680"></a>00680         <span class="keywordflow">if</span> (next)
<a name="l00681"></a>00681             {
<a name="l00682"></a>00682             std::swap (wav, *next);  <span class="comment">// Put the data prepared to queue</span>
<a name="l00683"></a>00683 
<a name="l00684"></a>00684             Win32::waveOutPrepareHeader (waveOut, next, <span class="keyword">sizeof</span> (WAVEHDR)) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00685"></a>00685             Win32::waveOutWrite         (waveOut, next, <span class="keyword">sizeof</span> (WAVEHDR)) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00686"></a>00686 
<a name="l00687"></a>00687             Win32::waveOutBreakLoop     (waveOut)                         == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00688"></a>00688             }
<a name="l00689"></a>00689         }
<a name="l00690"></a>00690 
<a name="l00691"></a>00691     <span class="comment">// Wait and stop the sound</span>
<a name="l00692"></a>00692 
<a name="l00693"></a>00693     <span class="keywordflow">if</span> (timeMs &lt;= 0)
<a name="l00694"></a>00694         {
<a name="l00695"></a>00695         <span class="keywordflow">if</span> (!timeMs) Win32::waveOutReset (waveOut) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;  <span class="comment">// Immediate stop</span>
<a name="l00696"></a>00696 
<a name="l00697"></a>00697         <span class="comment">// Wait for sound to stop</span>
<a name="l00698"></a>00698 
<a name="l00699"></a>00699         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr); i++, Sleep (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>))
<a name="l00700"></a>00700             {
<a name="l00701"></a>00701             <span class="keywordflow">if</span> (GetTickCount() - time0 &gt;= (unsigned) abs (timeMs)) <span class="keywordflow">break</span>;
<a name="l00702"></a>00702 
<a name="l00703"></a>00703             <span class="keywordflow">if</span> ((waveHdr[i].dwFlags &amp; WHDR_PREPARED) &amp;&amp; !(waveHdr[i].dwFlags &amp; WHDR_DONE)) { i--; <span class="keywordflow">continue</span>; }
<a name="l00704"></a>00704             }
<a name="l00705"></a>00705 
<a name="l00706"></a>00706         Win32::waveOutReset (waveOut) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00707"></a>00707 
<a name="l00708"></a>00708         <span class="comment">// Free the buffers</span>
<a name="l00709"></a>00709 
<a name="l00710"></a>00710         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr); i++)
<a name="l00711"></a>00711             {
<a name="l00712"></a>00712             Win32::waveOutUnprepareHeader (waveOut, &amp;waveHdr[i], <span class="keyword">sizeof</span> (WAVEHDR));
<a name="l00713"></a>00713             <a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf" title="Освобождает динамическую память и обнуляет указатель на нее.">FREE</a> (waveHdr[i].lpData);
<a name="l00714"></a>00714             }
<a name="l00715"></a>00715 
<a name="l00716"></a>00716         <span class="comment">// Close the wave device</span>
<a name="l00717"></a>00717 
<a name="l00718"></a>00718         Win32::waveOutClose (waveOut) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00719"></a>00719         waveOut = NULL;
<a name="l00720"></a>00720         }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722     <span class="keywordflow">return</span> waveOut;
<a name="l00723"></a>00723     }
<a name="l00724"></a>00724 
<a name="l00725"></a>00725 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00726"></a>00726 
<a name="l00727"></a><a class="code" href="a00079.htm#gaa677fdf2c2b515ad6faafc740a4ccf7e">00727</a> <span class="keyword">inline</span> HWAVEOUT <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (<span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keywordtype">int</span> loops <span class="comment">/* = 1 */</span>)
<a name="l00728"></a>00728     {
<a name="l00729"></a>00729     <span class="keywordflow">return</span> <a class="code" href="a00079.htm#ga5381d120d82c043349dc9775f18a5299" title="Проигрывает звук через звуковую карту.">txWaveOut</a> (-INT_MAX, 0,0,0,0, loops, data);
<a name="l00730"></a>00730     }
<a name="l00731"></a>00731 
<a name="l00732"></a>00732 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00733"></a>00733 
<a name="l00734"></a>00734 <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> <a class="code" href="a00079.htm#ga650c6862cf9d0d2e8ab6c8c43e59be18" title="Записывает звук со звуковой карты.">txWaveIn</a> (<span class="keywordtype">int</span> timeMs,
<a name="l00735"></a>00735                        <a class="code" href="a00079.htm#ga0f44cb31e6fab55ba409a510c7346793" title="Тип функции-монитора для функции txWaveIn().">MonitorProc_t</a> monitorProc <span class="comment">/* = NULL */</span>, <span class="keywordtype">void</span>* userData <span class="comment">/* = NULL */</span>,
<a name="l00736"></a>00736                        <span class="keywordtype">unsigned</span> frameTime <span class="comment">/* = 0 */</span>)
<a name="l00737"></a>00737     {
<a name="l00738"></a>00738     <span class="keyword">static</span> HWAVEIN waveIn = NULL;
<a name="l00739"></a>00739     <span class="keyword">static</span> WAVEHDR waveHdr[2] = {};
<a name="l00740"></a>00740 
<a name="l00741"></a>00741     <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> data;
<a name="l00742"></a>00742 
<a name="l00743"></a>00743     <span class="keywordtype">int</span> time0 = GetTickCount();
<a name="l00744"></a>00744 
<a name="l00745"></a>00745     <span class="comment">// Initialize the wave device</span>
<a name="l00746"></a>00746 
<a name="l00747"></a>00747     <span class="keywordflow">if</span> (!waveIn)
<a name="l00748"></a>00748         {
<a name="l00749"></a>00749         Win32::waveInOpen (&amp;waveIn, WAVE_MAPPER, &amp;<a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>, 0, 0, 0) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00750"></a>00750         <span class="keywordflow">if</span> (!waveIn) <span class="keywordflow">return</span> data;
<a name="l00751"></a>00751         }
<a name="l00752"></a>00752 
<a name="l00753"></a>00753     <span class="comment">// Calculate the sizes</span>
<a name="l00754"></a>00754 
<a name="l00755"></a>00755     <span class="keywordflow">if</span> (!frameTime) frameTime = 100;  <span class="comment">// Default frame time</span>
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     <span class="keywordtype">unsigned</span> size  = <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (abs (timeMs) * <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>);
<a name="l00758"></a>00758     <span class="keywordtype">unsigned</span> frame = <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (frameTime    * <a class="code" href="a00079.htm#ga7314dc16e153be14dc298cb9cac8fbc0" title="Скорость аудиопотока для TXWave в семплах на 1 миллисекунду.">txWaveSampleRate</a>);
<a name="l00759"></a>00759 
<a name="l00760"></a>00760     <span class="comment">// Feed the recording queue with buffers</span>
<a name="l00761"></a>00761 
<a name="l00762"></a>00762     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr); i++)
<a name="l00763"></a>00763         {
<a name="l00764"></a>00764         waveHdr[i].dwBufferLength = frame * (unsigned) <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>);
<a name="l00765"></a>00765         waveHdr[i].lpData = (<span class="keywordtype">char</span>*) malloc (waveHdr[i].dwBufferLength); assert (waveHdr[i].lpData);
<a name="l00766"></a>00766 
<a name="l00767"></a>00767         Win32::waveInPrepareHeader (waveIn, &amp;waveHdr[i], <span class="keyword">sizeof</span> (waveHdr[i])) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00768"></a>00768         Win32::waveInAddBuffer     (waveIn, &amp;waveHdr[i], <span class="keyword">sizeof</span> (waveHdr[i])) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00769"></a>00769         }
<a name="l00770"></a>00770 
<a name="l00771"></a>00771     <span class="comment">// Start the recording</span>
<a name="l00772"></a>00772 
<a name="l00773"></a>00773     data.resize (size);
<a name="l00774"></a>00774     <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> (data) .swap (data);  <span class="comment">// C++11: data.shrink_to_fit();</span>
<a name="l00775"></a>00775     data.resize (0);
<a name="l00776"></a>00776 
<a name="l00777"></a>00777     Win32::waveInStart (waveIn) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00778"></a>00778 
<a name="l00779"></a>00779     <span class="comment">// Recording loop</span>
<a name="l00780"></a>00780 
<a name="l00781"></a>00781     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; ; i = (i+1) % <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr), Sleep (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>))
<a name="l00782"></a>00782         {
<a name="l00783"></a>00783         WAVEHDR* wav = &amp;waveHdr[i];
<a name="l00784"></a>00784 
<a name="l00785"></a>00785         <span class="keywordflow">if</span> (!(wav-&gt;dwFlags &amp; WHDR_DONE)) <span class="keywordflow">continue</span>;  <span class="comment">// Buffer is not done yet</span>
<a name="l00786"></a>00786 
<a name="l00787"></a>00787         <span class="comment">// Process the buffer recorded</span>
<a name="l00788"></a>00788 
<a name="l00789"></a>00789         <span class="keywordtype">size_t</span> pos = data.size();
<a name="l00790"></a>00790         data.resize (pos + <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (wav-&gt;dwBytesRecorded / sizeof (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>), size - pos));
<a name="l00791"></a>00791 
<a name="l00792"></a>00792         memcpy (&amp;data[0] + pos, wav-&gt;lpData, (data.size() - pos) * <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>));
<a name="l00793"></a>00793 
<a name="l00794"></a>00794         <span class="keywordflow">if</span> (monitorProc &amp;&amp; !monitorProc (waveIn, data, userData)) <span class="keywordflow">break</span>;             <span class="comment">// Monitor breaks the recording</span>
<a name="l00795"></a>00795 
<a name="l00796"></a>00796         <span class="keywordflow">if</span> (timeMs &lt; 0 &amp;&amp; GetTickCount() - time0 &gt;= (unsigned) abs (timeMs)) <span class="keywordflow">break</span>;  <span class="comment">// Time is over</span>
<a name="l00797"></a>00797 
<a name="l00798"></a>00798         <span class="keywordflow">if</span> (data.size() == size) <span class="keywordflow">break</span>;                                              <span class="comment">// All data recorded</span>
<a name="l00799"></a>00799 
<a name="l00800"></a>00800         <span class="comment">// Re-feed the queue with the buffer</span>
<a name="l00801"></a>00801 
<a name="l00802"></a>00802         wav-&gt;dwFlags         = 0;
<a name="l00803"></a>00803         wav-&gt;dwBytesRecorded = 0;
<a name="l00804"></a>00804 
<a name="l00805"></a>00805         Win32::waveInPrepareHeader (waveIn, wav, <span class="keyword">sizeof</span> (*wav)) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00806"></a>00806         Win32::waveInAddBuffer     (waveIn, wav, <span class="keyword">sizeof</span> (*wav)) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00807"></a>00807         }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809     <span class="comment">// Stop the recording</span>
<a name="l00810"></a>00810 
<a name="l00811"></a>00811     Win32::waveInStop  (waveIn) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00812"></a>00812     Win32::waveInReset (waveIn) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00813"></a>00813 
<a name="l00814"></a>00814     <span class="comment">// Free the buffers</span>
<a name="l00815"></a>00815 
<a name="l00816"></a>00816     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (waveHdr); i++)
<a name="l00817"></a>00817         {
<a name="l00818"></a>00818         Win32::waveInUnprepareHeader (waveIn, &amp;waveHdr[i], <span class="keyword">sizeof</span> (waveHdr[i])) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00819"></a>00819         <a class="code" href="a00080.htm#ga105949c59c998e38aad80266afac92bf" title="Освобождает динамическую память и обнуляет указатель на нее.">FREE</a> (waveHdr[i].lpData);
<a name="l00820"></a>00820         }
<a name="l00821"></a>00821 
<a name="l00822"></a>00822     <span class="comment">// Close the wave device</span>
<a name="l00823"></a>00823 
<a name="l00824"></a>00824     Win32::waveInClose (waveIn) == MMSYSERR_NOERROR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00825"></a>00825     waveIn = NULL;
<a name="l00826"></a>00826 
<a name="l00827"></a>00827     <span class="keywordflow">return</span> data;
<a name="l00828"></a>00828     }
<a name="l00829"></a>00829 
<a name="l00830"></a>00830 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00831"></a>00831 
<a name="l00832"></a><a class="code" href="a00079.htm#gab571deca09d5854eff03adb4a906e378">00832</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="a00079.htm#gab571deca09d5854eff03adb4a906e378" title="Возвращает текущую позицию воспроизведения или записи.">txWaveGetPosition</a> (<span class="keywordtype">void</span>* wave)
<a name="l00833"></a>00833     {
<a name="l00834"></a>00834     <span class="keyword">static</span> MMTIME time = { TIME_SAMPLES };
<a name="l00835"></a>00835 
<a name="l00836"></a>00836     <span class="keywordflow">if</span> (Win32::waveOutGetPosition ((HWAVEOUT) wave, &amp;time, <span class="keyword">sizeof</span> (time)) == MMSYSERR_NOERROR) <span class="keywordflow">return</span> (<span class="keywordtype">long</span>) time.u.sample;
<a name="l00837"></a>00837     <span class="keywordflow">if</span> (Win32::waveInGetPosition  ((HWAVEIN)  wave, &amp;time, <span class="keyword">sizeof</span> (time)) == MMSYSERR_NOERROR) <span class="keywordflow">return</span> (<span class="keywordtype">long</span>) time.u.sample;
<a name="l00838"></a>00838 
<a name="l00839"></a>00839     <span class="keywordflow">return</span> ULONG_MAX;
<a name="l00840"></a>00840     }
<a name="l00841"></a>00841 
<a name="l00842"></a>00842 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00843"></a>00843 
<a name="l00844"></a>00844 <span class="keyword">struct </span>WAVFILEHEADER
<a name="l00845"></a>00845     {
<a name="l00846"></a>00846     <span class="keywordtype">unsigned</span>       chunkId;        <span class="comment">// 0x46464952 &#39;RIFF&#39;</span>
<a name="l00847"></a>00847     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>  chunkSize;      <span class="comment">// FileSize - sizeof (chunkId) - sizeof (chunkSize)</span>
<a name="l00848"></a>00848     <span class="keywordtype">unsigned</span>       format;         <span class="comment">// 0x45564157 &#39;WAVE&#39;</span>
<a name="l00849"></a>00849 
<a name="l00850"></a>00850     <span class="keywordtype">unsigned</span>       subchunk1Id;    <span class="comment">// 0x20746d66 &#39;fmt &#39;</span>
<a name="l00851"></a>00851     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>  subchunk1Size;  <span class="comment">// sizeof (PCMWAVEFORMAT), maybe +2, see below</span>
<a name="l00852"></a>00852 
<a name="l00853"></a>00853     PCMWAVEFORMAT  pcm;
<a name="l00854"></a>00854 
<a name="l00855"></a>00855     <span class="comment">/*                             // Here lies metadata, we ignore them</span>
<a name="l00856"></a>00856 <span class="comment"></span>
<a name="l00857"></a>00857 <span class="comment">    struct                         // If (subchunk1Size == sizeof (PCMWAVEFORMAT) + 2)</span>
<a name="l00858"></a>00858 <span class="comment">        {</span>
<a name="l00859"></a>00859 <span class="comment">        unsigned short size;</span>
<a name="l00860"></a>00860 <span class="comment">        unsigned char  data[];     // data [size]</span>
<a name="l00861"></a>00861 <span class="comment">        }</span>
<a name="l00862"></a>00862 <span class="comment">        metadata[];</span>
<a name="l00863"></a>00863 <span class="comment"></span>
<a name="l00864"></a>00864 <span class="comment">    */</span>
<a name="l00865"></a>00865 
<a name="l00866"></a>00866     <span class="keywordtype">unsigned</span>       subchunk2Id;    <span class="comment">// 0x61746164 &#39;data&#39;</span>
<a name="l00867"></a>00867     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>  subchunk2Size;  <span class="comment">// length (numSamples * pcm.wf.nChannels * pcm.wBitsPerSample/8</span>
<a name="l00868"></a>00868 
<a name="l00869"></a>00869     <a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a> data[];         <span class="comment">// data [numSamples], size in bytes = subchunk2Size</span>
<a name="l00870"></a>00870     };
<a name="l00871"></a>00871 
<a name="l00872"></a>00872 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00873"></a>00873 
<a name="l00874"></a>00874 <span class="preprocessor">#define TRY        int __error = 0;</span>
<a name="l00875"></a>00875 <span class="preprocessor"></span><span class="preprocessor">#define FAIL(err)  { __error = (err); goto __catch; }</span>
<a name="l00876"></a>00876 <span class="preprocessor"></span><span class="preprocessor">#define FAILURE    FAIL (__LINE__)</span>
<a name="l00877"></a>00877 <span class="preprocessor"></span><span class="preprocessor">#define CATCH      __catch: if (__error)</span>
<a name="l00878"></a>00878 <span class="preprocessor"></span>
<a name="l00879"></a>00879 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00880"></a>00880 
<a name="l00881"></a><a class="code" href="a00079.htm#ga74e32845b5d8f9a538b2c9c1d5c27e35">00881</a> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> <a class="code" href="a00079.htm#ga74e32845b5d8f9a538b2c9c1d5c27e35" title="Загружает звуковые данные из WAV-файла.">txWaveLoadWav</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[])
<a name="l00882"></a>00882     {
<a name="l00883"></a>00883     assert (filename);
<a name="l00884"></a>00884 
<a name="l00885"></a>00885     FILE* f = NULL;
<a name="l00886"></a>00886     <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a> data;
<a name="l00887"></a>00887 
<a name="l00888"></a>00888     TRY
<a name="l00889"></a>00889         {
<a name="l00890"></a>00890         <span class="comment">// Open the file</span>
<a name="l00891"></a>00891 
<a name="l00892"></a>00892         fopen_s (&amp;f, filename, <span class="stringliteral">&quot;rb&quot;</span>);
<a name="l00893"></a>00893         <span class="keywordflow">if</span> (!f) FAILURE;
<a name="l00894"></a>00894 
<a name="l00895"></a>00895         <span class="keywordtype">long</span> size = _filelength (_fileno (f));
<a name="l00896"></a>00896 
<a name="l00897"></a>00897         <span class="comment">// Allocate memory for waveform data</span>
<a name="l00898"></a>00898 
<a name="l00899"></a>00899         <span class="keywordflow">try</span> { data.resize (size / <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>)); }
<a name="l00900"></a>00900         <span class="keywordflow">catch</span> (...) { FAILURE; }
<a name="l00901"></a>00901 
<a name="l00902"></a>00902         <span class="comment">// Read the file header</span>
<a name="l00903"></a>00903 
<a name="l00904"></a>00904         WAVFILEHEADER* wav = (WAVFILEHEADER*) &amp;data[0];
<a name="l00905"></a>00905         fread (wav, <span class="keyword">sizeof</span> (WAVFILEHEADER), 1, f) == 1 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00906"></a>00906 
<a name="l00907"></a>00907         <span class="comment">// Check file format and properties</span>
<a name="l00908"></a>00908 
<a name="l00909"></a>00909         <span class="keywordflow">if</span> (wav-&gt;chunkId                != 0x46464952 <span class="comment">/* &#39;RIFF&#39; */</span>)      FAILURE;
<a name="l00910"></a>00910         <span class="keywordflow">if</span> (wav-&gt;format                 != 0x45564157 <span class="comment">/* &#39;WAVE&#39; */</span>)      FAILURE;
<a name="l00911"></a>00911         <span class="keywordflow">if</span> (wav-&gt;subchunk1Id            != 0x20746d66 <span class="comment">/* &#39;fmt &#39; */</span>)      FAILURE;
<a name="l00912"></a>00912 
<a name="l00913"></a>00913         <span class="keywordflow">if</span> (wav-&gt;pcm.wf.wFormatTag      != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wFormatTag)      FAILURE;
<a name="l00914"></a>00914         <span class="keywordflow">if</span> (wav-&gt;pcm.wf.nChannels       != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nChannels)       FAILURE;
<a name="l00915"></a>00915         <span class="keywordflow">if</span> (wav-&gt;pcm.wf.nSamplesPerSec  != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nSamplesPerSec)  FAILURE;
<a name="l00916"></a>00916         <span class="keywordflow">if</span> (wav-&gt;pcm.wf.nAvgBytesPerSec != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nAvgBytesPerSec) FAILURE;
<a name="l00917"></a>00917         <span class="keywordflow">if</span> (wav-&gt;pcm.wf.nBlockAlign     != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nBlockAlign)     FAILURE;
<a name="l00918"></a>00918 
<a name="l00919"></a>00919         <span class="keywordflow">if</span> (wav-&gt;pcm.wBitsPerSample     != <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wBitsPerSample)  FAILURE;
<a name="l00920"></a>00920 
<a name="l00921"></a>00921         <span class="comment">// Skip metadata</span>
<a name="l00922"></a>00922 
<a name="l00923"></a>00923         <span class="keywordtype">unsigned</span> metaSize = (wav-&gt;subchunk1Size == <span class="keyword">sizeof</span> (PCMWAVEFORMAT) + 2)? *(<span class="keywordtype">short</span>*)&amp;wav-&gt;subchunk2Id : 0;
<a name="l00924"></a>00924         fread (&amp;wav-&gt;subchunk2Id, 1, metaSize, f) == metaSize <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00925"></a>00925 
<a name="l00926"></a>00926         <span class="comment">// Now we at waveform data section</span>
<a name="l00927"></a>00927         
<a name="l00928"></a>00928         <span class="keywordflow">if</span> (wav-&gt;subchunk2Id != 0x61746164 <span class="comment">/* &#39;data&#39; */</span>) FAILURE;
<a name="l00929"></a>00929 
<a name="l00930"></a>00930         <span class="comment">// Read the waveform data</span>
<a name="l00931"></a>00931 
<a name="l00932"></a>00932         size -= (long) <span class="keyword">sizeof</span> (WAVFILEHEADER) + metaSize;
<a name="l00933"></a>00933         fread (wav, size, 1, f) == 1 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00934"></a>00934 
<a name="l00935"></a>00935         <span class="comment">// Adjust vector size according to the data read</span>
<a name="l00936"></a>00936 
<a name="l00937"></a>00937         data.resize (size / <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>));
<a name="l00938"></a>00938         }
<a name="l00939"></a>00939 
<a name="l00940"></a>00940     CATCH
<a name="l00941"></a>00941         {
<a name="l00942"></a>00942         <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, <span class="stringliteral">&quot;txWaveLoadWav() сообщает&quot;</span>, <span class="stringliteral">&quot;\nОшибка чтения WAV-файла \&quot;%s\&quot;\n\n&quot;</span>
<a name="l00943"></a>00943                                                               <span class="stringliteral">&quot;См. %s, строку %d&quot;</span>, filename, __FILE__, __error);
<a name="l00944"></a>00944         }
<a name="l00945"></a>00945 
<a name="l00946"></a>00946     <span class="keywordflow">if</span> (f) fclose (f) == 0 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00947"></a>00947 
<a name="l00948"></a>00948     <span class="keywordflow">return</span> data;
<a name="l00949"></a>00949     }
<a name="l00950"></a>00950 
<a name="l00951"></a>00951 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00952"></a>00952 
<a name="l00953"></a><a class="code" href="a00079.htm#gaf4acf7c838bf10514034eaebffe914bc">00953</a> <span class="keywordtype">bool</span> <a class="code" href="a00079.htm#gaf4acf7c838bf10514034eaebffe914bc" title="Сохраняет звуковые данные в WAV-файле.">txWaveSaveWav</a> (<span class="keyword">const</span> <a class="code" href="a00079.htm#ga8b47e6b9634139311cc6e9ccc42350fe" title="Тип, использующийся для буферов данных.">txWaveData_t</a>&amp; data, <span class="keyword">const</span> <span class="keywordtype">char</span> filename[])
<a name="l00954"></a>00954     {
<a name="l00955"></a>00955     assert (filename);
<a name="l00956"></a>00956 
<a name="l00957"></a>00957     <span class="keywordtype">unsigned</span> size = (unsigned) (data.size() * <span class="keyword">sizeof</span> (<a class="code" href="a00018.htm" title="Тип данных, использующийся для внутреннего представления звуков согласно формату txWaveFormat.">txWaveSample_t</a>));
<a name="l00958"></a>00958 
<a name="l00959"></a>00959     WAVFILEHEADER header = { 0x46464952 <span class="comment">/* &#39;RIFF&#39; */</span>,
<a name="l00960"></a>00960                              (unsigned) (<span class="keyword">sizeof</span> (header) + size - <span class="keyword">sizeof</span> (header.chunkId) - <span class="keyword">sizeof</span> (header.chunkSize)),
<a name="l00961"></a>00961                              0x45564157 <span class="comment">/* &#39;WAVE&#39; */</span>,
<a name="l00962"></a>00962 
<a name="l00963"></a>00963                              0x20746d66 <span class="comment">/* &#39;fmt &#39; */</span>,
<a name="l00964"></a>00964                              <span class="keyword">sizeof</span> (PCMWAVEFORMAT),
<a name="l00965"></a>00965 
<a name="l00966"></a>00966                              {{<a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wFormatTag,     <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nChannels,
<a name="l00967"></a>00967                                <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nSamplesPerSec, <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nAvgBytesPerSec,
<a name="l00968"></a>00968                                <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.nBlockAlign},   <a class="code" href="a00079.htm#gad34a43dcef175ddac1373a052ae579ea" title="Формат аудиоданных для TXWave.">txWaveFormat</a>.wBitsPerSample},
<a name="l00969"></a>00969 
<a name="l00970"></a>00970                              <span class="comment">// Here should be metadata, we live happy without them</span>
<a name="l00971"></a>00971                              
<a name="l00972"></a>00972                              0x61746164 <span class="comment">/* &#39;data&#39; */</span>,
<a name="l00973"></a>00973                              size
<a name="l00974"></a>00974                              };
<a name="l00975"></a>00975 
<a name="l00976"></a>00976     FILE* f = NULL;
<a name="l00977"></a>00977     fopen_s (&amp;f, filename, <span class="stringliteral">&quot;wb&quot;</span>);
<a name="l00978"></a>00978     <span class="keywordflow">if</span> (!f) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00979"></a>00979 
<a name="l00980"></a>00980     fwrite (&amp;header,  <span class="keyword">sizeof</span> (header), 1, f) == 1 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00981"></a>00981     fwrite (&amp;data[0], size,            1, f) == 1 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00982"></a>00982 
<a name="l00983"></a>00983     fclose (f) == 0 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l00984"></a>00984 
<a name="l00985"></a>00985     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00986"></a>00986     }
<a name="l00987"></a>00987 
<a name="l00988"></a>00988 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00989"></a>00989 
<a name="l00992"></a>00992 }};  <span class="comment">// namespace TX; namespace</span>
<a name="l00993"></a>00993 
<a name="l00996"></a>00996 <span class="comment">//=================================================================================================================</span>
<a name="l00997"></a>00997 
<a name="l00998"></a>00998 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00999"></a>00999 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (pop)</span>
<a name="l01000"></a>01000 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l01001"></a>01001 <span class="preprocessor"></span>
<a name="l01002"></a>01002 <span class="comment">//=================================================================================================================</span>
<a name="l01003"></a>01003 
<a name="l01004"></a>01004 <span class="preprocessor">#endif  // __TXWAVE_INCLUDED</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00061.htm">TXWave.h</a>      </li>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Thu Aug 13 2020 00:46:49. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
