<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл TXNetwork.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00059.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>TXNetwork.h</h1>  </div>
</div>
<div class="contents">
<a href="a00059.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//{=============================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//  Библиотека TXNetwork - TXNetwork.h</span>
<a name="l00003"></a>00003 <span class="comment">//  Copyright (C) Vova Yurovsky, 7 класс - Source code</span>
<a name="l00004"></a>00004 <span class="comment">//                Vova Yurovsky, 8 класс - Help</span>
<a name="l00005"></a>00005 <span class="comment">//}=============================================================================</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="comment">//{================================DOXYGEN======================================</span>
<a name="l00010"></a>00010 <span class="comment"></span><span class="comment">//  @mainpage</span>
<a name="l00087"></a>00087 <span class="comment"></span><span class="comment">//}=============================================================================</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="preprocessor">#ifndef TXN_H</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span><span class="preprocessor">#define TXN_H</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>
<a name="l00092"></a>00092 <span class="comment">//{</span>
<a name="l00093"></a>00093 <span class="preprocessor">#pragma GCC diagnostic push</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wswitch-enum&quot;</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wmissing-field-initializers&quot;</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wsign-conversion&quot;</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="comment">//}</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">//{ Includes (##-INTERNAL-##)</span>
<a name="l00101"></a>00101 <span class="comment"></span>
<a name="l00102"></a>00102 <span class="preprocessor">#ifdef __TXLIB_H_INCLUDED</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span>
<a name="l00104"></a>00104 <span class="preprocessor">#error -----------------------------------------------------------------------</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span><span class="preprocessor">#error Do not include TXLib before TXNetwork.</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span><span class="preprocessor">#error -----------------------------------------------------------------------</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>
<a name="l00108"></a>00108 <span class="preprocessor">#endif</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span>
<a name="l00110"></a>00110 <span class="preprocessor">#ifndef WINVER</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a>00112 <span class="preprocessor">#define WINVER 0x0501</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span>
<a name="l00114"></a>00114 <span class="preprocessor">#endif</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="preprocessor">#ifndef _WIN32_IE</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span>
<a name="l00118"></a>00118 <span class="preprocessor">#define _WIN32_IE WINVER</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>
<a name="l00120"></a>00120 <span class="preprocessor">#endif</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>
<a name="l00122"></a>00122 <span class="preprocessor">#if (WINVER &lt; 0x0501)</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>
<a name="l00124"></a>00124 <span class="preprocessor">#error -------------------------------------------------------------------------</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="preprocessor">#error TXNetwork requires WINVER 0x0501 or above. To define WINVER:</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">#error #define WINVER MEOW</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">#error #define MEOW   0x0501</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">#error -------------------------------------------------------------------------</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>
<a name="l00130"></a>00130 <span class="preprocessor">#endif</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>
<a name="l00132"></a>00132 <span class="preprocessor">#if (_WIN32_IE &lt; 0x0501)</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>
<a name="l00134"></a>00134 <span class="preprocessor">#error -------------------------------------------------------------------------</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span><span class="preprocessor">#error TXNetwork requires _WIN32_IE 0x0501 or above. To define _WIN32_IE:</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span><span class="preprocessor">#error #define _WIN32_IE CAT</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">#error #define CAT   0x0501</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">#error -------------------------------------------------------------------------</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>
<a name="l00140"></a>00140 <span class="preprocessor">#endif</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>
<a name="l00142"></a>00142 <span class="preprocessor">#pragma GCC system_header</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>
<a name="l00144"></a>00144 <span class="preprocessor">#undef  __STRICT_ANSI__</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>
<a name="l00146"></a>00146 <span class="preprocessor">#include &lt;ws2tcpip.h&gt;</span>
<a name="l00147"></a>00147 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00148"></a>00148 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00149"></a>00149 
<a name="l00151"></a>00151 <span class="comment">//}</span>
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">//{ defines, typedefs</span>
<a name="l00154"></a>00154 
<a name="l00159"></a>00159 
<a name="l00160"></a><a class="code" href="a00077.htm#ga1e359e37a66aaeab778423c0c61923d0">00160</a> <span class="preprocessor">#define TX_BROADCAST    &quot;255.255.255.255&quot;</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span><span class="preprocessor">#define TX_BROADCAT      TX_BROADCAST       // For compatibility with other cats. ^^ :)</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span>
<a name="l00167"></a>00167 
<a name="l00168"></a><a class="code" href="a00077.htm#gad3ab3baeb73e77641e348a9aa33516ec">00168</a> <span class="preprocessor">#define TX_STD_PORT     27050</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="a00077.htm#gadea4550fd711b4de49839e72be38c2d0">00175</a> <span class="preprocessor">#define TX_LOCALHOST    &quot;127.0.0.1&quot;</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span>
<a name="l00181"></a>00181 
<a name="l00182"></a><a class="code" href="a00078.htm#gaa56d5be53827cc51bd2a02fe580e00c9">00182</a> <span class="preprocessor">#define TXN_NOT_CREATED 101</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>
<a name="l00188"></a>00188 
<a name="l00189"></a><a class="code" href="a00078.htm#ga61504ff34c9e7ad86561df1ffca21759">00189</a> <span class="preprocessor">#define TXN_OK          100</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>
<a name="l00195"></a>00195 
<a name="l00196"></a><a class="code" href="a00078.htm#ga8eaa176a913e2ec34778209de1c88983">00196</a> <span class="preprocessor">#define TXN_ERROR       -1</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>
<a name="l00200"></a>00200 
<a name="l00201"></a><a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517">00201</a> <span class="keyword">enum</span> <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a>
<a name="l00202"></a>00202     {
<a name="l00203"></a><a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c">00203</a>     <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>   =  1,  
<a name="l00204"></a><a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58">00204</a>     <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58" title="Сокет является клиентом.">TX_CLIENT</a>   =  2,  
<a name="l00205"></a><a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd">00205</a>     <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>    =  3,  
<a name="l00206"></a><a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22">00206</a>     <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a> =  4,  
<a name="l00207"></a><a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3">00207</a>     <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3" title="Если не знаешь или не уверен.">TX_NOTYPE</a>   = -1   
<a name="l00208"></a>00208     };
<a name="l00210"></a>00210 
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <span class="comment">//}</span>
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">// The Classes</span>
<a name="l00221"></a>00221 <span class="comment">//{</span>
<a name="l00222"></a>00222 
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="keyword">class </span>txSmartSocket_
<a name="l00226"></a>00226 {
<a name="l00227"></a>00227 SOCKET sock;
<a name="l00228"></a>00228 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_of_ref;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 txSmartSocket_ (<span class="keyword">const</span> txSmartSocket_&amp; var) = <span class="keyword">delete</span>;
<a name="l00231"></a>00231 txSmartSocket_&amp; operator= (txSmartSocket_&amp; what) = <span class="keyword">delete</span>;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="keyword">public</span>:
<a name="l00234"></a>00234     txSmartSocket_ ():
<a name="l00235"></a>00235     sock(INVALID_SOCKET),
<a name="l00236"></a>00236     num_of_ref(0)
<a name="l00237"></a>00237     {}
<a name="l00238"></a>00238 
<a name="l00239"></a>00239     txSmartSocket_ (SOCKET var):
<a name="l00240"></a>00240     sock (var),
<a name="l00241"></a>00241     num_of_ref (1)
<a name="l00242"></a>00242     {}
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     txSmartSocket_ (txSmartSocket_&amp;&amp; var):
<a name="l00245"></a>00245     sock(var.sock),
<a name="l00246"></a>00246     num_of_ref(var.num_of_ref)
<a name="l00247"></a>00247     {
<a name="l00248"></a>00248     var.sock = NULL;
<a name="l00249"></a>00249     var.num_of_ref = 0;
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     ~txSmartSocket_()
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254     <span class="keywordflow">if</span> (sock);
<a name="l00255"></a>00255         closesocket(sock);
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 SOCKET&amp; operator*();
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 txSmartSocket_* Create();
<a name="l00261"></a>00261 txSmartSocket_* Delete();
<a name="l00262"></a>00262 };
<a name="l00263"></a>00263 
<a name="l00265"></a>00265 
<a name="l00266"></a><a class="code" href="a00015.htm">00266</a> <span class="keyword">class </span><a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>
<a name="l00267"></a>00267     {
<a name="l00269"></a>00269 
<a name="l00270"></a>00270     <span class="keywordtype">bool</span>      _broadcats;  <span class="comment">// ^_^</span>
<a name="l00271"></a>00271     <span class="keywordtype">bool</span>      _TCP;
<a name="l00272"></a>00272     <span class="keywordtype">bool</span>      _init;
<a name="l00273"></a>00273     <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> _type;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     txSmartSocket_* _sock;
<a name="l00276"></a>00276     sockaddr_in _sock_addr;
<a name="l00277"></a>00277 
<a name="l00278"></a>00278     txSmartSocket_* _client_sock_for_serv;
<a name="l00279"></a>00279     sockaddr_in _client_addr;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> _type_;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordtype">bool</span> _txInitAsServer (<span class="keyword">const</span> <span class="keywordtype">char</span>*,    u_short port, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> type, <span class="keywordtype">bool</span> useTCP, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> OueueSize);
<a name="l00284"></a>00284     <span class="keywordtype">bool</span> _txInitAsClient (<span class="keyword">const</span> <span class="keywordtype">char</span>* IP, u_short port, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> type, <span class="keywordtype">bool</span> useTCP, <span class="keyword">const</span> <span class="keywordtype">unsigned</span>);
<a name="l00285"></a>00285 
<a name="l00286"></a>00286     <span class="keyword">public</span>:
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>():
<a name="l00289"></a>00289         _broadcats(),
<a name="l00290"></a>00290         _TCP (<span class="keyword">true</span>),
<a name="l00291"></a>00291         _init (<span class="keyword">false</span>),
<a name="l00292"></a>00292         _type (<a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3" title="Если не знаешь или не уверен.">TX_NOTYPE</a>),
<a name="l00293"></a>00293         _sock(),
<a name="l00294"></a>00294         _sock_addr(),
<a name="l00295"></a>00295         _client_sock_for_serv(),
<a name="l00296"></a>00296         _client_addr(),
<a name="l00297"></a>00297         _type_ (<a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>)
<a name="l00298"></a>00298         {}
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a> (<span class="keyword">const</span> <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; that):
<a name="l00301"></a>00301         _broadcats (that._broadcats),
<a name="l00302"></a>00302         _TCP (that._TCP),
<a name="l00303"></a>00303         _init (that._init),
<a name="l00304"></a>00304         _type (that._type),
<a name="l00305"></a>00305         _sock (_init? that._sock -&gt; Create() : NULL),
<a name="l00306"></a>00306         _sock_addr (that._sock_addr),
<a name="l00307"></a>00307         _client_sock_for_serv (that._client_sock_for_serv? that._client_sock_for_serv -&gt; Create() : NULL),
<a name="l00308"></a>00308         _client_addr (that._client_addr),
<a name="l00309"></a>00309         _type_ (that._type_)
<a name="l00310"></a>00310         {}
<a name="l00311"></a>00311 
<a name="l00312"></a>00312     <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a> (<a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> type, <span class="keyword">const</span> <span class="keywordtype">char</span>* IP, <span class="keywordtype">int</span> port, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking, <span class="keywordtype">bool</span> useTCP, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> OueueSize):
<a name="l00313"></a>00313         _broadcats(),
<a name="l00314"></a>00314         _TCP (useTCP),
<a name="l00315"></a>00315         _init (<span class="keyword">false</span>),
<a name="l00316"></a>00316         _type (type),
<a name="l00317"></a>00317         _sock (0),
<a name="l00318"></a>00318         _sock_addr(),
<a name="l00319"></a>00319         _client_sock_for_serv(),
<a name="l00320"></a>00320         _client_addr(),
<a name="l00321"></a>00321         _type_ (blocking)
<a name="l00322"></a>00322         {
<a name="l00323"></a>00323         <span class="keywordflow">if</span> (IP == NULL)
<a name="l00324"></a>00324             {
<a name="l00325"></a>00325             <span class="keywordflow">if</span> (type == <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>)
<a name="l00326"></a>00326                 _broadcats = <span class="keyword">false</span>;
<a name="l00327"></a>00327             <span class="keywordflow">else</span>
<a name="l00328"></a>00328                 <span class="keywordflow">return</span>;
<a name="l00329"></a>00329             }
<a name="l00330"></a>00330         <span class="keywordflow">else</span>
<a name="l00331"></a>00331             {
<a name="l00332"></a>00332             assert (IP);
<a name="l00333"></a>00333             _broadcats = ! (strcmp (IP, <a class="code" href="a00077.htm#ga1e359e37a66aaeab778423c0c61923d0" title="Широковещательный IP-адрес TXNetwork&amp;#39;a.">TX_BROADCAST</a>));          <span class="comment">// TX_BROADCAT :)</span>
<a name="l00334"></a>00334             }
<a name="l00335"></a>00335 
<a name="l00336"></a>00336         <span class="keywordflow">switch</span> (_type)
<a name="l00337"></a>00337             {
<a name="l00338"></a>00338             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58" title="Сокет является клиентом.">TX_CLIENT</a>:   <span class="keywordflow">if</span> (! (this-&gt;*(_broadcats? &amp;TX_SOCKET :: _txInitAsServer : &amp;TX_SOCKET :: _txInitAsClient))
<a name="l00339"></a>00339                                     (IP, (u_short) port, _type_, useTCP, OueueSize)) <span class="keywordflow">return</span>;
<a name="l00340"></a>00340                               <span class="keywordflow">break</span>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>:   <span class="keywordflow">if</span> (! (this-&gt;*(_broadcats? &amp;TX_SOCKET :: _txInitAsClient : &amp;TX_SOCKET :: _txInitAsServer))
<a name="l00343"></a>00343                                     (IP, (u_short) port, _type_, useTCP, OueueSize)) <span class="keywordflow">return</span>;
<a name="l00344"></a>00344                               <span class="keywordflow">break</span>;
<a name="l00345"></a>00345 
<a name="l00346"></a>00346             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>:
<a name="l00347"></a>00347             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>: <span class="keywordflow">return</span>;
<a name="l00348"></a>00348 
<a name="l00349"></a>00349             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3" title="Если не знаешь или не уверен.">TX_NOTYPE</a>:   <span class="keywordflow">break</span>;
<a name="l00350"></a>00350 
<a name="l00351"></a>00351             <span class="keywordflow">default</span>:          <span class="keywordflow">break</span>;
<a name="l00352"></a>00352             }
<a name="l00353"></a>00353 
<a name="l00354"></a>00354         _init = <span class="keyword">true</span>;
<a name="l00355"></a>00355         }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357     ~<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>()
<a name="l00358"></a>00358         {
<a name="l00359"></a>00359         <span class="keywordflow">if</span> (_sock) _sock -&gt; Delete();
<a name="l00360"></a>00360         <span class="keywordflow">if</span> (_client_sock_for_serv) _client_sock_for_serv -&gt; Delete();
<a name="l00361"></a>00361         }
<a name="l00362"></a>00362 
<a name="l00363"></a>00363         <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gab1932ecc57580c15659f0cc01b695262" title="Функция для отправки данных через сокет">txSendTo</a>   (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf);
<a name="l00364"></a>00364         <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaf700cdda64317854f43186f0cfa003a1" title="Функция для приема данных через сокет">txRecvFrom</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf);
<a name="l00365"></a>00365         <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="a00077.htm#ga5e61ac3a46192caddcd98b27325ef953" title="Функция для проверки сокета">txnAssert</a>  (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; asr);
<a name="l00366"></a>00366         <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaac42a63b28b3c029dda53fd90ddd0cb8" title="Функция для изменения типа (синхронный - не синхронный) сокета.">txChangeSockType</a>   (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking);
<a name="l00367"></a>00367         <span class="keyword">friend</span> SOCKET* <a class="code" href="a00077.htm#ga9edc914ce0aee67b6dda96cc2132d2e5" title="Функция, которая возвращает сокет winsock&amp;#39;а.">txGetWinSocket</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; what, <span class="keywordtype">bool</span> main = <span class="keyword">true</span>);
<a name="l00369"></a>00369     };
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 <span class="comment">//}</span>
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 <span class="comment">// prototypes</span>
<a name="l00374"></a>00374 <span class="comment">//{</span>
<a name="l00397"></a>00397 <span class="comment"></span>    <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a> <a class="code" href="a00077.htm#ga28c1c1600ff0df0a1b4443284e14b6d5" title="Создаёт сокет TXNetwork.">txCreateSocket</a> (<a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> type, <span class="keyword">const</span> <span class="keywordtype">char</span>* IP = NULL, <span class="keywordtype">int</span> port = <a class="code" href="a00077.htm#gad3ab3baeb73e77641e348a9aa33516ec" title="Стандартный порт TXNetwork&amp;#39;a.">TX_STD_PORT</a>,
<a name="l00398"></a>00398                               <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking = <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>, <span class="keywordtype">bool</span> useTCP = <span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> OueueSize = 0x10);
<a name="l00399"></a>00399 
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gab1932ecc57580c15659f0cc01b695262" title="Функция для отправки данных через сокет">txSendTo</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf);
<a name="l00438"></a>00438 
<a name="l00479"></a>00479 
<a name="l00480"></a>00480     <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaf700cdda64317854f43186f0cfa003a1" title="Функция для приема данных через сокет">txRecvFrom</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf);
<a name="l00481"></a>00481 
<a name="l00490"></a>00490 
<a name="l00491"></a>00491     <span class="keywordtype">int</span> <a class="code" href="a00077.htm#ga5e61ac3a46192caddcd98b27325ef953" title="Функция для проверки сокета">txnAssert</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; asr);
<a name="l00492"></a>00492 
<a name="l00502"></a>00502 
<a name="l00503"></a>00503     <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaac42a63b28b3c029dda53fd90ddd0cb8" title="Функция для изменения типа (синхронный - не синхронный) сокета.">txChangeSockType</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking);
<a name="l00504"></a>00504 
<a name="l00514"></a>00514 
<a name="l00515"></a>00515     SOCKET* <a class="code" href="a00077.htm#ga9edc914ce0aee67b6dda96cc2132d2e5" title="Функция, которая возвращает сокет winsock&amp;#39;а.">txGetWinSocket</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; what, <span class="keywordtype">bool</span> main<span class="comment">/* = true*/</span>);
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="comment">//}</span>
<a name="l00518"></a>00518 
<a name="l00519"></a>00519 <span class="comment">// definitions (##--INTERANL--##)</span>
<a name="l00520"></a>00520 <span class="comment">//{</span>
<a name="l00522"></a>00522 <span class="comment"></span>
<a name="l00523"></a>00523 <span class="comment">// txSmartSocket_</span>
<a name="l00524"></a>00524 <span class="comment">//{</span>
<a name="l00525"></a>00525 
<a name="l00526"></a>00526 SOCKET&amp; txSmartSocket_ :: operator*()
<a name="l00527"></a>00527 {
<a name="l00528"></a>00528 <span class="keywordflow">return</span> sock;
<a name="l00529"></a>00529 }
<a name="l00530"></a>00530 
<a name="l00531"></a>00531 txSmartSocket_* txSmartSocket_ :: Create()
<a name="l00532"></a>00532 {
<a name="l00533"></a>00533 num_of_ref++;
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00536"></a>00536 }
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 txSmartSocket_* txSmartSocket_ :: Delete()
<a name="l00539"></a>00539 {
<a name="l00540"></a>00540 <span class="keywordflow">if</span> (num_of_ref == 0 &amp;&amp; sock != INVALID_SOCKET)
<a name="l00541"></a>00541     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00542"></a>00542 <span class="keywordflow">else</span>
<a name="l00543"></a>00543     num_of_ref--;
<a name="l00544"></a>00544 
<a name="l00545"></a>00545 <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 <span class="comment">//}</span>
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 <span class="comment">// TX_SOCKET</span>
<a name="l00551"></a>00551 <span class="comment">//{</span>
<a name="l00552"></a>00552 
<a name="l00553"></a>00553 <span class="keywordtype">bool</span> TX_SOCKET :: _txInitAsServer (<span class="keyword">const</span> <span class="keywordtype">char</span>*, u_short port, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking, <span class="keywordtype">bool</span> useTCP, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> OueueSize)
<a name="l00554"></a>00554     {
<a name="l00555"></a>00555     addrinfo hints    = {};
<a name="l00556"></a>00556     hints.ai_family   = AF_INET;
<a name="l00557"></a>00557     hints.ai_socktype = (useTCP? SOCK_STREAM : SOCK_DGRAM);
<a name="l00558"></a>00558     hints.ai_flags    = AI_PASSIVE;
<a name="l00559"></a>00559 
<a name="l00560"></a>00560     addrinfo *servinfo = NULL;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562     <span class="keywordtype">int</span> _port_ = port;
<a name="l00563"></a>00563 
<a name="l00564"></a>00564     <span class="keywordtype">char</span> str[6] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00565"></a>00565 
<a name="l00566"></a>00566     sprintf (str, <span class="stringliteral">&quot;%d&quot;</span>, _port_);
<a name="l00567"></a>00567 
<a name="l00568"></a>00568     <span class="keywordtype">int</span> err = getaddrinfo (NULL, str, &amp;hints, &amp;servinfo);
<a name="l00569"></a>00569     <span class="keywordflow">if</span> (err == -1) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     _sock = NULL;
<a name="l00572"></a>00572     <span class="keywordflow">for</span> (addrinfo* p = servinfo; p; p = p-&gt;ai_next)
<a name="l00573"></a>00573         {
<a name="l00574"></a>00574         _sock = <span class="keyword">new</span> txSmartSocket_ (socket (p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol));
<a name="l00575"></a>00575 
<a name="l00576"></a>00576         <span class="keywordflow">if</span> (_sock == NULL)
<a name="l00577"></a>00577             {
<a name="l00578"></a>00578             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00579"></a>00579             }
<a name="l00580"></a>00580 
<a name="l00581"></a>00581         <span class="keywordflow">if</span> ( (<span class="keywordtype">int</span>) **_sock == -1)
<a name="l00582"></a>00582             {
<a name="l00583"></a>00583             <span class="keyword">delete</span> _sock;
<a name="l00584"></a>00584             <span class="keywordflow">continue</span>;
<a name="l00585"></a>00585             }
<a name="l00586"></a>00586 
<a name="l00587"></a>00587         <span class="keywordflow">if</span> (bind (**_sock, p-&gt;ai_addr, int (p-&gt;ai_addrlen)) == -1)
<a name="l00588"></a>00588             {
<a name="l00589"></a>00589             <span class="keyword">delete</span> _sock;
<a name="l00590"></a>00590             <span class="keywordflow">continue</span>;
<a name="l00591"></a>00591             }
<a name="l00592"></a>00592 
<a name="l00593"></a>00593         <span class="keywordflow">break</span>;
<a name="l00594"></a>00594         }
<a name="l00595"></a>00595 
<a name="l00596"></a>00596     <span class="keywordflow">if</span> (_sock == NULL)
<a name="l00597"></a>00597         {
<a name="l00598"></a>00598         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00599"></a>00599         }
<a name="l00600"></a>00600 
<a name="l00601"></a>00601     <span class="keywordflow">if</span> (!**_sock)
<a name="l00602"></a>00602         {
<a name="l00603"></a>00603         <span class="keyword">delete</span> _sock;
<a name="l00604"></a>00604         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00605"></a>00605         }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607     freeaddrinfo (servinfo);
<a name="l00608"></a>00608 
<a name="l00609"></a>00609     <span class="keywordflow">if</span> (useTCP)
<a name="l00610"></a>00610         {
<a name="l00611"></a>00611         <span class="keywordflow">if</span> (listen (**_sock, OueueSize)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00612"></a>00612 
<a name="l00613"></a>00613         <span class="keywordtype">int</span> client_addr_size = <span class="keyword">sizeof</span> (_client_addr);
<a name="l00614"></a>00614 
<a name="l00615"></a>00615         _client_sock_for_serv = <span class="keyword">new</span> txSmartSocket_(accept (**_sock, (sockaddr* ) &amp;_client_addr, &amp;client_addr_size));
<a name="l00616"></a>00616 
<a name="l00617"></a>00617         <span class="keywordflow">if</span> (_client_sock_for_serv == NULL)
<a name="l00618"></a>00618 
<a name="l00619"></a>00619         <span class="keywordflow">if</span> (**_client_sock_for_serv == 0)
<a name="l00620"></a>00620             {
<a name="l00621"></a>00621             <span class="keyword">delete</span> _client_sock_for_serv;
<a name="l00622"></a>00622             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00623"></a>00623             }
<a name="l00624"></a>00624         }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <span class="keywordflow">if</span> (blocking == <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>)
<a name="l00627"></a>00627         {
<a name="l00628"></a>00628         u_long nonblocking = 1;
<a name="l00629"></a>00629         <span class="keywordflow">if</span> (ioctlsocket (**_client_sock_for_serv, FIONBIO, &amp;nonblocking) == SOCKET_ERROR)
<a name="l00630"></a>00630             {
<a name="l00631"></a>00631             <span class="keyword">delete</span> _client_sock_for_serv;
<a name="l00632"></a>00632             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00633"></a>00633             }
<a name="l00634"></a>00634         }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00637"></a>00637     }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639 <span class="keywordtype">bool</span> TX_SOCKET :: _txInitAsClient (<span class="keyword">const</span> <span class="keywordtype">char</span>* IP, u_short port, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking, <span class="keywordtype">bool</span> useTCP, <span class="keyword">const</span> <span class="keywordtype">unsigned</span>)
<a name="l00640"></a>00640     {
<a name="l00641"></a>00641     hostent* he = gethostbyname (IP);
<a name="l00642"></a>00642 
<a name="l00643"></a>00643     _sock = <span class="keyword">new</span> txSmartSocket_ (useTCP? socket (AF_INET, SOCK_STREAM, IPPROTO_IP) :
<a name="l00644"></a>00644                                         socket (AF_INET, SOCK_DGRAM, _broadcats? 0 : IPPROTO_UDP));
<a name="l00645"></a>00645     <span class="keywordflow">if</span> (_sock == NULL)
<a name="l00646"></a>00646         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00647"></a>00647 
<a name="l00648"></a>00648     <span class="keywordflow">if</span> (**_sock == INVALID_SOCKET)
<a name="l00649"></a>00649         {
<a name="l00650"></a>00650         <span class="keyword">delete</span> _sock;
<a name="l00651"></a>00651 
<a name="l00652"></a>00652         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00653"></a>00653         }
<a name="l00654"></a>00654 
<a name="l00655"></a>00655     <span class="keywordtype">char</span> broadcast = _broadcats;
<a name="l00656"></a>00656     <span class="keywordflow">if</span> (_broadcats) <span class="keywordflow">if</span> (setsockopt (**_sock, SOL_SOCKET, SO_BROADCAST, &amp;broadcast, <span class="keyword">sizeof</span> (broadcast)) == -1)
<a name="l00657"></a>00657         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00658"></a>00658 
<a name="l00659"></a>00659     _sock_addr = {};
<a name="l00660"></a>00660 
<a name="l00661"></a>00661     _sock_addr.sin_family = AF_INET;
<a name="l00662"></a>00662     _sock_addr.sin_port   = htons (port);
<a name="l00663"></a>00663     _sock_addr.sin_addr   = * (in_addr*) he-&gt;h_addr;
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     if (useTCP)
<a name="l00666"></a>00666         <span class="keywordflow">if</span> (connect (**_sock, (sockaddr* ) &amp;_sock_addr, <span class="keyword">sizeof</span> (_sock_addr)) != 0)
<a name="l00667"></a>00667         {
<a name="l00668"></a>00668         <span class="keyword">delete</span> _sock;
<a name="l00669"></a>00669         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00670"></a>00670         }
<a name="l00671"></a>00671 
<a name="l00672"></a>00672     <span class="keywordflow">if</span> (blocking == <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>)
<a name="l00673"></a>00673         {
<a name="l00674"></a>00674         u_long nonblocking = 1;
<a name="l00675"></a>00675         <span class="keywordflow">if</span> (ioctlsocket (**_sock, FIONBIO, &amp;nonblocking) == SOCKET_ERROR)
<a name="l00676"></a>00676             {
<a name="l00677"></a>00677             <span class="keyword">delete</span> _sock;
<a name="l00678"></a>00678             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00679"></a>00679             }
<a name="l00680"></a>00680         }
<a name="l00681"></a>00681 
<a name="l00682"></a>00682     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684 
<a name="l00685"></a>00685 <span class="comment">//}</span>
<a name="l00686"></a>00686 
<a name="l00687"></a>00687 <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gab1932ecc57580c15659f0cc01b695262" title="Функция для отправки данных через сокет">txSendTo</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf)
<a name="l00688"></a>00688     {
<a name="l00689"></a>00689     <span class="keywordtype">int</span> answ = 0;
<a name="l00690"></a>00690 
<a name="l00691"></a>00691     <span class="keywordflow">if</span> (to._broadcats)
<a name="l00692"></a>00692         {
<a name="l00693"></a>00693         answ = sendto (**(to._sock), (<span class="keyword">const</span> <span class="keywordtype">char</span>*) buf, size_buf, 0, (sockaddr *) &amp;to._sock_addr, sizeof (to._sock_addr));
<a name="l00694"></a>00694         <span class="keywordflow">return</span> answ;
<a name="l00695"></a>00695         }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (to._TCP)
<a name="l00698"></a>00698         {
<a name="l00699"></a>00699         <span class="keywordflow">switch</span> (to._type)
<a name="l00700"></a>00700             {
<a name="l00701"></a>00701             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>:   answ = send (**(to._client_sock_for_serv), (<span class="keyword">const</span> <span class="keywordtype">char</span>*) buf, size_buf, 0); <span class="keywordflow">break</span>;
<a name="l00702"></a>00702             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58" title="Сокет является клиентом.">TX_CLIENT</a>:   answ = send (**(to._sock),                 (<span class="keyword">const</span> <span class="keywordtype">char</span>*) buf, size_buf, 0); <span class="keywordflow">break</span>;
<a name="l00703"></a>00703 
<a name="l00704"></a>00704             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>:
<a name="l00705"></a>00705             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>: <span class="keywordflow">return</span> <a class="code" href="a00078.htm#ga8eaa176a913e2ec34778209de1c88983" title="Ошибка сокета.">TXN_ERROR</a>;
<a name="l00706"></a>00706 
<a name="l00707"></a>00707             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3" title="Если не знаешь или не уверен.">TX_NOTYPE</a>:   <span class="keywordflow">return</span> 0;
<a name="l00708"></a>00708 
<a name="l00709"></a>00709             <span class="keywordflow">default</span>:          <span class="keywordflow">return</span> 0;
<a name="l00710"></a>00710             }
<a name="l00711"></a>00711         }
<a name="l00712"></a>00712 
<a name="l00713"></a>00713     <span class="keywordflow">else</span>
<a name="l00714"></a>00714         answ = sendto (**(to._sock), (<span class="keyword">const</span> <span class="keywordtype">char</span>*) buf, size_buf, 0, (sockaddr*) &amp;to._sock_addr, sizeof (to._sock_addr));
<a name="l00715"></a>00715 
<a name="l00716"></a>00716     <span class="keywordflow">return</span> answ;
<a name="l00717"></a>00717     }
<a name="l00718"></a>00718 
<a name="l00719"></a>00719 <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaf700cdda64317854f43186f0cfa003a1" title="Функция для приема данных через сокет">txRecvFrom</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <span class="keywordtype">void</span>* buf, <span class="keywordtype">int</span> size_buf)
<a name="l00720"></a>00720     {
<a name="l00721"></a>00721     <span class="keywordtype">int</span> answ = 0;
<a name="l00722"></a>00722 
<a name="l00723"></a>00723     <span class="keywordflow">if</span> (to._broadcats)
<a name="l00724"></a>00724         {
<a name="l00725"></a>00725         <span class="keywordtype">int</span> SIZE_OF_STRUCTURE_FOR_XXX_WINDOWS = <span class="keyword">sizeof</span> (to._sock_addr);
<a name="l00726"></a>00726         answ = recvfrom (**(to._sock), (<span class="keywordtype">char</span>*) buf, size_buf, 0, (sockaddr*) &amp;to._sock_addr, &amp;SIZE_OF_STRUCTURE_FOR_XXX_WINDOWS);
<a name="l00727"></a>00727         }
<a name="l00728"></a>00728 
<a name="l00729"></a>00729     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (to._TCP)
<a name="l00730"></a>00730         {
<a name="l00731"></a>00731         <span class="keywordflow">switch</span> (to._type)
<a name="l00732"></a>00732             {
<a name="l00733"></a>00733             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>:   answ = recv (**(to._client_sock_for_serv), (<span class="keywordtype">char</span>*) buf, size_buf, 0); <span class="keywordflow">break</span>;
<a name="l00734"></a>00734             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58" title="Сокет является клиентом.">TX_CLIENT</a>:   answ = recv (**(to._sock),                 (<span class="keywordtype">char</span>*) buf, size_buf, 0); <span class="keywordflow">break</span>;
<a name="l00735"></a>00735 
<a name="l00736"></a>00736             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>:
<a name="l00737"></a>00737             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>: <span class="keywordflow">return</span> <a class="code" href="a00078.htm#ga8eaa176a913e2ec34778209de1c88983" title="Ошибка сокета.">TXN_ERROR</a>;
<a name="l00738"></a>00738 
<a name="l00739"></a>00739             <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a247d953bff98c6ee1de4ddca128848f3" title="Если не знаешь или не уверен.">TX_NOTYPE</a>:   <span class="keywordflow">return</span> 0;
<a name="l00740"></a>00740 
<a name="l00741"></a>00741             <span class="keywordflow">default</span>:          <span class="keywordflow">return</span> 0;
<a name="l00742"></a>00742             }
<a name="l00743"></a>00743         }
<a name="l00744"></a>00744     <span class="keywordflow">else</span>
<a name="l00745"></a>00745         {
<a name="l00746"></a>00746         <span class="keywordtype">int</span> SIZE_OF_STRUCTURE_FOR_XXX_WINDOWS = <span class="keyword">sizeof</span> (to._sock_addr);
<a name="l00747"></a>00747         answ = recvfrom (**(to._sock), (<span class="keywordtype">char</span>*) buf, size_buf, 0, (sockaddr*) &amp;to._sock_addr, &amp;SIZE_OF_STRUCTURE_FOR_XXX_WINDOWS);
<a name="l00748"></a>00748         }
<a name="l00749"></a>00749 
<a name="l00750"></a>00750     <span class="keywordflow">return</span> answ;
<a name="l00751"></a>00751     }
<a name="l00752"></a>00752 
<a name="l00753"></a>00753 <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a> <a class="code" href="a00077.htm#ga28c1c1600ff0df0a1b4443284e14b6d5" title="Создаёт сокет TXNetwork.">txCreateSocket</a> (<a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> type, <span class="keyword">const</span> <span class="keywordtype">char</span>* IP<span class="comment">/* = NULL*/</span>,
<a name="l00754"></a>00754                           <span class="keywordtype">int</span> port <span class="comment">/* = TX_STD_PORT*/</span>, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking <span class="comment">/* = TX_BLOCK*/</span>, <span class="keywordtype">bool</span> useTCP <span class="comment">/* = true*/</span>, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> OueueSize<span class="comment">/* = 0x10*/</span>)
<a name="l00755"></a>00755     {
<a name="l00756"></a>00756     <span class="keywordflow">return</span> <a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a> (type, IP, port, blocking, useTCP, OueueSize);
<a name="l00757"></a>00757     }
<a name="l00758"></a>00758 
<a name="l00759"></a>00759 <span class="keywordtype">int</span> <a class="code" href="a00077.htm#ga5e61ac3a46192caddcd98b27325ef953" title="Функция для проверки сокета">txnAssert</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; asr)
<a name="l00760"></a>00760     {
<a name="l00761"></a>00761     <span class="keywordflow">return</span> (asr._init)? <a class="code" href="a00078.htm#ga61504ff34c9e7ad86561df1ffca21759" title="Сокет в порядке.">TXN_OK</a> : <a class="code" href="a00078.htm#gaa56d5be53827cc51bd2a02fe580e00c9" title="Сокет не создан.">TXN_NOT_CREATED</a>;
<a name="l00762"></a>00762     }
<a name="l00763"></a>00763 
<a name="l00764"></a>00764 <span class="keywordtype">int</span> <a class="code" href="a00077.htm#gaac42a63b28b3c029dda53fd90ddd0cb8" title="Функция для изменения типа (синхронный - не синхронный) сокета.">txChangeSockType</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; to, <a class="code" href="a00077.htm#ga0696d269feb958d9f6fa2d0e1cf7e517" title="Типы сокета.">sock_type</a> blocking)
<a name="l00765"></a>00765     {
<a name="l00766"></a>00766     u_long mode = 0;
<a name="l00767"></a>00767 
<a name="l00768"></a>00768     <span class="keywordflow">switch</span> (blocking)
<a name="l00769"></a>00769         {
<a name="l00770"></a>00770         <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a57c7249731b701a916229d3c795ba9fd" title="Сокет блокирует выполнение программы во время приема/передачи.">TX_BLOCK</a>:    mode = 0; <span class="keywordflow">break</span>;
<a name="l00771"></a>00771         <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a80597d9c9785fab539e760bebf2acc22" title="Сокет не блокирует выполнение программы во время приема/передачи.">TX_NONBLOCK</a>: mode = 1; <span class="keywordflow">break</span>;
<a name="l00772"></a>00772 
<a name="l00773"></a>00773         <span class="keywordflow">default</span>:          <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00774"></a>00774         };
<a name="l00775"></a>00775 
<a name="l00776"></a>00776     <span class="keywordflow">if</span> (ioctlsocket (*<a class="code" href="a00077.htm#ga9edc914ce0aee67b6dda96cc2132d2e5" title="Функция, которая возвращает сокет winsock&amp;#39;а.">txGetWinSocket</a> (to), FIONBIO, &amp;mode) == SOCKET_ERROR) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00777"></a>00777 
<a name="l00778"></a>00778     to._type_ = blocking;
<a name="l00779"></a>00779 
<a name="l00780"></a>00780     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00781"></a>00781     }
<a name="l00782"></a>00782 
<a name="l00783"></a>00783 SOCKET* <a class="code" href="a00077.htm#ga9edc914ce0aee67b6dda96cc2132d2e5" title="Функция, которая возвращает сокет winsock&amp;#39;а.">txGetWinSocket</a> (<a class="code" href="a00015.htm" title="Cокет TXLib&amp;#39;a.">TX_SOCKET</a>&amp; what, <span class="keywordtype">bool</span> main<span class="comment">/* = true*/</span>)
<a name="l00784"></a>00784     {
<a name="l00785"></a>00785     SOCKET* ret = NULL;
<a name="l00786"></a>00786 
<a name="l00787"></a>00787     <span class="keywordflow">switch</span> (what._type)
<a name="l00788"></a>00788         {
<a name="l00789"></a>00789         <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a5594ab6ae4c1de966d629c79fd2ffc58" title="Сокет является клиентом.">TX_CLIENT</a>: ret = &amp;**(what._sock);                                          <span class="keywordflow">break</span>;
<a name="l00790"></a>00790         <span class="keywordflow">case</span> <a class="code" href="a00077.htm#gga0696d269feb958d9f6fa2d0e1cf7e517a348f2bd7cd4f969b024f32d9cb4c417c" title="Сокет является сервером, создается первым.">TX_SERVER</a>: ret = main? &amp;**(what._sock) : &amp;**(what._client_sock_for_serv);  <span class="keywordflow">break</span>;
<a name="l00791"></a>00791 
<a name="l00792"></a>00792         <span class="keywordflow">default</span>:        ret = &amp;**(what._sock);                                          <span class="keywordflow">break</span>;
<a name="l00793"></a>00793         }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795     <span class="keywordflow">return</span> ret;
<a name="l00796"></a>00796     }
<a name="l00797"></a>00797 
<a name="l00799"></a>00799 <span class="comment">//}</span>
<a name="l00800"></a>00800 
<a name="l00801"></a>00801 <span class="comment">// Dark side (Yes, we have cookies) (##--INTERANL--##)</span>
<a name="l00802"></a>00802 <span class="comment">//{</span>
<a name="l00804"></a>00804 <span class="comment"></span>
<a name="l00805"></a>00805 <span class="keywordtype">int</span>  _txInitTX_NETWORK();
<a name="l00806"></a>00806 <span class="keywordtype">void</span> _txDestTX_NETWORK();
<a name="l00807"></a>00807 
<a name="l00808"></a>00808 WSADATA main_wsa_data = {};
<a name="l00809"></a>00809 <span class="keywordtype">int</span> int_for_init = _txInitTX_NETWORK();
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 <span class="keywordtype">int</span> _txInitTX_NETWORK()
<a name="l00812"></a>00812     {
<a name="l00813"></a>00813     WSAStartup (0x0202, &amp;main_wsa_data);
<a name="l00814"></a>00814     atexit (_txDestTX_NETWORK);
<a name="l00815"></a>00815 
<a name="l00816"></a>00816     <span class="keywordflow">return</span> 0;
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 <span class="keywordtype">void</span> _txDestTX_NETWORK()
<a name="l00820"></a>00820     {
<a name="l00821"></a>00821     WSACleanup();
<a name="l00822"></a>00822     }
<a name="l00823"></a>00823 
<a name="l00824"></a>00824 <span class="preprocessor">#if !defined (__MODULE)</span>
<a name="l00825"></a>00825 <span class="preprocessor"></span>
<a name="l00826"></a>00826 <span class="preprocessor">    #define __MODULE &quot;TXNetwork appilication using small TXLib.\n&quot;                   // Ты это не видел. Забудь :)</span>
<a name="l00827"></a>00827 <span class="preprocessor"></span>
<a name="l00828"></a>00828 <span class="preprocessor">#endif</span>
<a name="l00829"></a>00829 <span class="preprocessor"></span>
<a name="l00830"></a>00830 <span class="preprocessor">#if defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)</span>
<a name="l00831"></a>00831 <span class="preprocessor"></span>
<a name="l00832"></a>00832 <span class="preprocessor">    #ifndef __MODULE</span>
<a name="l00833"></a>00833 <span class="preprocessor"></span><span class="preprocessor">    #define __MODULE       &quot;TXNetwork appilication using small TXLib.&quot; &quot;\n&quot; \</span>
<a name="l00834"></a>00834 <span class="preprocessor">                           &quot;#define __MODULE to set the name.\n&quot;</span>
<a name="l00835"></a>00835 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00836"></a>00836 <span class="preprocessor"></span>
<a name="l00837"></a>00837 <span class="preprocessor">    #ifndef __VERSION</span>
<a name="l00838"></a>00838 <span class="preprocessor"></span><span class="preprocessor">    #define __VERSION      &quot;sqrt (-1)&quot; &quot;\n&quot; \</span>
<a name="l00839"></a>00839 <span class="preprocessor">                           &quot;#define __VERSION to set the string value.\n&quot;</span>
<a name="l00840"></a>00840 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00841"></a>00841 <span class="preprocessor"></span>
<a name="l00842"></a>00842 <span class="preprocessor">    #ifndef __DESCRIPTION</span>
<a name="l00843"></a>00843 <span class="preprocessor"></span><span class="preprocessor">    #define __DESCRIPTION  &quot;Маленькое мышиное приложение, использующее великий TXNetwork и маленький TXLib&quot; &quot;\n&quot; \</span>
<a name="l00844"></a>00844 <span class="preprocessor">                           &quot;#define __DESCRIPTION to override project role.\n&quot;</span>
<a name="l00845"></a>00845 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00846"></a>00846 <span class="preprocessor"></span>
<a name="l00847"></a>00847 <span class="preprocessor">    #ifndef __AUTHOR</span>
<a name="l00848"></a>00848 <span class="preprocessor"></span><span class="preprocessor">    #define __AUTHOR       &quot;_RedMan_, 2015&quot; &quot;\n&quot; \</span>
<a name="l00849"></a>00849 <span class="preprocessor">                           &quot;#define __AUTHOR to override this name.&quot;</span>
<a name="l00850"></a>00850 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00851"></a>00851 <span class="preprocessor"></span>
<a name="l00852"></a>00852 <span class="preprocessor">#endif</span>
<a name="l00853"></a>00853 <span class="preprocessor"></span>
<a name="l00854"></a>00854 <span class="comment">// OMG!!! You found this!!! +------\</span>
<a name="l00855"></a>00855 <span class="comment">//                          +-----||</span>
<a name="l00856"></a>00856 <span class="comment">//                                ||</span>
<a name="l00857"></a>00857 <span class="comment">//                                ||</span>
<a name="l00858"></a>00858 <span class="comment">//                                \/</span>
<a name="l00859"></a>00859 <span class="comment">//             .-----------------------------.</span>
<a name="l00860"></a>00860 <span class="comment">//            /  _   _   _      *  __  __   /|</span>
<a name="l00861"></a>00861 <span class="comment">//           /  / \ / \ / \ |_/ | |_  (_   / |</span>
<a name="l00862"></a>00862 <span class="comment">//          /   \_  \_/ \_/ | \ | |__ ,_/ /  |</span>
<a name="l00863"></a>00863 <span class="comment">//         :.____________________________/   /</span>
<a name="l00864"></a>00864 <span class="comment">//         |  .--.   .--.   .--.   .--.  |  /</span>
<a name="l00865"></a>00865 <span class="comment">//         | (    ) (    ) (    ) (    ) | /</span>
<a name="l00866"></a>00866 <span class="comment">//         |  &#39;--&#39;   &#39;--&#39;   &#39;--&#39;   &#39;--&#39;  |/</span>
<a name="l00867"></a>00867 <span class="comment">//         &#39;-----------------------------&#39;</span>
<a name="l00868"></a>00868 <span class="comment">//</span>
<a name="l00869"></a>00869 
<a name="l00871"></a>00871 
<a name="l00872"></a>00872 <span class="comment">//}</span>
<a name="l00873"></a>00873 
<a name="l00874"></a>00874 <span class="preprocessor">#pragma GCC diagnostic pop</span>
<a name="l00875"></a>00875 <span class="preprocessor"></span>
<a name="l00876"></a>00876 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00059.htm">TXNetwork.h</a>      </li>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Thu Aug 13 2020 00:46:49. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
